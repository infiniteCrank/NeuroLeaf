[
  {
    "embedding": [
      0.25431801263078263,
      0.012601077171437014,
      0,
      0.1823615832179917,
      0,
      0,
      0.12400405410556851,
      0,
      0.26921643980958443,
      0,
      0,
      0,
      0.08755021307710263,
      0,
      0,
      0,
      0.3052873546706157,
      0,
      0,
      0.11386609145703935,
      0.20496969105691992,
      0,
      0,
      0.08043170282005137,
      0,
      0.11995518503548291,
      0,
      0.10173164970141711,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.23406107643432753,
      0.2038649150609133,
      0.08287776584094701,
      0,
      0,
      0,
      0,
      0,
      0.23182750191679655,
      0,
      0,
      0,
      0.3434885873912974,
      0.2594656726136538,
      0.135792328240191,
      0.12558197514984995,
      0,
      0,
      0,
      0.3664326786907531,
      0.03173482697570859,
      0,
      0.14847407970040016,
      0,
      0.27630185244612016,
      0.12984337072642352,
      0
    ],
    "metadata": {
      "text": "# Learn Go in 16 Weeks: From No Programming Experience to Junior Go Developer"
    }
  },
  {
    "embedding": [
      0.18884654397499334,
      0,
      0,
      0.21835896901246893,
      0,
      0,
      0.19392090724080718,
      0,
      0.1821100975747342,
      0,
      0.002244251525568229,
      0,
      0.14736712609535157,
      0,
      0,
      0,
      0.2756516929631729,
      0,
      0,
      0.12120935438942132,
      0.1787261919466782,
      0,
      0,
      0.018169052919308232,
      0,
      0.20758598269039696,
      0,
      0.12473807144935212,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08198986286025194,
      0,
      0.3134675621765509,
      0.1492027424263758,
      0.10517276911214853,
      0,
      0,
      0,
      0,
      0,
      0.2659433712414444,
      0,
      0,
      0,
      0.38062968740179165,
      0.20991898151334487,
      0.018263965245652953,
      0.10564710712312295,
      0,
      0,
      0,
      0.4166468699006932,
      0.020561152427620886,
      0,
      0.07008699971371785,
      0,
      0.21682537694844276,
      0.07195611792753526,
      0.04440007999449307
    ],
    "metadata": {
      "text": "Welcome to *Learn Go in 16 Weeks*! This textbook is designed to take students with no prior programming experience through fundamental programming concepts and then guide them in learning Go—from writing their very first program to building full-scale projects as a junior developer. The first 4 weeks cover general programming basics, and the following 12 weeks dive deep into Go programming."
    }
  },
  {
    "embedding": [
      0.20451433464981028,
      0,
      0,
      0.09473566338964033,
      0,
      0,
      0.2465579299550043,
      0,
      0.3060232027966725,
      0,
      0,
      0,
      0.16976134525370118,
      0,
      0.006434224609835323,
      0,
      0.2952528180806734,
      0,
      0,
      0,
      0.19149473380469637,
      0,
      0,
      0.10721262310744167,
      0,
      0.13567861614099977,
      0,
      0.21594701410943376,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09848474215958078,
      0,
      0.1929173091277977,
      0.1763972453237791,
      0.12287257201848091,
      0,
      0,
      0,
      0,
      0,
      0.2451991230973825,
      0,
      0,
      0,
      0.35479196680273,
      0.17682222581496876,
      0.16147805109315502,
      0.1659775021750542,
      0,
      0,
      0,
      0.38766926716475064,
      0,
      0,
      0.12668150868350697,
      0,
      0.16820688534542874,
      0,
      0.08287312702204264
    ],
    "metadata": {
      "text": "- [Week 1: Introduction to Computers and Programming Concepts](#week-1-introduction-to-computers-and-programming-concepts)\n  - [Day 1: What is a Computer Program?](#day-1-what-is-a-computer-program)\n  - [Day 2: Overview of Programming Languages and Tools](#day-2-overview-of-programming-languages-and-tools)\n  - [Day 3: The Development Process & Pseudocode](#day-3-the-development-process--pseudocode)\n  - [Day 4: Introduction to Variables and Data Types](#day-4-introduction-to-variables-and-data-types)\n  - [Day 5: Review and Exercises](#day-5-review-and-exercises)\n- [Week 2: Basic Programming Constructs](#week-2-basic-programming-constructs)\n  - [Day 1: Understanding Variables and Operators](#day-1-understanding-variables-and-operators)\n  - [Day 2: Control Flow with Conditionals](#day-2-control-flow-with-conditionals)\n  - [Day 3: Loops and Iteration Concepts](#day-3-loops-and-iteration-concepts)\n  - [Day 4: Basic Input/Output Concepts](#day-4-basic-inputoutput-concepts)\n  - [Day 5: Mini Project & Review](#day-5-mini-project--review)\n- [Week 3: Functions and Modularity](#week-3-functions-and-modularity)\n  - [Day 1: What Are Functions and Why Use Them?](#day-1-what-are-functions-and-why-use-them)\n  - [Day 2: Defining and Calling Functions](#day-2-defining-and-calling-functions)\n  - [Day 3: Function Parameters and Return Values](#day-3-function-parameters-and-return-values)\n  - [Day 4: Introduction to Debugging and Error Checking](#day-4-introduction-to-debugging-and-error-checking)\n  - [Day 5: Review and a Simple Functions Project](#day-5-review-and-a-simple-functions-project)\n- [Week 4: Data Structures and Problem Solving](#week-4-data-structures-and-problem-solving)\n  - [Day 1: Arrays and Lists – Concepts and Uses](#day-1-arrays-and-lists--concepts-and-uses)\n  - [Day 2: Working with Strings](#day-2-working-with-strings)\n  - [Day 3: Introduction to Key-Value Stores (Maps/Dictionaries)](#day-3-introduction-to-key-value-stores-mapsdictionaries)\n  - [Day 4: Basic Algorithms – Searching and Sorting](#day-4-basic-algorithms--searching-and-sorting)\n  - [Day 5: Mini Project and Review](#day-5-mini-project-and-review)\n- [Week 5: Introduction to Go and Setup](#week-5-introduction-to-go-and-setup)\n  - [Day 1: Introduction to Go](#day-1-introduction-to-go)\n  - [Day 2: Installation and Setup](#day-2-installation-and-setup)\n  - [Day 3: Your First Go Program](#day-3-your-first-go-program)\n  - [Day 4: Basic Syntax and Code Structure](#day-4-basic-syntax-and-code-structure)\n  - [Day 5: Exercises and Review](#day-5-exercises-and-review)\n- [Week 6: Go Basics and Syntax](#week-6-go-basics-and-syntax)\n  - [Day 1: Variables and Constants](#day-1-variables-and-constants)\n  - [Day 2: Data Types](#day-2-data-types)\n  - [Day 3: Basic Operators](#day-3-basic-operators)\n  - [Day 4: Basic Input/Output](#day-4-basic-inputoutput)\n  - [Day 5: Mini Project & Review](#day-5-mini-project--review)\n- [Week 7: Control Structures and Basic Data Types](#week-7-control-structures-and-basic-data-types)\n  - [Day 1: If-Else Statements](#day-1-if-else-statements)\n  - [Day 2: Switch Statements](#day-2-switch-statements)\n  - [Day 3: For Loops (Part 1)](#day-3-for-loops-part-1)\n  - [Day 4: For Loops (Part 2) and Ranges](#day-4-for-loops-part-2-and-ranges)\n  - [Day 5: Arrays and Strings](#day-5-arrays-and-strings)\n- [Week 8: Functions, Error Handling, and Packages](#week-8-functions-error-handling-and-packages)\n  - [Day 1: Functions Basics](#day-1-functions-basics)\n  - [Day 2: Advanced Functions](#day-2-advanced-functions)\n  - [Day 3: Error Handling](#day-3-error-handling)\n  - [Day 4: Using Standard Library Packages](#day-4-using-standard-library-packages)\n  - [Day 5: Building and Organizing Code](#day-5-building-and-organizing-code)\n- [Week 9: Arrays, Slices, and Maps](#week-9-arrays-slices-and-maps)\n  - [Day 1: Arrays](#day-1-arrays)\n  - [Day 2: Slices](#day-2-slices)\n  - [Day 3: Slice Operations](#day-3-slice-operations)\n  - [Day 4: Maps](#day-4-maps)\n  - [Day 5: Review and Mini Project](#day-5-review-and-mini-project)\n- [Week 10: Pointers, Memory, and Interfaces](#week-10-pointers-memory-and-interfaces)\n  - [Day 1: Pointers Basics](#day-1-pointers-basics)\n  - [Day 2: Pointers in Functions](#day-2-pointers-in-functions)\n  - [Day 3: Introduction to Memory Management](#day-3-introduction-to-memory-management)\n  - [Day 4: Interfaces Basics](#day-4-interfaces-basics)\n  - [Day 5: Interfaces in Depth](#day-5-interfaces-in-depth)\n- [Week 11: Structs and Methods](#week-11-structs-and-methods)\n  - [Day 1: Introduction to Structs](#day-1-introduction-to-structs)\n  - [Day 2: Methods on Structs](#day-2-methods-on-structs)\n  - [Day 3: Struct Composition](#day-3-struct-composition)\n  - [Day 4: Constructors and Initialization](#day-4-constructors-and-initialization)\n  - [Day 5: Review and Mini Project](#day-5-review-and-mini-project)\n- [Week 12: Concurrency in Go](#week-12-concurrency-in-go)\n  - [Day 1: Introduction to Concurrency](#day-1-introduction-to-concurrency)\n  - [Day 2: Goroutines in Depth](#day-2-goroutines-in-depth)\n  - [Day 3: Channels Basics](#day-3-channels-basics)\n  - [Day 4: Select Statement](#day-4-select-statement)\n  - [Day 5: Concurrency Patterns and Review](#day-5-concurrency-patterns-and-review)\n- [Week 13: Working with Files, Networking, and the Web](#week-13-working-with-files-networking-and-the-web)\n  - [Day 1: File I/O Basics](#day-1-file-io-basics)\n  - [Day 2: More on File I/O](#day-2-more-on-file-io)\n  - [Day 3: Introduction to HTTP Servers](#day-3-introduction-to-http-servers)\n  - [Day 4: HTTP Clients](#day-4-http-clients)\n  - [Day 5: JSON Handling](#day-5-json-handling)\n- [Week 14: Testing, Debugging, and Best Practices](#week-14-testing-debugging-and-best-practices)\n  - [Day 1: Introduction to Testing](#day-1-introduction-to-testing)\n  - [Day 2: Writing More Tests](#day-2-writing-more-tests)\n  - [Day 3: Benchmarking](#day-3-benchmarking)\n  - [Day 4: Debugging Techniques](#day-4-debugging-techniques)\n  - [Day 5: Best Practices and Code Reviews](#day-5-best-practices-and-code-reviews)\n- [Week 15: Building CLI and Web Applications](#week-15-building-cli-and-web-applications)\n  - [Day 1: Introduction to CLI Applications](#day-1-introduction-to-cli-applications)\n  - [Day 2: Advanced CLI Applications](#day-2-advanced-cli-applications)\n  - [Day 3: Introduction to Web Applications](#day-3-introduction-to-web-applications)\n  - [Day 4: Web Frameworks Overview](#day-4-web-frameworks-overview)\n  - [Day 5: Deployment and Project Structure](#day-5-deployment-and-project-structure)\n- [Week 16: Final Project and Career Development](#week-16-final-project-and-career-development)\n  - [Day 1: Final Project Kick-off](#day-1-final-project-kick-off)\n  - [Day 2: Building the Core Functionality](#day-2-building-the-core-functionality)\n  - [Day 3: Expanding the Project](#day-3-expanding-the-project)\n  - [Day 4: Testing and Debugging the Final Project](#day-4-testing-and-debugging-the-final-project)\n  - [Day 5: Final Review, Code Cleanup, and Career Prep](#day-5-final-review-code-cleanup-and-career-prep)"
    }
  },
  {
    "embedding": [
      0.26680119341531117,
      0.05662283090300712,
      0,
      0.08112439926184843,
      0,
      0,
      0.1471086668652999,
      0,
      0.2654772120168429,
      0,
      0,
      0,
      0.08008203226509203,
      0,
      0,
      0,
      0.3217787978822107,
      0,
      0,
      0.05715440042063231,
      0.1843509707496368,
      0,
      0,
      0.07952293278020466,
      0,
      0.1934910692336017,
      0,
      0.10902869939563029,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006368456665150211,
      0,
      0.2541606929505251,
      0.21936016704924663,
      0.10406700900505843,
      0,
      0,
      0,
      0,
      0,
      0.2352574675148093,
      0,
      0,
      0,
      0.3094123400274708,
      0.24136388578897186,
      0.03599807709077057,
      0.05041037094182319,
      0,
      0,
      0,
      0.4612729063810239,
      0.156979722054699,
      0,
      0.11496197752300179,
      0,
      0.1860876491701384,
      0.04506903423145783,
      0
    ],
    "metadata": {
      "text": "## ||| Week 1: Introduction to Computers and Programming Concepts"
    }
  },
  {
    "embedding": [
      0.2256792022935084,
      0,
      0,
      0.2605855139810931,
      0,
      0,
      0.09808246785959725,
      0,
      0.28707952876315895,
      0.031378477625896316,
      0,
      0,
      0.13321978623061265,
      0,
      0,
      0,
      0.2766006310805736,
      0,
      0,
      0.09845169176643247,
      0.11475058471301212,
      0,
      0,
      0.05821890451646477,
      0,
      0.1581665530654484,
      0,
      0.0015641902366991792,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02748405512945438,
      0,
      0.29274599535120327,
      0.24914370537727365,
      0.10259127532362552,
      0,
      0,
      0,
      0,
      0,
      0.22014722505363712,
      0,
      0,
      0,
      0.39279422700003064,
      0.11862747018906279,
      0.09381356671233958,
      0.07196996835210664,
      0,
      0.019048795714455013,
      0,
      0.418438815476429,
      0.07218568929087621,
      0,
      0.16520172338161085,
      0,
      0.1827268182669379,
      0.1057676106205137,
      0.015155964226523733
    ],
    "metadata": {
      "text": "### Day 1: What is a Computer Program?\n**Objectives:**\n- Define what a computer program is.\n- Understand the evolution of programming."
    }
  },
  {
    "embedding": [
      0.2532077349864219,
      0,
      0,
      0.24603993211953779,
      0,
      0,
      0.27120190338734423,
      0,
      0.2590402522430328,
      0.003968371604856037,
      0,
      0,
      0.04001587139016185,
      0,
      0.036540962677046596,
      0,
      0.2325629691600184,
      0,
      0,
      0.044200060986146227,
      0.18586667245784155,
      0,
      0,
      0.12727610094375283,
      0,
      0.19706478710922268,
      0,
      0.07037587059352286,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.32835656842372046,
      0.2309508293635612,
      0.10294341195819076,
      0,
      0,
      0,
      0,
      0,
      0.17876433738755276,
      0,
      0,
      0,
      0.35880419794060314,
      0.1237964604076199,
      0.015272439812326516,
      0.11517508744477824,
      0,
      0,
      0,
      0.41626713078177136,
      0.00808218129829384,
      0,
      0.1506858897975871,
      0,
      0.14495789824302835,
      0.05073500291844564,
      0.01618254090175017
    ],
    "metadata": {
      "text": "**Topics:**\n- History of computing.\n- Basic concepts behind instructions and algorithms."
    }
  },
  {
    "embedding": [
      0.16658016522619737,
      0.04238895223066346,
      0,
      0.13323040762939112,
      0,
      0,
      0.22453237547826513,
      0,
      0.2456691996937004,
      0,
      0,
      0,
      0.08538232661882895,
      0,
      0,
      0,
      0.3832791666606836,
      0,
      0,
      0.0837662443149785,
      0.07518105195342263,
      0,
      0,
      0.0559058851365546,
      0,
      0.177483176646873,
      0,
      0.1681944709982316,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03354353428413364,
      0,
      0.21208042917719117,
      0.16076784788723375,
      0.2262001228430428,
      0,
      0,
      0,
      0,
      0,
      0.20049721721843156,
      0,
      0,
      0,
      0.3458197312668836,
      0.2188318726598535,
      0.06705614688443215,
      0.17160641530391876,
      0,
      0.02029590332861293,
      0,
      0.385893200909102,
      0.10686445445912703,
      0,
      0.030204830477806307,
      0,
      0.2636810559024404,
      0.12474197942115746,
      0.025948356115005733
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a short paragraph on what you think a computer program does."
    }
  },
  {
    "embedding": [
      0.2350505310212977,
      0,
      0,
      0.05303886766365156,
      0,
      0,
      0.17816178582036316,
      0,
      0.24995484225698278,
      0,
      0,
      0,
      0.10228382652539873,
      0,
      0,
      0,
      0.2822983733207291,
      0,
      0,
      0.06963493770998479,
      0.198958733899577,
      0,
      0,
      0.15015342752562538,
      0,
      0.1541844003416566,
      0,
      0.09324545928172968,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02443707587280011,
      0,
      0.3370330700761643,
      0.26781508098303225,
      0.103611589196759,
      0,
      0,
      0,
      0,
      0,
      0.22821436959334088,
      0,
      0,
      0,
      0.2876216291949657,
      0.2014935697469107,
      0.1793555222999461,
      0.07755722330348994,
      0,
      0.01978285070230145,
      0,
      0.42026216194059707,
      0.1087166219725119,
      0,
      0.09190592274278703,
      0,
      0.21482066346614118,
      0.06672359767569547,
      0
    ],
    "metadata": {
      "text": "### Day 2: Overview of Programming Languages and Tools\n**Objectives:**\n- Learn the difference between programming languages.\n- Understand the roles of compilers and interpreters."
    }
  },
  {
    "embedding": [
      0.2820159119149376,
      0,
      0,
      0.1623847617090412,
      0,
      0,
      0.10972288411602495,
      0,
      0.29061230964757,
      0,
      0,
      0,
      0.07814602771694533,
      0,
      0,
      0,
      0.26425596323038253,
      0,
      0,
      0.14229832889157723,
      0.1914768043837663,
      0,
      0,
      0.12589433286281773,
      0,
      0.1690399450880947,
      0,
      0.09091081225045278,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08117102299079851,
      0,
      0.2972630497433335,
      0.19400826934154003,
      0.13670147573593378,
      0,
      0,
      0,
      0,
      0,
      0.25992372598844177,
      0,
      0,
      0,
      0.32256246492736046,
      0.12742416687573355,
      0.10738053114034536,
      0.1256254544038741,
      0,
      0.02262431218569578,
      0,
      0.40655791884776776,
      0.11892352112061058,
      0,
      0.11176797287549949,
      0,
      0.2016305957287952,
      0.05708687652395677,
      0.09632310510972147
    ],
    "metadata": {
      "text": "**Topics:**\n- Examples of popular programming languages.\n- Introduction to development tools and environments."
    }
  },
  {
    "embedding": [
      0.2216812351583091,
      0,
      0,
      0.15201839615775062,
      0,
      0,
      0.2741248507226565,
      0,
      0.19283520262245685,
      0,
      0,
      0,
      0.022983006369295882,
      0,
      0,
      0,
      0.3318478423473159,
      0,
      0,
      0.021929082832997878,
      0.11306544681349238,
      0,
      0,
      0.1091739491556012,
      0,
      0.21502238398582774,
      0,
      0.11324982804198158,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10421422814677396,
      0,
      0.255447306548898,
      0.20216531714519823,
      0.16718026527570684,
      0,
      0,
      0,
      0,
      0,
      0.21519891253610837,
      0,
      0,
      0,
      0.28934393154347854,
      0.27426555026614086,
      0,
      0.0362847540542,
      0,
      0,
      0,
      0.4620041659102097,
      0.06695812560711258,
      0,
      0.024582536930638537,
      0,
      0.2245989910873259,
      0,
      0.006332808125208686
    ],
    "metadata": {
      "text": "**Exercises:**\n- Research one programming language other than Go and list its strengths."
    }
  },
  {
    "embedding": [
      0.2077184630183804,
      0,
      0,
      0.15296381881044702,
      0,
      0,
      0.2469842239372419,
      0,
      0.24305361026008965,
      0,
      0,
      0,
      0.005639905294241869,
      0,
      0,
      0,
      0.3375481171811926,
      0,
      0,
      0.09893457882317787,
      0.18376180171604137,
      0,
      0,
      0.17921881168948997,
      0,
      0.19722578812193198,
      0,
      0.1317213903013811,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.039405303399503176,
      0,
      0.2264491581688313,
      0.16784818164559448,
      0.12953246437671637,
      0,
      0,
      0,
      0,
      0,
      0.22288602617429917,
      0,
      0,
      0,
      0.3231562710703217,
      0.21001193306040783,
      0.005672260706950522,
      0.13289119739893338,
      0,
      0,
      0,
      0.38440108430598935,
      0.016968805936171283,
      0,
      0.01877609304044197,
      0,
      0.3225234662664386,
      0.0326423994275333,
      0.017414499961562118
    ],
    "metadata": {
      "text": "### Day 3: The Development Process & Pseudocode\n**Objectives:**\n- Understand the stages of software development.\n- Learn to write pseudocode to plan algorithms."
    }
  },
  {
    "embedding": [
      0.2295078743244455,
      0,
      0,
      0.09289447936691182,
      0,
      0,
      0.20318296452468407,
      0,
      0.3030438291147814,
      0,
      0,
      0,
      0.1710270660284319,
      0,
      0,
      0,
      0.32345169864249407,
      0,
      0,
      0.06471607006568592,
      0.1386971058000692,
      0,
      0,
      0.07114479236815657,
      0,
      0.10351054426313298,
      0,
      0.12393540529939243,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05882719100093263,
      0,
      0.2548381413079471,
      0.1465981858791048,
      0.17277693964731292,
      0,
      0,
      0,
      0,
      0,
      0.3176577543350677,
      0,
      0,
      0,
      0.34890839039208904,
      0.09847464180953996,
      0.13450076102447933,
      0.20154382789225256,
      0,
      0,
      0,
      0.40110040109999945,
      0.0780270326419942,
      0,
      0.05029790177225118,
      0,
      0.15626918722469513,
      0.11108939770585671,
      0.009373470742224723
    ],
    "metadata": {
      "text": "**Topics:**\n- Requirements, design, coding, testing, and maintenance.\n- Practice writing pseudocode for simple tasks."
    }
  },
  {
    "embedding": [
      0.20335620700233384,
      0.015650853077625582,
      0,
      0.1805528191232208,
      0,
      0,
      0.18555885822682894,
      0,
      0.20655209997850402,
      0,
      0,
      0,
      0.09639197063459747,
      0,
      0.022160050051018076,
      0,
      0.34173556957357176,
      0,
      0,
      0.10009837738460138,
      0.1814900870741411,
      0,
      0,
      0.05901573626816538,
      0,
      0.19280550863261936,
      0,
      0.13983566532278519,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.044543066310517035,
      0,
      0.17770701309980108,
      0.16176740849907276,
      0.08853207215532914,
      0,
      0,
      0,
      0,
      0,
      0.2780942329615835,
      0,
      0,
      0,
      0.3610841370894287,
      0.25181875907159323,
      0.13741961005295292,
      0.15409066795290546,
      0,
      0,
      0,
      0.3674335445819062,
      0.09159120824387486,
      0,
      0.18144442452594786,
      0,
      0.22739972983575094,
      0.09804478936422717,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write pseudocode for a program that calculates the sum of two numbers."
    }
  },
  {
    "embedding": [
      0.30079736390980516,
      0,
      0.001770898494796883,
      0.13509171361627995,
      0,
      0,
      0.19864313462771108,
      0,
      0.27649067792124005,
      0,
      0,
      0,
      0.09550322891828697,
      0,
      0,
      0,
      0.20193806846795292,
      0,
      0,
      0.011179543723297172,
      0.1707480347239739,
      0.022093410050753222,
      0,
      0.063063487930768,
      0,
      0.1496845058089631,
      0,
      0.03157339529861809,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07944494442535373,
      0,
      0.3282612750171753,
      0.26740256275836066,
      0.07072609090297004,
      0,
      0,
      0,
      0,
      0,
      0.22783803113454268,
      0,
      0,
      0,
      0.35523902089729004,
      0.15475168505611003,
      0.08010413267121222,
      0.11993759212034509,
      0,
      0,
      0,
      0.43253880370285447,
      0.06736092259410063,
      0,
      0.15835656471364976,
      0,
      0.19274124763056755,
      0.03214629903456124,
      0
    ],
    "metadata": {
      "text": "### Day 4: Introduction to Variables and Data Types\n**Objectives:**\n- Learn what variables and data types are.\n- Understand how data is stored and manipulated."
    }
  },
  {
    "embedding": [
      0.21325555270938196,
      0,
      0,
      0.20695767535521878,
      0,
      0,
      0.26595407401073456,
      0,
      0.19218543896957344,
      0,
      0,
      0,
      0.014832037842335702,
      0,
      0,
      0,
      0.37675710477747787,
      0,
      0,
      0.1175985654736993,
      0.09834102671119627,
      0,
      0,
      0.14616435524527935,
      0,
      0.17523978709913118,
      0,
      0.047157094887125224,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06176714052420198,
      0,
      0.3018090923170498,
      0.2361407086301312,
      0.11015846797420269,
      0,
      0,
      0,
      0,
      0,
      0.1763416836908039,
      0,
      0,
      0,
      0.2979527223040383,
      0.22465701306932076,
      0.06788576498436999,
      0.051633133743846205,
      0,
      0,
      0,
      0.4376320637308302,
      0.08121788252399131,
      0,
      0,
      0,
      0.21085894843249084,
      0,
      0.03259385508889259
    ],
    "metadata": {
      "text": "**Code Example (in Go for consistency):**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.22860638058032975,
      0,
      0,
      0.1645157114994471,
      0,
      0,
      0.2383917043679056,
      0,
      0.2985534647579092,
      0.08375437111069028,
      0,
      0,
      0.05972732079851178,
      0,
      0,
      0,
      0.3267030695015706,
      0,
      0,
      0.07847683263175599,
      0.12291045278981702,
      0,
      0,
      0.11054604726915712,
      0,
      0.12119064450255229,
      0,
      0.12691163436048244,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06275255545229867,
      0,
      0.34050826129765416,
      0.3121716630693119,
      0.09564403833183242,
      0,
      0,
      0,
      0,
      0,
      0.13797859407751992,
      0,
      0,
      0,
      0.37356300089942057,
      0.12869800034615314,
      0.04864593292660312,
      0.12746064872808469,
      0,
      0.015984645895702487,
      0,
      0.3575618328288909,
      0.13078534663820549,
      0,
      0.044060514154528836,
      0,
      0.1333068865971425,
      0.07559189680278212,
      0.047214851916909675
    ],
    "metadata": {
      "text": "func main() {\n    var number int = 10\n    var message string = \"Hello, World!\"\n    fmt.Println(number, message)\n}\n```"
    }
  },
  {
    "embedding": [
      0.19590956692361183,
      0,
      0,
      0.16168942719198223,
      0,
      0,
      0.17858287445650645,
      0,
      0.2348439773816849,
      0,
      0,
      0,
      0.1280192553270678,
      0,
      0.06060309386779815,
      0,
      0.3035208870786869,
      0,
      0,
      0.09392778536805588,
      0.2225372034214906,
      0,
      0,
      0.1381526570119453,
      0,
      0.139452319639309,
      0,
      0.12403391284665957,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06560782259415185,
      0,
      0.2573653211858376,
      0.21497241114315718,
      0.08860069640857177,
      0,
      0,
      0,
      0,
      0,
      0.23610026482887503,
      0,
      0,
      0,
      0.37114675388597573,
      0.24340134436090674,
      0.1746135166346694,
      0.060352409035193476,
      0,
      0,
      0,
      0.3766762496786852,
      0.038069475683433766,
      0,
      0.18397276441161686,
      0,
      0.17189057502059482,
      0.07505384393560678,
      0.012210889104015233
    ],
    "metadata": {
      "text": "**Exercises:**\n- List three different data types and give an example of each."
    }
  },
  {
    "embedding": [
      0.23147867462296165,
      0,
      0,
      0.12706240216271997,
      0,
      0,
      0.2039648968533292,
      0,
      0.22021213982120574,
      0,
      0,
      0,
      0.018993231834903097,
      0,
      0.02931549672266431,
      0,
      0.2635982501464873,
      0,
      0,
      0.08665514165279962,
      0.23627150325896218,
      0,
      0,
      0.1823708085959062,
      0,
      0.14852229014733473,
      0,
      0.11645404922767952,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0629862906460457,
      0,
      0.3336363861444701,
      0.2285015442695126,
      0.17727528841373022,
      0,
      0,
      0,
      0,
      0,
      0.26651505757306193,
      0,
      0,
      0,
      0.3795271171523676,
      0.17764887635127302,
      0.13741471778594241,
      0.0850713447816209,
      0,
      0,
      0,
      0.32864228167918585,
      0.07338716527633074,
      0,
      0.09176636258976094,
      0,
      0.20060003719097877,
      0.011594381321291503,
      0.058336951092205366
    ],
    "metadata": {
      "text": "### Day 5: Review and Exercises\n**Objectives:**\n- Reinforce the concepts learned during the week."
    }
  },
  {
    "embedding": [
      0.19411484645866356,
      0,
      0,
      0.18177745262477427,
      0,
      0,
      0.15475927566922096,
      0,
      0.296681050452117,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2797354988148326,
      0,
      0,
      0.15696802317894304,
      0.10013167462659943,
      0,
      0,
      0.13182379035470423,
      0,
      0.10288417407138893,
      0,
      0.07593426266704871,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3091202383126659,
      0.27266353846078845,
      0.057231247321502456,
      0,
      0,
      0,
      0,
      0,
      0.1388315869509624,
      0,
      0,
      0,
      0.3661153406978397,
      0.19318852670457806,
      0,
      0.09843350419389311,
      0,
      0.07076336539973124,
      0,
      0.43468554780404467,
      0.17207194214295368,
      0,
      0.08258715163600565,
      0,
      0.236090204024921,
      0.07880269549954048,
      0.06943910986746281
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a simple pseudocode plan for a calculator.\n- Write a few lines of Go code to declare variables of different types."
    }
  },
  {
    "embedding": [
      0.18060522647374105,
      0,
      0,
      0.2917411705589645,
      0,
      0,
      0.25804230669420003,
      0,
      0.17591475058315215,
      0.010052799713916448,
      0,
      0,
      0.016100384874199188,
      0,
      0,
      0,
      0.25870605999959345,
      0,
      0,
      0.14776463635321438,
      0.11267525843329722,
      0,
      0,
      0.1539017658068973,
      0,
      0.21167162769275713,
      0,
      0.02774418863403137,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0604022943567516,
      0,
      0.3115636810158725,
      0.17824020982149563,
      0.11388849828722356,
      0,
      0,
      0,
      0,
      0,
      0.19237325570637123,
      0,
      0,
      0,
      0.3440619036260324,
      0.2152111836791598,
      0.04788147771603569,
      0.10369691877870671,
      0,
      0,
      0,
      0.42305531325770057,
      0.08371538274117003,
      0,
      0.08042583655608167,
      0,
      0.23331133247265415,
      0,
      0.08101076123999489
    ],
    "metadata": {
      "text": "## ||| Week 2: Basic Programming Constructs"
    }
  },
  {
    "embedding": [
      0.2583812067244724,
      0,
      0,
      0.23705937683098988,
      0,
      0,
      0.3277899107929459,
      0,
      0.23068380466527885,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.25318602205159263,
      0,
      0,
      0.1413653039796981,
      0.1834620807645115,
      0,
      0,
      0.12044412672060041,
      0,
      0.1449992836628295,
      0,
      0.11044459340553009,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0734974153043417,
      0,
      0.36448622227625754,
      0.14044468709411,
      0.08613837948950287,
      0,
      0,
      0,
      0,
      0,
      0.2659155961413678,
      0,
      0,
      0,
      0.2905020492948563,
      0.21290032254709595,
      0,
      0.10156158311609169,
      0,
      0,
      0,
      0.373611905291165,
      0,
      0,
      0.011594476184076382,
      0,
      0.16798054688268169,
      0.028342455312435663,
      0.07761459624529966
    ],
    "metadata": {
      "text": "### Day 1: Understanding Variables and Operators\n**Objectives:**\n- Learn how variables store data.\n- Understand arithmetic and assignment operators."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.19628724592718944,
      0.00903199893612778,
      0,
      0.17694985765047017,
      0,
      0,
      0.22134480019803232,
      0,
      0.24106798157041373,
      0.10088538482911177,
      0,
      0,
      0.09785319278244814,
      0,
      0,
      0.015392279551600703,
      0.36108586018918803,
      0,
      0,
      0.13239161569330107,
      0.13819141733666326,
      0,
      0,
      0.10324760949696903,
      0,
      0.15060091479685006,
      0,
      0.10733201566495494,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.24951064716547267,
      0.24123260867035673,
      0.03716271440989145,
      0,
      0,
      0,
      0,
      0,
      0.11972691894238179,
      0,
      0,
      0,
      0.29303133730883907,
      0.24376720133073293,
      0.029841588361873263,
      0.1132878588370223,
      0,
      0.008879647100487682,
      0,
      0.4615580659163998,
      0.12079824784355143,
      0,
      0.0729473930205093,
      0,
      0.21625460889359133,
      0.12704248316860756,
      0
    ],
    "metadata": {
      "text": "func main() {\n    x := 5\n    y := 3\n    sum := x + y\n    fmt.Println(\"Sum:\", sum)\n}\n```"
    }
  },
  {
    "embedding": [
      0.17991935943341916,
      0,
      0,
      0.08199918735981321,
      0,
      0,
      0.10600568216148783,
      0,
      0.21051327898413474,
      0,
      0,
      0,
      0.13770059006763422,
      0,
      0,
      0,
      0.3198236483512499,
      0,
      0,
      0.1218672172773748,
      0.17707284208204727,
      0.0033388844947926815,
      0,
      0.06436747996280888,
      0,
      0.13251384161760116,
      0,
      0.090523634273344,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011957931794614192,
      0.010436463680387439,
      0,
      0.2316316883204508,
      0.15799980621053714,
      0.07880665053072093,
      0,
      0,
      0,
      0,
      0,
      0.2624784894445283,
      0,
      0,
      0,
      0.4395763501651485,
      0.3273816317193939,
      0.06410449567150402,
      0.1425631302682908,
      0,
      0,
      0,
      0.37329824387582905,
      0.09033273597212325,
      0,
      0.0725935591388686,
      0,
      0.2737971087891713,
      0.037786034794594844,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a program that subtracts two numbers and prints the result."
    }
  },
  {
    "embedding": [
      0.16348740682739873,
      0,
      0,
      0.3286016772360543,
      0,
      0,
      0.27625848780662055,
      0,
      0.2131391954409061,
      0.04094516436174625,
      0,
      0,
      0.03938305011015712,
      0,
      0,
      0,
      0.29075256429235125,
      0,
      0,
      0.13791337883706373,
      0.07130336981541707,
      0,
      0,
      0.05376517286956121,
      0,
      0.2612491364042104,
      0,
      0.009903216022148296,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.019683843723166124,
      0,
      0.3020880796550185,
      0.2435956406018199,
      0.1300697574511085,
      0,
      0,
      0,
      0,
      0,
      0.11722066042723565,
      0,
      0,
      0,
      0.28139864097903067,
      0.15116137070057173,
      0.0071093136343466585,
      0.09722811754583775,
      0,
      0,
      0,
      0.4610396766901848,
      0,
      0,
      0,
      0,
      0.2230583051152876,
      0.06413474228671187,
      0.028810058729519153
    ],
    "metadata": {
      "text": "### Day 2: Control Flow with Conditionals\n**Objectives:**\n- Understand if-else constructs.\n- Learn to make decisions based on conditions."
    }
  },
  {
    "embedding": [
      0.22238132232311547,
      0,
      0,
      0.2421076228049899,
      0,
      0,
      0.2558131633399406,
      0,
      0.18673304848782032,
      0,
      0,
      0,
      0.05094675271924885,
      0,
      0,
      0,
      0.3052437274599271,
      0,
      0,
      0.12417254230602398,
      0.10313911912665719,
      0,
      0,
      0.17267311868865917,
      0,
      0.23500989875840889,
      0,
      0.049261893776576304,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07459197184695887,
      0,
      0.282408437521924,
      0.1885062535876325,
      0.12977015477678214,
      0,
      0,
      0,
      0,
      0,
      0.21217959268673775,
      0,
      0,
      0,
      0.31782269526982593,
      0.14042785463552324,
      0.12031284239235894,
      0.12426014323840694,
      0,
      0,
      0,
      0.4257194507676721,
      0.08221915989781713,
      0,
      0.09622812368205534,
      0,
      0.21285839687702093,
      0,
      0.07997797025771701
    ],
    "metadata": {
      "text": "**Code Example (pseudocode/Go blend):**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.26696100747051477,
      0,
      0,
      0.3784915881953672,
      0,
      0,
      0.26501317404678076,
      0,
      0.22882532287106871,
      0.03067282244335333,
      0,
      0,
      0,
      0,
      0,
      0,
      0.27859901668628273,
      0,
      0,
      0.0058750006017062525,
      0.09628403142228854,
      0,
      0,
      0.05792908211818767,
      0,
      0.1575077792841284,
      0,
      0.0757879193340798,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06963258637556399,
      0,
      0.2679611628868523,
      0.22177134049233901,
      0.07812445142230175,
      0,
      0,
      0,
      0,
      0,
      0.14516964441194463,
      0,
      0,
      0,
      0.34505682958217765,
      0.2080239136652679,
      0.00026260101659070857,
      0.07079221939087753,
      0,
      0,
      0,
      0.42242428420652844,
      0.014381782697574971,
      0,
      0.08446037932587991,
      0,
      0.18033566250392277,
      0.049455233741588084,
      0
    ],
    "metadata": {
      "text": "func main() {\n    score := 85\n    if score >= 60 {\n        fmt.Println(\"Pass\")\n    } else {\n        fmt.Println(\"Fail\")\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.27581891305873374,
      0,
      0,
      0.07141773335358441,
      0,
      0,
      0.16262340239973191,
      0,
      0.28935033246556713,
      0,
      0,
      0,
      0.08454960356639485,
      0,
      0,
      0,
      0.21712291540269216,
      0,
      0,
      0.11476208627866553,
      0.13734029654775226,
      0,
      0,
      0.06530196422367925,
      0,
      0.10594159172105493,
      0,
      0.11019701251584514,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05760767204507692,
      0,
      0.2871152377659662,
      0.1652122973634452,
      0.12437238304826513,
      0,
      0,
      0,
      0,
      0,
      0.28463641719293137,
      0,
      0,
      0,
      0.38366431306388127,
      0.1957643081636849,
      0.08748999866630565,
      0.1670850142077624,
      0,
      0,
      0,
      0.4106760021070873,
      0.1041650887516614,
      0,
      0.153326395651448,
      0,
      0.23514630562432196,
      0.07557705310139747,
      0.007031963442133349
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write pseudocode for a program that outputs \"Good\" if a number is positive, \"Bad\" if negative, and \"Zero\" if zero."
    }
  },
  {
    "embedding": [
      0.2983905087587327,
      0,
      0,
      0.20378384868529642,
      0,
      0,
      0.255682910192012,
      0,
      0.30916026606224245,
      0.014566037037375891,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2767818440893381,
      0,
      0,
      0.111625056884696,
      0.14512755203177738,
      0,
      0,
      0.056350113764873,
      0,
      0.18221101914771728,
      0,
      0.08807551127329398,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0870742978950787,
      0,
      0.2599500162489047,
      0.3202886162997886,
      0.0088191376271062,
      0,
      0,
      0,
      0,
      0,
      0.18316836423198368,
      0,
      0,
      0,
      0.29733106087880784,
      0.2206717850825006,
      0.015600324219966202,
      0.021854871149387313,
      0,
      0,
      0,
      0.342354512516092,
      0.051292253991505554,
      0,
      0.12226165891905062,
      0,
      0.24042769411750872,
      0.11055566018744135,
      0
    ],
    "metadata": {
      "text": "### Day 3: Loops and Iteration Concepts\n**Objectives:**\n- Understand why loops are used.\n- Learn the concept of iterating over a set of values."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.19102884782128787,
      0,
      0.06436489489202489,
      0.19729104475665762,
      0,
      0,
      0.21519467821473212,
      0,
      0.2761150912631489,
      0.056124871227555856,
      0,
      0,
      0.030857136399304298,
      0,
      0,
      0,
      0.2812548985791145,
      0,
      0,
      0.042922016931921256,
      0.06866972871748082,
      0,
      0,
      0.21189820366565335,
      0,
      0.17936690914097586,
      0,
      0.03898298254886264,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2651469459366647,
      0.28922994389259393,
      0.06972746641690218,
      0,
      0,
      0,
      0,
      0,
      0.051514014304489736,
      0,
      0,
      0,
      0.3189071049362917,
      0.17403614459867106,
      0.11939221932892082,
      0.0341461493627324,
      0,
      0.04755042117208116,
      0,
      0.4862983686121105,
      0.12882477518107815,
      0,
      0.14906356080796845,
      0,
      0.18945798496083038,
      0.060450921015646565,
      0.059505900099129004
    ],
    "metadata": {
      "text": "func main() {\n    for i := 1; i <= 5; i++ {\n        fmt.Println(\"Iteration\", i)\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.2110827012928572,
      0.003970206209618107,
      0,
      0.1682217300782453,
      0,
      0,
      0.2565085295350688,
      0,
      0.22690368162031901,
      0,
      0,
      0,
      0.06691143284363366,
      0,
      0,
      0,
      0.29937173460065114,
      0,
      0,
      0.06497306527284577,
      0.10511348207313218,
      0,
      0,
      0.16922231496931245,
      0,
      0.21933585201366343,
      0,
      0.10900208339733891,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07154311593079385,
      0,
      0.24809325381999436,
      0.28303773015875766,
      0.13065695547941703,
      0,
      0,
      0,
      0,
      0,
      0.10621895041678807,
      0,
      0,
      0,
      0.33169669730930096,
      0.1494767505870665,
      0.11947585193178355,
      0.06350913278324585,
      0,
      0.052306157000241486,
      0,
      0.46829005958165415,
      0.08769033360004912,
      0,
      0.09959246692766574,
      0,
      0.19953161006018538,
      0.05659481719695168,
      0.058213907203453846
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a loop that prints the numbers 1 to 10."
    }
  },
  {
    "embedding": [
      0.23682387047651632,
      0,
      0,
      0.20056588531768538,
      0,
      0,
      0.1924112251412553,
      0,
      0.24925817869378986,
      0,
      0,
      0,
      0.08378537105669971,
      0,
      0,
      0,
      0.31883915618644854,
      0,
      0,
      0.14364295399339588,
      0.19717796931308498,
      0,
      0,
      0.08408479675868523,
      0,
      0.2133788631832678,
      0,
      0.12234209076511164,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.017637031075264677,
      0,
      0.271349661129657,
      0.20414915872239,
      0.10111396778016733,
      0,
      0,
      0,
      0,
      0,
      0.261438172994853,
      0,
      0,
      0,
      0.28477585925569787,
      0.2233436727623932,
      0.13617792896961414,
      0.06766242647837856,
      0,
      0,
      0,
      0.39306207239223334,
      0.04362330372421678,
      0,
      0.14708908151221456,
      0,
      0.18063109507916184,
      0.09908787057672996,
      0
    ],
    "metadata": {
      "text": "### Day 4: Basic Input/Output Concepts\n**Objectives:**\n- Learn the idea of getting input from users and displaying output."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.18930816115673602,
      0,
      0,
      0.1601989474063092,
      0,
      0,
      0.20948374992842922,
      0,
      0.19648062325039672,
      0,
      0,
      0,
      0.04014270042965263,
      0,
      0,
      0,
      0.32953242190815096,
      0,
      0,
      0.066297659591823,
      0.14724806323415424,
      0,
      0,
      0.11163439606437221,
      0,
      0.10134448686134365,
      0,
      0.1486747211263871,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3583818387918855,
      0.31257392751511504,
      0.09378717275413569,
      0,
      0,
      0,
      0,
      0,
      0.2100997865376853,
      0,
      0,
      0,
      0.3579836475028771,
      0.23045856070208576,
      0.09145941614859036,
      0.12833587255261564,
      0,
      0.009191531923469899,
      0,
      0.3366041031928122,
      0.042419557311295764,
      0,
      0.04541484979250994,
      0,
      0.24981199957466976,
      0.10030958282577017,
      0
    ],
    "metadata": {
      "text": "func main() {\n    var name string\n    fmt.Print(\"Enter your name: \")\n    fmt.Scan(&name)\n    fmt.Println(\"Hello,\", name)\n}\n```"
    }
  },
  {
    "embedding": [
      0.17772570190769704,
      0,
      0,
      0.08283588206676097,
      0,
      0,
      0.18737336303247348,
      0,
      0.3048255644393141,
      0,
      0,
      0,
      0.0881997455820902,
      0,
      0,
      0,
      0.31986192613374287,
      0,
      0,
      0.12347521781442486,
      0.17429781249367515,
      0,
      0,
      0.111279030747782,
      0,
      0.19856033825047656,
      0,
      0.02385447608994913,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.11115738796694408,
      0,
      0.2554060064492847,
      0.20310000435167985,
      0.11361526813124648,
      0,
      0,
      0,
      0,
      0,
      0.18707731228253743,
      0,
      0,
      0,
      0.35135913064941254,
      0.2361503340659464,
      0.13234495995842835,
      0.12648759801547466,
      0,
      0,
      0,
      0.39408246392069207,
      0.11388132606396925,
      0,
      0.10341964656230343,
      0,
      0.2036173897629259,
      0.12063814925839995,
      0.10474527234275623
    ],
    "metadata": {
      "text": "**Exercises:**\n- Modify the example to also ask for the user’s age and print both values."
    }
  },
  {
    "embedding": [
      0.1620314268797302,
      0.006073440209050531,
      0,
      0.18935710246369364,
      0,
      0,
      0.2471742993793904,
      0,
      0.21864239590920306,
      0,
      0,
      0,
      0.0016634292287946517,
      0,
      0,
      0,
      0.2839544430312601,
      0,
      0,
      0.036233986458659925,
      0.18560565168347024,
      0,
      0,
      0.1464114084378916,
      0,
      0.16807762348216096,
      0,
      0.12507795746816225,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03379436426253997,
      0,
      0.34119444110830077,
      0.1702183471373576,
      0.21090897599997702,
      0,
      0,
      0,
      0,
      0,
      0.2738364707302308,
      0,
      0,
      0,
      0.3503874339726599,
      0.27279389183857344,
      0.040099079982980936,
      0.04432676278400679,
      0,
      0.008284906859243836,
      0,
      0.3520855424240891,
      0,
      0,
      0.08055724595940877,
      0,
      0.22047425279595026,
      0.02909270223130986,
      0.02213075706848912
    ],
    "metadata": {
      "text": "### Day 5: Mini Project & Review\n**Objectives:**\n- Combine concepts from the week in a small project."
    }
  },
  {
    "embedding": [
      0.14324286485769128,
      0.05064758304855985,
      0,
      0.10613441803264023,
      0,
      0,
      0.21291617383224862,
      0,
      0.21015330464839338,
      0,
      0,
      0,
      0.03766436486366623,
      0,
      0,
      0.006946454279635655,
      0.38291971241042727,
      0,
      0,
      0.0976229764205152,
      0.11427104741719515,
      0,
      0,
      0.1676531675732553,
      0,
      0.20819242492221937,
      0,
      0.03894235345579752,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.17083706054712203,
      0.1754327674498075,
      0.1529568933218605,
      0,
      0,
      0,
      0,
      0,
      0.19885702549277953,
      0,
      0,
      0,
      0.3836762580115685,
      0.23988894364800717,
      0.08766538815865461,
      0.16930496651964363,
      0,
      0,
      0,
      0.40334285121734115,
      0.14459599367318945,
      0,
      0.06961009865264799,
      0,
      0.25627562945489696,
      0.07171047451846284,
      0.09612156625232766
    ],
    "metadata": {
      "text": "**Project Example:**\n- Create a simple calculator that adds two numbers entered by the user."
    }
  },
  {
    "embedding": [
      0.1297271594432213,
      0.1394349757973346,
      0,
      0.07046405371156318,
      0,
      0,
      0.1832785838194947,
      0,
      0.24629897758449482,
      0,
      0,
      0,
      0.141047745555664,
      0,
      0,
      0,
      0.37145032576374165,
      0,
      0,
      0.10224963167533373,
      0.15529662564106417,
      0,
      0,
      0.10336374189765167,
      0,
      0.19135430694586336,
      0,
      0.11293179408231138,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.18534511947823978,
      0.20408386465276335,
      0.13675958380502531,
      0,
      0,
      0,
      0,
      0,
      0.1764954060274218,
      0,
      0,
      0,
      0.37924923730088084,
      0.257170577622195,
      0.12874162326435584,
      0.1250509098746127,
      0,
      0,
      0,
      0.4162057547054813,
      0.12223887026058067,
      0,
      0.00272583518695078,
      0,
      0.22906406032206397,
      0.053934048473947,
      0.02052990339121681
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write the complete program and test it."
    }
  },
  {
    "embedding": [
      0.18898489520707604,
      0,
      0,
      0.1813593939129107,
      0,
      0,
      0.20749445686355172,
      0,
      0.1796178857923153,
      0.03667657283883116,
      0,
      0,
      0.0485607888515112,
      0,
      0,
      0,
      0.23442383443775058,
      0,
      0,
      0.13078350741266362,
      0.15504919101028952,
      0,
      0,
      0.16785557104918983,
      0,
      0.2244636688505392,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02477134654046814,
      0,
      0.3414184046624902,
      0.18597792286992448,
      0.022273151570191566,
      0,
      0,
      0,
      0,
      0,
      0.22174061464088882,
      0,
      0,
      0,
      0.29453440601419506,
      0.24638040468344768,
      0.18391392551503918,
      0.06263790342238773,
      0,
      0,
      0,
      0.4454419867364636,
      0.15152951367680667,
      0,
      0.1371362267475499,
      0,
      0.22280260694551465,
      0.003413691380155712,
      0.035238292172542415
    ],
    "metadata": {
      "text": "## ||| Week 3: Functions and Modularity"
    }
  },
  {
    "embedding": [
      0.21734357897367954,
      0.010898247853952076,
      0,
      0.07599270837609202,
      0,
      0,
      0.23621513335720895,
      0,
      0.3119179312625926,
      0,
      0,
      0,
      0.07408998566898134,
      0,
      0,
      0.0012579240929300496,
      0.4182789716371176,
      0,
      0,
      0.06727898731674004,
      0.07313339899305944,
      0,
      0,
      0.030059296833005716,
      0,
      0.09481905489820248,
      0,
      0.1697471078636166,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026559772203767117,
      0,
      0.18577228837584667,
      0.26271212915391545,
      0.13009334939091244,
      0,
      0,
      0,
      0,
      0,
      0.14507344442779443,
      0,
      0,
      0,
      0.33035585122019717,
      0.2564884190753744,
      0.01132219455176495,
      0.17221819223309925,
      0,
      0.03157965297567045,
      0,
      0.3693416755524967,
      0.07344871578923264,
      0,
      0.01755249038620282,
      0,
      0.25278133462097074,
      0.10402355969996295,
      0
    ],
    "metadata": {
      "text": "### Day 1: What Are Functions and Why Use Them?\n**Objectives:**\n- Understand the purpose of functions.\n- Learn about code reusability."
    }
  },
  {
    "embedding": [
      0.2960099160724202,
      0,
      0,
      0.15675453421426275,
      0,
      0,
      0.18855676123202955,
      0,
      0.24095989337312745,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.29282939381161116,
      0,
      0,
      0.03382940587843042,
      0.19012551451411097,
      0,
      0,
      0.12288430076969073,
      0,
      0.11205203442785219,
      0,
      0.20480688942560124,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.024987505935257157,
      0,
      0.3150655224412392,
      0.17741698751768695,
      0.1707619421832782,
      0,
      0,
      0,
      0,
      0,
      0.2732830123955037,
      0,
      0,
      0,
      0.3721784787634045,
      0.2628053382675498,
      0,
      0.12114324235002022,
      0,
      0,
      0,
      0.31084418929919044,
      0.04589500531529262,
      0,
      0.13046644322673742,
      0,
      0.16830258487258018,
      0,
      0
    ],
    "metadata": {
      "text": "**Topics:**\n- Definition and benefits of functions.\n- Real-world examples."
    }
  },
  {
    "embedding": [
      0.1900944139543748,
      0,
      0,
      0.1193978629818412,
      0,
      0,
      0.18650498931589138,
      0,
      0.23329241371743364,
      0,
      0,
      0,
      0.11104256030216231,
      0,
      0,
      0.008750002187289893,
      0.3030137004798466,
      0,
      0,
      0.10056672976521694,
      0.18415577465375604,
      0,
      0,
      0.11144960430045242,
      0,
      0.17179477021517817,
      0,
      0.09755966553545364,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.28647837881685273,
      0.20545320598769565,
      0.11529737792667451,
      0,
      0,
      0,
      0,
      0,
      0.21606892135800443,
      0,
      0,
      0,
      0.34391154098738647,
      0.23973109267070294,
      0.1163973159088927,
      0.08454077364082854,
      0,
      0.052637978636283146,
      0,
      0.4353613811173585,
      0.06127009931022786,
      0,
      0.12093640821016731,
      0,
      0.2593770641876393,
      0.04502185003248435,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write down a scenario where breaking code into functions is helpful."
    }
  },
  {
    "embedding": [
      0.189777106710886,
      0,
      0,
      0.23477910100245572,
      0,
      0,
      0.26870593991324804,
      0,
      0.24170183150353902,
      0.008924737698029511,
      0,
      0,
      0.022049119284783394,
      0,
      0,
      0,
      0.2643234198432649,
      0,
      0,
      0.1750100063715056,
      0.0422426464372891,
      0,
      0,
      0.052442621579749736,
      0,
      0.21160614448232523,
      0,
      0.10239663712339085,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013747051866258539,
      0,
      0.3720978976889002,
      0.26433375230088857,
      0.18339119706642698,
      0,
      0,
      0,
      0,
      0,
      0.1277301950520055,
      0,
      0,
      0,
      0.258806354874815,
      0.18370863632028878,
      0,
      0.1670803329681257,
      0,
      0.09333179573903003,
      0,
      0.3673935489357735,
      0,
      0,
      0.05249094936602734,
      0,
      0.27778130558297026,
      0.08018468942605358,
      0.015348359098942726
    ],
    "metadata": {
      "text": "### Day 2: Defining and Calling Functions\n**Objectives:**\n- Learn the syntax for defining functions in Go.\n- Understand how to call a function."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.21023090561881266,
      0,
      0,
      0.18759803435834627,
      0,
      0,
      0.2362999997913624,
      0,
      0.23800252445420766,
      0,
      0,
      0,
      0.16314505853830816,
      0,
      0,
      0,
      0.1822177119936218,
      0,
      0,
      0.05899218414233777,
      0.14083016846653504,
      0.008426029217256052,
      0,
      0.14052591592125133,
      0,
      0.2127341328454155,
      0,
      0.061351278555160454,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.059600777005982694,
      0,
      0.2679078829020477,
      0.22599031026574215,
      0.14450473651611853,
      0,
      0,
      0,
      0,
      0,
      0.29078466978489925,
      0,
      0,
      0,
      0.3554587375346428,
      0.19125481167882608,
      0.16133806279769242,
      0.14207048793122004,
      0,
      0.026133917947058733,
      0,
      0.3738840795121064,
      0.11095610210344262,
      0,
      0.12813853674653544,
      0,
      0.19945297771220089,
      0.07045267762861232,
      0.035052147447407526
    ],
    "metadata": {
      "text": "func greet() {\n    fmt.Println(\"Hello!\")\n}"
    }
  },
  {
    "embedding": [
      0.1559511829421669,
      0,
      0,
      0.22363370366206484,
      0,
      0,
      0.15079641444298375,
      0,
      0.20810456697987487,
      0.09606648282864423,
      0,
      0,
      0.13381993677514914,
      0,
      0.024583225725908042,
      0,
      0.2996786457695679,
      0,
      0,
      0.025253826440181048,
      0.15912423514780083,
      0,
      0,
      0.022380951191626385,
      0,
      0.1816072343236249,
      0,
      0.02859230871537317,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2591143642904997,
      0.20452987881833776,
      0.07363996078905392,
      0,
      0,
      0,
      0,
      0,
      0.15293588503037353,
      0,
      0,
      0,
      0.3688955616584656,
      0.2870438516489135,
      0.09297347032333593,
      0.041349570306744375,
      0,
      0,
      0,
      0.4997619234445178,
      0.08116049789604461,
      0,
      0.15516330671412978,
      0,
      0.1615329887320081,
      0.09300005434339777,
      0.005529262125065132
    ],
    "metadata": {
      "text": "func main() {\n    greet()\n}\n```"
    }
  },
  {
    "embedding": [
      0.2634794303529719,
      0,
      0,
      0.09015887401106719,
      0,
      0,
      0.22768972299024218,
      0,
      0.31645519183648213,
      0.03667152638603012,
      0,
      0,
      0.13487623096100246,
      0,
      0,
      0,
      0.26034488761028196,
      0,
      0,
      0.029042875215624347,
      0.08096473143543781,
      0,
      0,
      0.03570853623242783,
      0,
      0.23208610412483605,
      0,
      0.10817773255286527,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03774888356560278,
      0,
      0.2546940589014603,
      0.28050977556227996,
      0.18142319343956495,
      0,
      0,
      0,
      0,
      0,
      0.20651650948817268,
      0,
      0,
      0,
      0.32320445706476847,
      0.12755296039109432,
      0,
      0.1791354181949288,
      0,
      0.06057752026285247,
      0,
      0.44136467141535657,
      0.09563938211634981,
      0,
      0.08012122562351866,
      0,
      0.13631856606143938,
      0.0540582360390162,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Define a function that prints \"Welcome to programming!\" and call it from `main`."
    }
  },
  {
    "embedding": [
      0.14140793289647263,
      0,
      0,
      0.17186648246089317,
      0,
      0,
      0.16583495433296325,
      0,
      0.25058001467626023,
      0,
      0,
      0,
      0.1268407140900433,
      0,
      0,
      0,
      0.28975135075709946,
      0,
      0,
      0.0944581355900977,
      0.1529205900117435,
      0,
      0,
      0.1166104096588524,
      0,
      0.181871633239582,
      0,
      0.06076108644947422,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.024060866951834212,
      0,
      0.30028022449984165,
      0.27609091570221245,
      0.12021131296337162,
      0,
      0,
      0,
      0,
      0,
      0.23787291187018114,
      0,
      0,
      0,
      0.393642399666033,
      0.2062284508540959,
      0.0879196534234061,
      0.11625533567831674,
      0,
      0,
      0,
      0.3591584086662356,
      0.07562394763521206,
      0,
      0.18669459348466935,
      0,
      0.21622221183050191,
      0.06631388066183792,
      0
    ],
    "metadata": {
      "text": "### Day 3: Function Parameters and Return Values\n**Objectives:**\n- Understand how to pass values to functions and return results."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.22310413812926552,
      0,
      0,
      0.21275741964720193,
      0,
      0,
      0.1807537868838684,
      0,
      0.26327567051572287,
      0.010080912637133151,
      0,
      0,
      0.08630103186570055,
      0,
      0,
      0,
      0.25752632711793805,
      0,
      0,
      0.09920300505847351,
      0.16405172406755167,
      0,
      0,
      0.1053809467735553,
      0,
      0.1682931142878243,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011187479299273249,
      0,
      0.2974766278627538,
      0.24701028826211763,
      0.12313278708716494,
      0,
      0,
      0,
      0,
      0,
      0.22389531287660117,
      0,
      0,
      0,
      0.31701105154687925,
      0.1452635375418289,
      0.12843737380002665,
      0.10514201648619446,
      0,
      0,
      0,
      0.4568679537545098,
      0.07029186461776779,
      0,
      0.14949626923631848,
      0,
      0.19869107687503013,
      0.06906973337898466,
      0.0926473183148406
    ],
    "metadata": {
      "text": "func add(a int, b int) int {\n    return a + b\n}"
    }
  },
  {
    "embedding": [
      0.23442000946139965,
      0,
      0,
      0.15909109873190908,
      0,
      0,
      0.19135609358601124,
      0,
      0.28443605173141145,
      0,
      0,
      0,
      0.062131402221711485,
      0,
      0,
      0,
      0.28453314418257825,
      0,
      0,
      0.0567121993804746,
      0.18173108369860458,
      0,
      0,
      0.0784857949659576,
      0,
      0.13752606244502594,
      0,
      0.08034568341409631,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021880607644970206,
      0,
      0.2767998767714934,
      0.2204628585878751,
      0.17026841793762273,
      0,
      0,
      0,
      0,
      0,
      0.22840590406327366,
      0,
      0,
      0,
      0.39504567680247543,
      0.24806137591037392,
      0.07374903245189413,
      0.07952080352104979,
      0,
      0,
      0,
      0.36956641701311294,
      0.023212037008012918,
      0,
      0.13918745085844147,
      0,
      0.2283363886035447,
      0.06911813130672262,
      0
    ],
    "metadata": {
      "text": "func main() {\n    result := add(3, 4)\n    fmt.Println(\"Result:\", result)\n}\n```"
    }
  },
  {
    "embedding": [
      0.1746304682779353,
      0,
      0,
      0.1243723628545251,
      0,
      0,
      0.13353076056038918,
      0,
      0.22617981471744789,
      0,
      0,
      0,
      0.13492125517544867,
      0,
      0,
      0.009805633426214235,
      0.2817075938286728,
      0,
      0,
      0.1465685045997613,
      0.19304866694293554,
      0,
      0,
      0.11099809905092863,
      0,
      0.15399305282949283,
      0,
      0.09550761326828709,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.34039641859789177,
      0.17145343560351956,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1857494933438613,
      0,
      0,
      0,
      0.32186840788023796,
      0.24269890146927273,
      0.12180816752681395,
      0.11351216140873135,
      0,
      0,
      0,
      0.4879083616386692,
      0.02183360544150876,
      0,
      0.08908926682458475,
      0,
      0.23705639406404574,
      0.08167413696676022,
      0.06445854358752535
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a function that multiplies two numbers and returns the product."
    }
  },
  {
    "embedding": [
      0.3370697573186072,
      0,
      0,
      0.06783485916373462,
      0,
      0,
      0.2089390923174026,
      0,
      0.25852695011386084,
      0,
      0,
      0,
      0.10416330318572993,
      0,
      0,
      0,
      0.31651959806509045,
      0,
      0,
      0.044661132705167444,
      0.1946224056136824,
      0,
      0,
      0.10633932017521178,
      0,
      0.12744703302949664,
      0,
      0.16499834069748923,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.044852180886682816,
      0,
      0.26266936932512314,
      0.2012722502036747,
      0.02463708834865019,
      0,
      0,
      0,
      0,
      0,
      0.20893654224275865,
      0,
      0,
      0,
      0.2791437176341259,
      0.29347864006580565,
      0.058590023621879726,
      0.1407204145234198,
      0,
      0,
      0,
      0.39668426455008404,
      0.05331341991234654,
      0,
      0.058656165134843896,
      0,
      0.2425666243255169,
      0.007974558993826281,
      0
    ],
    "metadata": {
      "text": "### Day 4: Introduction to Debugging and Error Checking\n**Objectives:**\n- Learn simple debugging techniques.\n- Understand the importance of error checking."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.16814698681646081,
      0,
      0,
      0.23707491341079975,
      0,
      0,
      0.20194303309829154,
      0,
      0.2295411764211472,
      0.03344530409697995,
      0,
      0,
      0.0953663987488341,
      0,
      0,
      0,
      0.2805144058042545,
      0,
      0,
      0.06798317357423568,
      0.1626535884284322,
      0,
      0,
      0.09335766310272818,
      0,
      0.16983626669472268,
      0,
      0.00676355507492752,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.27565442756643205,
      0.24302217124291717,
      0.08563743577657122,
      0,
      0,
      0,
      0,
      0,
      0.18711209707438536,
      0,
      0,
      0,
      0.37331889123693074,
      0.1599076122094453,
      0.08686865334701005,
      0.06217393525682023,
      0,
      0,
      0,
      0.44312662232502464,
      0.14489379642947434,
      0,
      0.15524512082222008,
      0,
      0.2552584045462026,
      0.06414237843543899,
      0
    ],
    "metadata": {
      "text": "func safeDivide(a, b float64) float64 {\n    if b == 0 {\n        log.Println(\"Division by zero!\")\n        return 0\n    }\n    return a / b\n}"
    }
  },
  {
    "embedding": [
      0.2675469349225271,
      0,
      0,
      0.057223946001877385,
      0,
      0,
      0.18694868830983627,
      0,
      0.3636760107109758,
      0,
      0,
      0,
      0.0627135681777358,
      0,
      0,
      0,
      0.3327547869512735,
      0,
      0,
      0.018909734780241702,
      0.13195080056219885,
      0,
      0,
      0.10612584454739711,
      0,
      0.11200143684613638,
      0,
      0.14757142170295703,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.28679173177347916,
      0.2632079089433008,
      0.10424126843597674,
      0,
      0,
      0,
      0,
      0,
      0.20213297650944168,
      0,
      0,
      0,
      0.34565000087249925,
      0.1885420053128584,
      0.14151471652338837,
      0.1305128749948593,
      0,
      0.015242798094351584,
      0,
      0.375413369481438,
      0.06874119419178501,
      0,
      0,
      0,
      0.19010405813824413,
      0.05055657104812025,
      0
    ],
    "metadata": {
      "text": "func main() {\n    fmt.Println(\"Division result:\", safeDivide(10, 0))\n}\n```"
    }
  },
  {
    "embedding": [
      0.2740140985463506,
      0,
      0,
      0.14963330579742645,
      0,
      0,
      0.2082902051509681,
      0,
      0.31539615472177396,
      0,
      0,
      0,
      0.019294773452295362,
      0,
      0,
      0,
      0.2526057041962294,
      0,
      0,
      0.14473220424458969,
      0.1305858390839638,
      0,
      0,
      0.08480916300771162,
      0,
      0.13370133676033763,
      0,
      0.1135987615905095,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.13662705739438535,
      0,
      0.322516414978887,
      0.2330103295425849,
      0.08491674963653063,
      0,
      0,
      0,
      0,
      0,
      0.26962573930583167,
      0,
      0,
      0,
      0.3189698558020463,
      0.2330564537374956,
      0,
      0.06790195743272386,
      0,
      0,
      0,
      0.3920317901226244,
      0,
      0,
      0.04238582993683817,
      0,
      0.19885090735059505,
      0.044914138617836184,
      0.07008980896326748
    ],
    "metadata": {
      "text": "**Exercises:**\n- Add error checking to one of your previous functions."
    }
  },
  {
    "embedding": [
      0.15687584097511012,
      0,
      0.01024157038198805,
      0.23281378886973392,
      0,
      0,
      0.15241586085352488,
      0,
      0.2534506917004438,
      0.04716175897122119,
      0,
      0,
      0.07620758382841787,
      0,
      0,
      0,
      0.28609474280542885,
      0,
      0,
      0.09256779805406648,
      0.1533495549443222,
      0,
      0,
      0.155844117262989,
      0,
      0.1559828744375203,
      0,
      0.015028597981367508,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.025254338977107996,
      0,
      0.25896622062571534,
      0.24478606276331494,
      0.07783526802663249,
      0,
      0,
      0,
      0,
      0,
      0.15094809332071762,
      0,
      0,
      0,
      0.39709439387628537,
      0.21245786260995486,
      0.11125962097758889,
      0.14201810745858934,
      0,
      0,
      0,
      0.36492740235186866,
      0.15890027627512612,
      0,
      0.2069680659835552,
      0,
      0.24589215208188858,
      0.07718376271275547,
      0.05737142271732463
    ],
    "metadata": {
      "text": "### Day 5: Review and a Simple Functions Project\n**Objectives:**\n- Reinforce function concepts by building a small project."
    }
  },
  {
    "embedding": [
      0.08694955245206434,
      0.030934861061988558,
      0,
      0.1394753751795335,
      0,
      0,
      0.28977212343502984,
      0,
      0.16023598382634238,
      0,
      0,
      0,
      0.1050727237436246,
      0,
      0,
      0,
      0.29652404453312553,
      0,
      0,
      0.07336152005184661,
      0.06646808754079968,
      0,
      0,
      0.01453088564344468,
      0,
      0.23056028911226414,
      0,
      0.003405704218833904,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3138471969441046,
      0.2463815992438976,
      0.18579095871293463,
      0,
      0,
      0,
      0,
      0,
      0.144912438490515,
      0,
      0,
      0,
      0.36026016658505217,
      0.10367507821416358,
      0.044601284541035666,
      0.17855093310332126,
      0,
      0.15679122757284328,
      0,
      0.43909371642021455,
      0.07809676497170205,
      0,
      0.06485587202705498,
      0,
      0.25873360741081675,
      0.12522265071327304,
      0.028196551558269348
    ],
    "metadata": {
      "text": "**Project Example:**\n- Create a program that calculates the area and perimeter of a rectangle using functions."
    }
  },
  {
    "embedding": [
      0.16556299939409677,
      0,
      0,
      0.11944984486185074,
      0,
      0,
      0.11929193999637124,
      0,
      0.25545811270354485,
      0.01784987340165438,
      0,
      0,
      0.0707230262083906,
      0,
      0.043935678534318824,
      0,
      0.29167184257226825,
      0,
      0,
      0.06255827306352209,
      0.2060817644836905,
      0,
      0,
      0.0972167600920523,
      0,
      0.16419429913010475,
      0,
      0.10896910309210392,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021590424210631717,
      0,
      0.3382177167303369,
      0.19734137422053488,
      0.10557238902961898,
      0,
      0,
      0,
      0,
      0,
      0.20908567645083984,
      0,
      0,
      0,
      0.3741625794953785,
      0.2265225346809413,
      0.10956913931459332,
      0.10391411018933336,
      0,
      0,
      0,
      0.44245135865798046,
      0.11794847996017234,
      0,
      0.12655856806154928,
      0,
      0.1880165548522878,
      0.07943513415105789,
      0.041357252663434506
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write and test the program."
    }
  },
  {
    "embedding": [
      0.14553219883286922,
      0,
      0,
      0.14159207434765217,
      0,
      0,
      0.22990339054854098,
      0,
      0.26297960800007203,
      0,
      0,
      0,
      0.0790074117300173,
      0,
      0,
      0,
      0.2576419456373704,
      0,
      0,
      0.10172945572454099,
      0.1758477750372835,
      0,
      0,
      0.2032028285820053,
      0,
      0.22087821468131258,
      0,
      0.06775879149698913,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06776230087578841,
      0,
      0.25365908285317423,
      0.1552513130600884,
      0.13945740583739422,
      0,
      0,
      0,
      0,
      0,
      0.21294528510889585,
      0,
      0,
      0,
      0.33833139725560984,
      0.21322485414091646,
      0.19898654990252823,
      0.16757040875300783,
      0,
      0.007989073335576443,
      0,
      0.3796977496313957,
      0,
      0,
      0.06013558799635515,
      0,
      0.2702621023300803,
      0.042123167324880834,
      0.14173535630557416
    ],
    "metadata": {
      "text": "## ||| Week 4: Data Structures and Problem Solving"
    }
  },
  {
    "embedding": [
      0.31367629564377203,
      0,
      0,
      0.12446638054207004,
      0,
      0,
      0.2613560009634164,
      0,
      0.2560984746238616,
      0,
      0,
      0,
      0.10825238917569832,
      0,
      0,
      0,
      0.32247528190826924,
      0,
      0,
      0.08002697992492837,
      0.19402441418968466,
      0,
      0,
      0.10013009790082968,
      0,
      0.1538932340365409,
      0,
      0.17948177116105263,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06595506478416706,
      0,
      0.24796763117703785,
      0.23102967382784056,
      0.08326165464307868,
      0,
      0,
      0,
      0,
      0,
      0.2646915708509624,
      0,
      0,
      0,
      0.2980804517696884,
      0.15411989670862825,
      0.1234738866135426,
      0.1329402901094826,
      0,
      0,
      0,
      0.3840579160975481,
      0.014378859577650402,
      0,
      0.10594245714280623,
      0,
      0.14799265002849193,
      0.06306207213552038,
      0
    ],
    "metadata": {
      "text": "### Day 1: Arrays and Lists – Concepts and Uses\n**Objectives:**\n- Learn what arrays (and lists) are.\n- Understand how data can be stored in sequences."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.22737899119632893,
      0,
      0,
      0.24592739488163834,
      0,
      0,
      0.26664244513426305,
      0,
      0.2204094666225573,
      0.0009842951411831097,
      0,
      0,
      0.05936021907822968,
      0,
      0,
      0,
      0.3285907152382357,
      0,
      0,
      0.03543761681420109,
      0.12604680824453715,
      0,
      0,
      0.03642487077697242,
      0,
      0.2273528407247883,
      0,
      0.11823687169508824,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03530717721085687,
      0,
      0.2776180522211113,
      0.25081298176752925,
      0.13534822614833672,
      0,
      0,
      0,
      0,
      0,
      0.21325780374965633,
      0,
      0,
      0,
      0.33016369451359145,
      0.20981498833007686,
      0.03344023026788238,
      0.11415191809335283,
      0,
      0,
      0,
      0.38375836317252127,
      0.04233913903105413,
      0,
      0.025582297783307843,
      0,
      0.20235448804771777,
      0.09816369254364789,
      0
    ],
    "metadata": {
      "text": "func main() {\n    numbers := [5]int{1, 2, 3, 4, 5}\n    fmt.Println(\"Array:\", numbers)\n}\n```"
    }
  },
  {
    "embedding": [
      0.2092720536691412,
      0,
      0,
      0.16473927286246431,
      0,
      0,
      0.24475252697036512,
      0,
      0.28584470800038275,
      0.02068874492265611,
      0,
      0,
      0,
      0,
      0,
      0,
      0.37326105644465096,
      0,
      0,
      0.0996062537454529,
      0.12679683590446778,
      0,
      0,
      0.10915095290796234,
      0,
      0.13518012599524973,
      0,
      0.14137132713386147,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03582781073913594,
      0,
      0.2766780962699196,
      0.2378041295397205,
      0.057452207912122515,
      0,
      0,
      0,
      0,
      0,
      0.1693604506891258,
      0,
      0,
      0,
      0.3442508130787201,
      0.2122609254875211,
      0,
      0.08755846719305412,
      0,
      0,
      0,
      0.4011062718530402,
      0.12982611076092998,
      0,
      0.016585641196776517,
      0,
      0.2187741327358635,
      0.060619013710701095,
      0.06617695067263876
    ],
    "metadata": {
      "text": "**Exercises:**\n- Declare an array of 5 integers and print each element."
    }
  },
  {
    "embedding": [
      0.23493608126573054,
      0.043921598602231174,
      0.0015287521134542989,
      0.13193895768182923,
      0,
      0,
      0.1458326427306759,
      0,
      0.20579664124202326,
      0,
      0,
      0,
      0.038341189001062564,
      0,
      0,
      0,
      0.283908747174207,
      0,
      0,
      0.09666204689189872,
      0.145847651441272,
      0,
      0,
      0.12726839921018324,
      0,
      0.18944269930234164,
      0,
      0.056596452203385834,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.34457343028184506,
      0.2354280050207824,
      0.10727549743712311,
      0,
      0,
      0,
      0,
      0,
      0.23703296872430904,
      0,
      0,
      0,
      0.3631464537173005,
      0.2336722583661999,
      0.09075312711608605,
      0.1256545873635656,
      0,
      0.0001754157892217246,
      0,
      0.37676060388972893,
      0.14129920168882054,
      0,
      0.17089892087473388,
      0,
      0.21795950583900128,
      0.051582465721396506,
      0.015077072218172047
    ],
    "metadata": {
      "text": "### Day 2: Working with Strings\n**Objectives:**\n- Understand string manipulation.\n- Learn basic operations on strings."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.2582727167818289,
      0,
      0,
      0.23287147995833218,
      0,
      0,
      0.16218716666284722,
      0,
      0.244899015242731,
      0.05357636724749947,
      0,
      0,
      0.07746648418146058,
      0,
      0,
      0,
      0.2957974490991819,
      0,
      0,
      0.018721680364625126,
      0.15625597110216277,
      0,
      0,
      0,
      0,
      0.13488202008014666,
      0,
      0.1045959984619289,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07168331753518853,
      0,
      0.27122615051177057,
      0.15878853540566387,
      0.04891087260793554,
      0,
      0,
      0,
      0,
      0,
      0.23291554791054675,
      0,
      0,
      0,
      0.34200815368976306,
      0.22043201212101168,
      0,
      0.14789221060594143,
      0,
      0,
      0,
      0.49798588044967085,
      0.07062441054599906,
      0,
      0.09752162076968363,
      0,
      0.1776714534549397,
      0.021752873742438925,
      0
    ],
    "metadata": {
      "text": "func main() {\n    text := \"Programming is fun!\"\n    fmt.Println(\"Text length:\", len(text))\n}\n```"
    }
  },
  {
    "embedding": [
      0.26972781467975326,
      0.045750346076945746,
      0,
      0.14973355617616707,
      0,
      0,
      0.12946616269141908,
      0,
      0.23072025711013897,
      0,
      0,
      0,
      0.04314970419743767,
      0,
      0,
      0,
      0.372715447776649,
      0,
      0,
      0.09846532164506942,
      0.13626782903761422,
      0,
      0,
      0.10209707607290362,
      0,
      0.14423661187172054,
      0,
      0.07048294730111061,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01473485072911897,
      0,
      0.2783917701396991,
      0.23531381449123004,
      0.02864335455216163,
      0,
      0,
      0,
      0,
      0,
      0.18474313608130263,
      0,
      0,
      0,
      0.31076934984606336,
      0.25495111861255004,
      0.06988139789302505,
      0.12468006998627881,
      0,
      0,
      0,
      0.40517961430506655,
      0.19085730441250312,
      0,
      0.08440681482574032,
      0,
      0.25696905005179477,
      0.06081504830396632,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a program to iterate over each character in a string and print it."
    }
  },
  {
    "embedding": [
      0.17728979748032644,
      0.004231379485197436,
      0,
      0.13756586260882092,
      0,
      0,
      0.2357467266276715,
      0,
      0.24161227106061783,
      0,
      0,
      0,
      0.14898739255965912,
      0,
      0,
      0,
      0.3684928091880969,
      0,
      0,
      0.13228950892082642,
      0.19697845068804126,
      0,
      0,
      0.13223796395642995,
      0,
      0.1926140065372581,
      0,
      0.09355819389022291,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01341774153165928,
      0,
      0.22965926860548036,
      0.15805407174023678,
      0.10828846083320626,
      0,
      0,
      0,
      0,
      0,
      0.19938853779499352,
      0,
      0,
      0,
      0.38133662159750503,
      0.21903253961553046,
      0.11416291629946618,
      0.13830704963046875,
      0,
      0,
      0,
      0.3822543090443164,
      0.06433455439473715,
      0,
      0.0219838822590114,
      0,
      0.21915903561897787,
      0.06573001362733502,
      0.0037935409914355853
    ],
    "metadata": {
      "text": "### Day 3: Introduction to Key-Value Stores (Maps/Dictionaries)\n**Objectives:**\n- Learn the concept of maps/dictionaries.\n- Understand how data is stored using key-value pairs."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.13555026412666207,
      0.06832226306500293,
      0,
      0.18471060095949185,
      0,
      0,
      0.2111394900634703,
      0,
      0.22449838639389594,
      0.02356920944576412,
      0,
      0,
      0.030050000545892918,
      0,
      0,
      0,
      0.32234853325748253,
      0,
      0,
      0.13694475927163635,
      0.1735718949655698,
      0,
      0,
      0.139679988198851,
      0,
      0.1810715517545713,
      0,
      0.0516030396035655,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2952248148511153,
      0.2699255936427445,
      0.07915609206619667,
      0,
      0,
      0,
      0,
      0,
      0.08288529876839826,
      0,
      0,
      0,
      0.33940606314981736,
      0.2230028143902027,
      0.11794531481268895,
      0.1336888382059716,
      0,
      0,
      0,
      0.3899506713494345,
      0.14456603451074063,
      0,
      0.07427706823787548,
      0,
      0.2755033279389848,
      0.11786834114752662,
      0.02270802257805449
    ],
    "metadata": {
      "text": "func main() {\n    ages := map[string]int{\n        \"Alice\": 30,\n        \"Bob\":   25,\n    }\n    fmt.Println(\"Ages:\", ages)\n}\n```"
    }
  },
  {
    "embedding": [
      0.31151090487995137,
      0,
      0,
      0.12101602167141297,
      0,
      0,
      0.20851048922873505,
      0,
      0.25679505627983396,
      0,
      0,
      0,
      0.10257339995390888,
      0,
      0.01095861551062574,
      0,
      0.294468578949455,
      0,
      0,
      0.11966155982158307,
      0.19114344323293028,
      0,
      0,
      0.13155937661918368,
      0,
      0.19126844515487423,
      0,
      0.10088952515632447,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04005398894429752,
      0,
      0.2481138088040207,
      0.22053782556828525,
      0.10489511154112865,
      0,
      0,
      0,
      0,
      0,
      0.23563849938753878,
      0,
      0,
      0,
      0.3443193739268349,
      0.2146761281643903,
      0.16560184195660993,
      0.10734343156025479,
      0,
      0,
      0,
      0.3415444999103972,
      0.08051412763098431,
      0,
      0.16511693107763975,
      0,
      0.1764999840825957,
      0.056093960748630434,
      0.0013123256974007182
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a map of three items and print the keys and values."
    }
  },
  {
    "embedding": [
      0.13135823434446584,
      0,
      0,
      0.19261695997352704,
      0,
      0,
      0.19304606687666753,
      0,
      0.2595918111312333,
      0.16609756046335583,
      0,
      0,
      0.08005476163490645,
      0,
      0,
      0,
      0.25736448500049774,
      0,
      0,
      0.10686534013850943,
      0.15660505396329463,
      0,
      0,
      0.1378053748622235,
      0,
      0.2287011996818199,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09395534850073038,
      0,
      0.38348080395134493,
      0.23497615323931192,
      0.049996427031632026,
      0,
      0,
      0,
      0,
      0,
      0.1321638371142675,
      0,
      0,
      0,
      0.36061031544318684,
      0.13811111147864372,
      0.06906451462697284,
      0.14521526202070278,
      0,
      0,
      0,
      0.38705056965238804,
      0.09838265858797418,
      0,
      0.19212096211906837,
      0,
      0.15079259586321436,
      0.05779614147398184,
      0.07071929197023846
    ],
    "metadata": {
      "text": "### Day 4: Basic Algorithms – Searching and Sorting\n**Objectives:**\n- Understand the concepts behind basic algorithms.\n- Learn how to search for an element in an array."
    }
  },
  {
    "embedding": [
      0.23398231515093457,
      0.023253701764464816,
      0,
      0.21323596294950573,
      0,
      0,
      0.20031336562056795,
      0,
      0.22895455640890436,
      0,
      0,
      0,
      0.08868846460299679,
      0,
      0,
      0,
      0.20267766801010886,
      0,
      0,
      0.07976831649772587,
      0.1318789884031743,
      0,
      0,
      0.10660696161889582,
      0,
      0.19818170960375778,
      0,
      0.07026030704634759,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01451357071611305,
      0,
      0.3086538415128497,
      0.21877340243661772,
      0.11049510025850037,
      0,
      0,
      0,
      0,
      0,
      0.23443833909877193,
      0,
      0,
      0,
      0.3727442726182326,
      0.1407632272866819,
      0.03526552616898473,
      0.11832003272996414,
      0,
      0,
      0,
      0.47314492127006874,
      0.10992091048851366,
      0,
      0.05625772215361937,
      0,
      0.20525478431654143,
      0.0859843805868464,
      0.07264538717864692
    ],
    "metadata": {
      "text": "**Topics:**\n- Linear search and simple sorting ideas (conceptual)."
    }
  },
  {
    "embedding": [
      0.20274364554733723,
      0,
      0,
      0.1420130759138328,
      0,
      0,
      0.2743405151952249,
      0,
      0.23365761645056066,
      0,
      0,
      0,
      0.054575057454471186,
      0,
      0,
      0,
      0.20846695824860054,
      0,
      0,
      0.09448625691805158,
      0.1921030790564111,
      0,
      0,
      0.05744389197279613,
      0,
      0.1783329782187607,
      0,
      0.1333478635163906,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0749629237125107,
      0,
      0.2549808600062623,
      0.14646926888835354,
      0.22463985196585837,
      0,
      0,
      0,
      0,
      0,
      0.30235350613489903,
      0,
      0,
      0,
      0.3647232454666302,
      0.18428747245263272,
      0.06809820796427911,
      0.14060712609880227,
      0,
      0.06981884616867655,
      0,
      0.3806622627793172,
      0,
      0,
      0.12115288927298927,
      0,
      0.252897350829384,
      0.09504791440562353,
      0.030125285549492967
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write pseudocode for a linear search algorithm."
    }
  },
  {
    "embedding": [
      0.27375623896620216,
      0,
      0,
      0.2433675371156737,
      0,
      0,
      0.31766457526492664,
      0,
      0.2528822512258441,
      0,
      0,
      0,
      0.023313392372701726,
      0,
      0,
      0,
      0.29058932603263904,
      0,
      0,
      0.039526886855937735,
      0.13653364447276775,
      0,
      0,
      0.03141987939287931,
      0,
      0.1815247587824877,
      0,
      0.051765295869804044,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06905223495914972,
      0,
      0.30496877962877017,
      0.3150625592406735,
      0.13788741977983549,
      0,
      0,
      0,
      0,
      0,
      0.20958251739985367,
      0,
      0,
      0,
      0.31531729320465535,
      0.13342629128388128,
      0.011283773836726841,
      0.06215891068306553,
      0,
      0,
      0,
      0.37147213671298995,
      0.08939599465478096,
      0,
      0.05969511845063567,
      0,
      0.14691581794777683,
      0.08268032743501418,
      0
    ],
    "metadata": {
      "text": "### Day 5: Mini Project and Review\n**Objectives:**\n- Combine data structures and algorithm concepts in a small project."
    }
  },
  {
    "embedding": [
      0.2682065882365367,
      0.04773506711731823,
      0,
      0.19214652811540237,
      0,
      0,
      0.170731145307108,
      0,
      0.22528877063248762,
      0,
      0,
      0,
      0.08074812023389726,
      0,
      0,
      0,
      0.28140054382847246,
      0,
      0,
      0.05943839459446229,
      0.11770425603578319,
      0,
      0,
      0,
      0,
      0.1640177276213111,
      0,
      0.142273155732353,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08672684201692642,
      0,
      0.23133248409620083,
      0.22549380041555658,
      0.1374169880085711,
      0,
      0,
      0,
      0,
      0,
      0.27491662913556447,
      0,
      0,
      0,
      0.344141738824214,
      0.2353874003997843,
      0,
      0.12938642154072272,
      0,
      0.028492511766272207,
      0,
      0.41643489905169356,
      0.04360907673882033,
      0,
      0.14491548389415196,
      0,
      0.22582066586171415,
      0.1169186097824703,
      0
    ],
    "metadata": {
      "text": "**Project Example:**\n- Create a program that stores student names and scores in a map and calculates the average score."
    }
  },
  {
    "embedding": [
      0.13891384672956905,
      0.025611370011516168,
      0,
      0.1254901092750064,
      0,
      0,
      0.22011772166821533,
      0,
      0.2020586146083032,
      0,
      0,
      0,
      0.09710756521887656,
      0,
      0,
      0,
      0.21856140658123174,
      0,
      0,
      0.10908759723319573,
      0.1489542445600939,
      0,
      0,
      0.07951289292272118,
      0,
      0.1861151956059904,
      0,
      0.18752077633828942,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07376226231276534,
      0,
      0.3755590347483148,
      0.21328964775963746,
      0.21787746516914225,
      0,
      0,
      0,
      0,
      0,
      0.2759004071537749,
      0,
      0,
      0,
      0.31773604141936007,
      0.19827502677939687,
      0.10979331736622694,
      0.0766082769856863,
      0,
      0.051338412743081825,
      0,
      0.4428168451511143,
      0,
      0,
      0.033290119470528456,
      0,
      0.17419120055324352,
      0.02426933849752004,
      0.05553158272240211
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write the program and test with sample data."
    }
  },
  {
    "embedding": [
      0.11622555499412845,
      0,
      0,
      0.09920338010512089,
      0,
      0,
      0.14693623256287466,
      0,
      0.19045001621071017,
      0,
      0,
      0,
      0.07313723303366966,
      0,
      0,
      0,
      0.41726083251686963,
      0,
      0,
      0.18971252181672493,
      0.1379121138080826,
      0,
      0,
      0.14401697535390107,
      0,
      0.2046810818151876,
      0,
      0.1333567890609651,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.26547087895177846,
      0.19582886920491555,
      0.1620280794975191,
      0,
      0,
      0,
      0,
      0,
      0.190846338513314,
      0,
      0,
      0,
      0.30179889647633407,
      0.297652961950468,
      0.08717736241893548,
      0.08177047564411472,
      0,
      0.05102450447304569,
      0,
      0.4016751276797456,
      0.052459968410949194,
      0,
      0.09752801324847686,
      0,
      0.24724649999136758,
      0.023668686474740405,
      0.023168931805243202
    ],
    "metadata": {
      "text": "## ||| Week 5: Introduction to Go and Setup"
    }
  },
  {
    "embedding": [
      0.3281160400285562,
      0,
      0,
      0.16040254095941733,
      0,
      0,
      0.18698066454998438,
      0,
      0.24043203912460887,
      0.09190272981120348,
      0,
      0,
      0.056617684948472864,
      0,
      0,
      0,
      0.32093378166101594,
      0,
      0,
      0.11396418579871774,
      0.17563615177186728,
      0,
      0,
      0.1396916871375244,
      0,
      0.20754433238529946,
      0,
      0.06517296126966346,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03923809327307677,
      0,
      0.2632485263990429,
      0.18560653302514613,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1890764863747408,
      0,
      0,
      0,
      0.296122258118581,
      0.2668209076168275,
      0.07595745521824822,
      0.11273542615142843,
      0,
      0,
      0,
      0.4171874810303708,
      0.11260464080560685,
      0,
      0.04325372185240284,
      0,
      0.20215204464452816,
      0,
      0.02565760283117068
    ],
    "metadata": {
      "text": "### Day 1: Introduction to Go\n**Objectives:**\n- Understand what Go is, its origins, and why it’s used.\n- Learn about Go’s design philosophy and core strengths."
    }
  },
  {
    "embedding": [
      0.19659875490433562,
      0,
      0,
      0.1496824874849653,
      0,
      0,
      0.1731968110190985,
      0,
      0.2862015648864563,
      0,
      0,
      0,
      0.1129784889471309,
      0,
      0,
      0,
      0.35858452887074155,
      0,
      0,
      0.08882196516245303,
      0.17544182353562435,
      0,
      0,
      0.14260337662294698,
      0,
      0.18304578479353667,
      0,
      0.12826942481844494,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0014562507716442865,
      0,
      0.2651813239143135,
      0.19672995476133343,
      0.16045881233364478,
      0,
      0,
      0,
      0,
      0,
      0.2074117545745961,
      0,
      0,
      0,
      0.35904149071543345,
      0.19069525769208015,
      0.04692346452260485,
      0.13077492428710008,
      0,
      0.0458397888010405,
      0,
      0.3687281033156423,
      0,
      0,
      0.0855388672457339,
      0,
      0.2604179883954456,
      0.034012000108640535,
      0
    ],
    "metadata": {
      "text": "**Topics:**\n- History and purpose of Go.\n- Overview of Go’s simplicity and performance."
    }
  },
  {
    "embedding": [
      0.2042771919654974,
      0,
      0,
      0.056915982310367354,
      0,
      0,
      0.18208453798920649,
      0,
      0.3003189221332503,
      0,
      0,
      0,
      0.09983364605126098,
      0,
      0,
      0,
      0.32181172980447936,
      0,
      0,
      0.045105167550058146,
      0.1368172847684643,
      0,
      0,
      0.0811593410057511,
      0,
      0.12656663762059234,
      0,
      0.1165626090245615,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.28297708521218023,
      0.19296762551361057,
      0.17781528088935245,
      0,
      0,
      0,
      0,
      0,
      0.1925949074229516,
      0,
      0,
      0,
      0.3293355480800452,
      0.29574950171428926,
      0.11076221505035451,
      0.13552589537090323,
      0,
      0,
      0,
      0.43986932443690746,
      0.06320459600804702,
      0,
      0.04172309243033671,
      0,
      0.22222151913833899,
      0.004183404319412549,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Read an introductory article on Go.\n- Write down three reasons why Go might be a good language to learn."
    }
  },
  {
    "embedding": [
      0.23553789686282342,
      0,
      0,
      0.18152966813177332,
      0,
      0,
      0.2749237731484898,
      0,
      0.24407950187772864,
      0.0035316098174154264,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3002306472878628,
      0,
      0,
      0.12511012400734026,
      0.16438617278681447,
      0,
      0,
      0.1276787583258566,
      0,
      0.1730827416711383,
      0,
      0.1320544639633644,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05612550146082203,
      0,
      0.31321856595921266,
      0.26771885731163636,
      0.08567028233193999,
      0,
      0,
      0,
      0,
      0,
      0.18779429349527688,
      0,
      0,
      0,
      0.30805175236586874,
      0.18053621883395254,
      0.056745513847822796,
      0.11349335744866917,
      0,
      0,
      0,
      0.4012444794441044,
      0,
      0,
      0.010501820853436284,
      0,
      0.23702543141429383,
      0.04196204030678031,
      0.041377850248148225
    ],
    "metadata": {
      "text": "### Day 2: Installation and Setup\n**Objectives:**\n- Install Go on your computer.\n- Configure environment variables (e.g., PATH, GOPATH)."
    }
  },
  {
    "embedding": [
      0.139278523532268,
      0.07848019383512382,
      0,
      0.08708196834700964,
      0,
      0,
      0.23707175657854127,
      0,
      0.19471668047369745,
      0.004226228335703876,
      0,
      0,
      0.034936661385952306,
      0,
      0,
      0,
      0.32912568675071874,
      0,
      0,
      0.09569106449172339,
      0.15472661442649002,
      0,
      0,
      0.15675324558499146,
      0,
      0.22383382130892454,
      0,
      0.12151597486388566,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0659478044708524,
      0,
      0.2215897266672844,
      0.21459705572646146,
      0.17991205105872773,
      0,
      0,
      0,
      0,
      0,
      0.1562171133478197,
      0,
      0,
      0,
      0.34450338956914717,
      0.3002227782954157,
      0.13667381956292876,
      0.11380092928162676,
      0,
      0,
      0,
      0.3834070403397891,
      0.10873911839229373,
      0,
      0.12383164252522605,
      0,
      0.26195309486821294,
      0.0335831963585613,
      0.003796477288601608
    ],
    "metadata": {
      "text": "**Exercises:**\n- Follow an online guide to install Go.\n- Verify your installation by running `go version` in your terminal."
    }
  },
  {
    "embedding": [
      0.19552255729078766,
      0,
      0,
      0.18613995750814685,
      0,
      0,
      0.20848212753800283,
      0,
      0.24543677201813166,
      0,
      0,
      0,
      0.03189784235179365,
      0,
      0,
      0,
      0.28554609777622875,
      0,
      0,
      0.057884870909833984,
      0.2142608096923363,
      0,
      0,
      0.15129774941767085,
      0,
      0.1524955652326254,
      0,
      0.19719662706748958,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06353826746556511,
      0,
      0.32309422252633646,
      0.201250174115347,
      0.13130439085522416,
      0,
      0,
      0,
      0,
      0,
      0.24360416588451705,
      0,
      0,
      0,
      0.3749141142720114,
      0.18049665196812342,
      0,
      0.08588388866077916,
      0,
      0.018164463088152207,
      0,
      0.37969864914556806,
      0,
      0,
      0.02750264273219845,
      0,
      0.2242869220216725,
      0,
      0.07059648166419544
    ],
    "metadata": {
      "text": "### Day 3: Your First Go Program\n**Objectives:**\n- Write and run your first Go program.\n- Understand the basic structure of a Go program."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.24423373018916317,
      0,
      0,
      0.06902545797485267,
      0,
      0,
      0.2122443412058927,
      0,
      0.2411076577218239,
      0,
      0,
      0,
      0.11320653937439959,
      0,
      0,
      0.0010589044690431264,
      0.24730611829463192,
      0,
      0,
      0.036480508471698994,
      0.17051340279035251,
      0,
      0,
      0.0693418572846764,
      0,
      0.1640096807314108,
      0,
      0.06670833949397734,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.34415310986089725,
      0.27632629631745736,
      0.13123204545907607,
      0,
      0,
      0,
      0,
      0,
      0.28108621574004666,
      0,
      0,
      0,
      0.3118589633048743,
      0.2103219381145936,
      0.1335020759254429,
      0.11971423551876993,
      0,
      0.04935253784935908,
      0,
      0.3977999807254821,
      0.08052915990399317,
      0,
      0.045870507449681915,
      0,
      0.2270492546404114,
      0.07980658960226704,
      0
    ],
    "metadata": {
      "text": "func main() {\n    fmt.Println(\"Hello, World!\")\n}\n```"
    }
  },
  {
    "embedding": [
      0.15261661539061183,
      0.009021874549058012,
      0,
      0.1366827844268666,
      0,
      0,
      0.18347710307974657,
      0,
      0.3706608297816852,
      0,
      0,
      0,
      0.1148657592152017,
      0,
      0,
      0,
      0.2626161086629973,
      0,
      0,
      0.09674710774679494,
      0.1517818289005435,
      0,
      0,
      0.025350302435620694,
      0,
      0.13936304385583978,
      0,
      0.10058992903459861,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10018426550455754,
      0,
      0.28167424384195544,
      0.27044298001225675,
      0.11814014996473983,
      0,
      0,
      0,
      0,
      0,
      0.15250019180714527,
      0,
      0,
      0,
      0.38238645080871064,
      0.15876206699516585,
      0.12690922710174973,
      0.1271507867685576,
      0,
      0,
      0,
      0.4006776219396863,
      0.05036278999927205,
      0,
      0.10468213704151885,
      0,
      0.20416472035286334,
      0.1459751079751777,
      0.041130881196614046
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a file named `hello.go` with the above code.\n- Run the program and observe the output."
    }
  },
  {
    "embedding": [
      0.22508053701493966,
      0,
      0,
      0.11495079706378898,
      0,
      0,
      0.27066694575770966,
      0,
      0.28045997448367815,
      0.060789041665513424,
      0,
      0,
      0.07106016040304733,
      0,
      0,
      0,
      0.342893924816586,
      0,
      0,
      0.044647320966345196,
      0.1810027682974451,
      0,
      0,
      0.08828492031287184,
      0,
      0.15620310269821058,
      0,
      0.1344241352882679,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08635923163369777,
      0,
      0.31583439097491933,
      0.2672604082286907,
      0.03761591251649902,
      0,
      0,
      0,
      0,
      0,
      0.13468198174714713,
      0,
      0,
      0,
      0.2711744179329354,
      0.23490301807168493,
      0.08144433136764163,
      0.12388926712992587,
      0,
      0.03296578984924139,
      0,
      0.38574336620072963,
      0.03638261913327315,
      0,
      0.04211458124683842,
      0,
      0.26529325555752237,
      0.02481637846845113,
      0
    ],
    "metadata": {
      "text": "### Day 4: Basic Syntax and Code Structure\n**Objectives:**\n- Learn about comments, formatting, and file structure in Go.\n- Use the built-in formatter (`gofmt`)."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.21024146981318664,
      0,
      0.015750365692163353,
      0.18726818678336488,
      0,
      0,
      0.18623624964611354,
      0,
      0.22319568228826478,
      0.03488980156735265,
      0,
      0,
      0.06383536534815222,
      0,
      0,
      0,
      0.2764362794129081,
      0,
      0,
      0.053884870389122756,
      0.13870739953082806,
      0,
      0,
      0.15155840709399307,
      0,
      0.15276579402129448,
      0,
      0.023067762430880347,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2765621983579493,
      0.21801721265033747,
      0.011103597710436534,
      0,
      0,
      0,
      0,
      0,
      0.14646661750976567,
      0,
      0,
      0,
      0.35516288652425876,
      0.25138632642707437,
      0.2670233051935738,
      0.12257325989903006,
      0,
      0,
      0,
      0.39971813200809636,
      0.09949114116603466,
      0,
      0.15305237683775497,
      0,
      0.24450714099793935,
      0.09240939041514734,
      0.05110878157308232
    ],
    "metadata": {
      "text": "// This function prints a welcome message.\nfunc main() {\n    // Print a message using fmt.Println\n    fmt.Println(\"Welcome to Go programming!\")\n}\n```"
    }
  },
  {
    "embedding": [
      0.2606885949137324,
      0.0015738993727887282,
      0.029838215692642313,
      0.1459986171503754,
      0,
      0,
      0.17279126211171897,
      0,
      0.27071994977951624,
      0,
      0,
      0,
      0.034938424740077675,
      0,
      0,
      0,
      0.25201696077417485,
      0,
      0,
      0.012459623768807594,
      0.14940213615593134,
      0,
      0,
      0.14700410110073686,
      0,
      0.10468692857144465,
      0,
      0.10335032777946848,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2888321273181764,
      0.26183920112733144,
      0.10162438959827648,
      0,
      0,
      0,
      0,
      0,
      0.15366668227862823,
      0,
      0,
      0,
      0.36482279852896576,
      0.20870281146055203,
      0.13113604905719836,
      0.1845373325484569,
      0,
      0.005994987019647101,
      0,
      0.409007714206018,
      0.053704307447597986,
      0,
      0.17968058807519494,
      0,
      0.2304957946504285,
      0.06318669787732553,
      0.052775706353081916
    ],
    "metadata": {
      "text": "**Exercises:**\n- Add comments to your `hello.go` file.\n- Run `gofmt -w hello.go` and compare before/after formatting."
    }
  },
  {
    "embedding": [
      0.1199230594480758,
      0,
      0,
      0.20231444745614602,
      0,
      0,
      0.17153823069775545,
      0,
      0.25401125696499066,
      0,
      0,
      0,
      0.008883946854236303,
      0,
      0,
      0,
      0.28273095310652,
      0,
      0,
      0.12312047925414002,
      0.09000053427054285,
      0,
      0,
      0.14109355351975555,
      0,
      0.21125373936190475,
      0,
      0.18158205738724822,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07416705844641217,
      0,
      0.3716727639220017,
      0.18652126503565086,
      0.1805171005164457,
      0,
      0,
      0,
      0,
      0,
      0.21647064876066058,
      0,
      0,
      0,
      0.3374269065715031,
      0.2069583677910013,
      0,
      0.12539142207534273,
      0,
      0.11345164680815119,
      0,
      0.37569027545017575,
      0,
      0,
      0,
      0,
      0.22505699150633202,
      0.01092986565873231,
      0.1220016101292697
    ],
    "metadata": {
      "text": "### Day 5: Exercises and Review\n**Objectives:**\n- Review all topics covered in Week 5.\n- Complete hands-on exercises to solidify your understanding."
    }
  },
  {
    "embedding": [
      0.20692100225248725,
      0,
      0,
      0.1822488490813325,
      0,
      0,
      0.24709554387823457,
      0,
      0.2772572687463452,
      0.0030303758964808293,
      0,
      0,
      0.0681805422109586,
      0,
      0,
      0,
      0.26735402579442336,
      0,
      0,
      0.11502898362388086,
      0.12246535534909785,
      0,
      0,
      0.13616999134765026,
      0,
      0.17524498594939006,
      0,
      0.0046208481069408185,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03424078347683859,
      0,
      0.2988557645509321,
      0.316007925687426,
      0.09548099574885464,
      0,
      0,
      0,
      0,
      0,
      0.12996030241253229,
      0,
      0,
      0,
      0.30778816344457627,
      0.15323797145738122,
      0.08064723694034663,
      0.13281945492885283,
      0,
      0,
      0,
      0.43253384111305127,
      0.1539106288977985,
      0,
      0.1159044185518592,
      0,
      0.19038134578999816,
      0.1143627231785429,
      0.012442034076843956
    ],
    "metadata": {
      "text": "**Exercises:**\n- Modify the \"Hello, World!\" program to also print your name.\n- Write a short summary of what you learned this week."
    }
  },
  {
    "embedding": [
      0.15938824231191778,
      0,
      0,
      0.20863664971173282,
      0,
      0,
      0.2606476159950909,
      0,
      0.22185381576201937,
      0,
      0,
      0,
      0.0967969151072497,
      0,
      0.012265645159645396,
      0,
      0.3251966145689534,
      0,
      0,
      0.11969695435210487,
      0.20999773323764104,
      0,
      0,
      0.16868010475426065,
      0,
      0.21207866054938548,
      0,
      0.08539354657001291,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05711107939254714,
      0,
      0.22465671183634947,
      0.1487832086360395,
      0.14254877804253482,
      0,
      0,
      0,
      0,
      0,
      0.23972447615153733,
      0,
      0,
      0,
      0.32240597392742104,
      0.20555159296802364,
      0.1708724751323967,
      0.10749974373118683,
      0,
      0,
      0,
      0.37156088199220577,
      0.011014561013441402,
      0,
      0.1464095755993797,
      0,
      0.21545901154995784,
      0.09300222610660865,
      0.06476215111970406
    ],
    "metadata": {
      "text": "## ||| Week 6: Go Basics and Syntax"
    }
  },
  {
    "embedding": [
      0.17466666900887065,
      0,
      0,
      0.17343971015003348,
      0,
      0,
      0.18362970548354438,
      0,
      0.23103730683729007,
      0.028173807059792846,
      0,
      0,
      0.06114732673809395,
      0,
      0,
      0,
      0.3016722057795452,
      0,
      0,
      0.07909236144479144,
      0.14149630360555113,
      0,
      0,
      0.17744183821282056,
      0,
      0.2307780350988923,
      0,
      0.13501654145008063,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.015036349791464478,
      0,
      0.3231759778208741,
      0.21974037497381022,
      0.1270697776161183,
      0,
      0,
      0,
      0,
      0,
      0.19377505482866958,
      0,
      0,
      0,
      0.2951414876206717,
      0.2707495672802322,
      0.07063186822163846,
      0.09672610582522569,
      0,
      0.06125729276537241,
      0,
      0.4207027231064779,
      0.050248386955970246,
      0,
      0.11093424448732196,
      0,
      0.22481003116794748,
      0,
      0
    ],
    "metadata": {
      "text": "### Day 1: Variables and Constants\n**Objectives:**\n- Learn how to declare variables and constants.\n- Understand type inference with the `:=` operator."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.22996138683973893,
      0,
      0,
      0.11717466006078366,
      0,
      0,
      0.20651112982589429,
      0,
      0.32530020157974116,
      0.0032992388753851514,
      0,
      0,
      0.07725468207151821,
      0,
      0,
      0,
      0.36689282774605214,
      0,
      0,
      0.10797483360419559,
      0.20455447461556217,
      0,
      0,
      0.1307690438614768,
      0,
      0.17623913275352604,
      0,
      0.09323855076141097,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.24913848389669752,
      0.27943856388607496,
      0.12856094223466777,
      0,
      0,
      0,
      0,
      0,
      0.18018376266037547,
      0,
      0,
      0,
      0.3106549802057644,
      0.2155994562936096,
      0.026357582979355244,
      0.1086375702378852,
      0,
      0,
      0,
      0.37549272399564915,
      0.11226410967736848,
      0,
      0.008759659557496037,
      0,
      0.1867416097488546,
      0.028148035453992883,
      0
    ],
    "metadata": {
      "text": "func main() {\n    var age int = 25\n    name := \"Alice\"\n    fmt.Printf(\"%s is %d years old.\\n\", name, age)\n}\n```"
    }
  },
  {
    "embedding": [
      0.17912110503597842,
      0,
      0,
      0.2364084786299931,
      0,
      0,
      0.2640071261309429,
      0,
      0.2870540222085097,
      0,
      0,
      0,
      0.07207373591328839,
      0,
      0,
      0,
      0.26753591970895974,
      0,
      0,
      0.03764845564864181,
      0.12536748549618304,
      0,
      0,
      0.08161000658996664,
      0,
      0.2066035182985306,
      0,
      0.08805231436554664,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08774590746966907,
      0,
      0.25590974446333653,
      0.23114307084685537,
      0.09233384820690548,
      0,
      0,
      0,
      0,
      0,
      0.163618868720494,
      0,
      0,
      0,
      0.36660692901003056,
      0.17366183487621992,
      0.15773648190326084,
      0.1430985605152341,
      0,
      0,
      0,
      0.4107055802364884,
      0.056801336055186565,
      0,
      0.10461984835363858,
      0,
      0.20923393395331608,
      0.09357979845311694,
      0.04131786329606765
    ],
    "metadata": {
      "text": "**Exercises:**\n- Declare a constant for your favorite number.\n- Print out a sentence that includes a variable and a constant."
    }
  },
  {
    "embedding": [
      0.21290753806761542,
      0,
      0,
      0.22582236119057664,
      0,
      0,
      0.18681494377694857,
      0,
      0.2666798622834556,
      0.04150483621258195,
      0,
      0,
      0.11876824335855918,
      0,
      0,
      0,
      0.3300408970006124,
      0,
      0,
      0.11642015295291072,
      0.1192275266987234,
      0,
      0,
      0.0604371999023765,
      0,
      0.17773968989121683,
      0,
      0.11187364326851923,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.050835838411202344,
      0,
      0.2641708806794459,
      0.18572887003401098,
      0.0705314775744423,
      0,
      0,
      0,
      0,
      0,
      0.14438976808744858,
      0,
      0,
      0,
      0.36553757904929934,
      0.21024532250603092,
      0.054071006158441216,
      0.24091356206350967,
      0,
      0,
      0,
      0.3899044389451627,
      0.01576634590805974,
      0,
      0.08446442490463708,
      0,
      0.22269761884078904,
      0.12740319363701852,
      0.025801892690421355
    ],
    "metadata": {
      "text": "### Day 2: Data Types\n**Objectives:**\n- Get acquainted with basic data types: integers, floats, booleans, and strings.\n- Learn how type inference works in Go."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.26723235761525416,
      0,
      0,
      0.17658362485013823,
      0,
      0,
      0.2360578270248022,
      0,
      0.2853161013165476,
      0,
      0,
      0,
      0.027539590410299013,
      0,
      0,
      0,
      0.26451536579552215,
      0,
      0,
      0.06742024899092526,
      0.1606803146831054,
      0,
      0,
      0.042730904189287475,
      0,
      0.14797925570358883,
      0,
      0.07415902386262141,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0431417090706779,
      0,
      0.3009244160791979,
      0.3362528221449921,
      0.06425880235022402,
      0,
      0,
      0,
      0,
      0,
      0.18557945620064972,
      0,
      0,
      0,
      0.31580530683193037,
      0.2269845327078923,
      0.02353278072979364,
      0.03742403213344546,
      0,
      0,
      0,
      0.3879738992567107,
      0.05880116018443934,
      0,
      0.04666477702992086,
      0,
      0.24179363037267024,
      0.13445705227538354,
      0
    ],
    "metadata": {
      "text": "func main() {\n    var integer int = 10\n    floatNum := 3.14\n    isTrue := true\n    text := \"Go is fun!\"\n    fmt.Println(integer, floatNum, isTrue, text)\n}\n```"
    }
  },
  {
    "embedding": [
      0.20583235576040965,
      0.05893230476185027,
      0,
      0.10506332149329473,
      0,
      0,
      0.18865704322850266,
      0,
      0.20618686884001228,
      0,
      0,
      0,
      0.026522463302481435,
      0,
      0,
      0,
      0.24205377663183184,
      0,
      0,
      0.06161234531626667,
      0.1856903263011692,
      0,
      0,
      0.18600993022202886,
      0,
      0.14434663134607373,
      0,
      0.06360971428665384,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3235415121447049,
      0.18904578277168355,
      0.1297881663653965,
      0,
      0,
      0,
      0,
      0,
      0.25176817295106974,
      0,
      0,
      0,
      0.4118894554204672,
      0.22950279198400544,
      0.09611149878488065,
      0.07016312640647775,
      0,
      0,
      0,
      0.3782708470655185,
      0.1305932321927639,
      0,
      0.13706045104850767,
      0,
      0.2590854684092836,
      0,
      0.06911089985278733
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create variables of each data type and print their values."
    }
  },
  {
    "embedding": [
      0.20398293593147857,
      0.004892552427062444,
      0,
      0.07462431285756196,
      0,
      0,
      0.19385428023569948,
      0,
      0.21165092698350513,
      0,
      0,
      0,
      0.06682184072967036,
      0,
      0,
      0,
      0.36058783190151167,
      0,
      0,
      0.13879221669092073,
      0.21256636768320736,
      0,
      0,
      0.16161430189008097,
      0,
      0.1528301942735877,
      0,
      0.10573177663514045,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006684506137586917,
      0,
      0.24627233868501802,
      0.128019528773866,
      0.08823316896233216,
      0,
      0,
      0,
      0,
      0,
      0.24966254380051756,
      0,
      0,
      0,
      0.3202401023964289,
      0.3370775568968251,
      0.1358587461678791,
      0.15026524252733073,
      0,
      0,
      0,
      0.33421468077369804,
      0.06315349948317477,
      0,
      0.08628679111572046,
      0,
      0.28411819580701136,
      0.050614730393507085,
      0
    ],
    "metadata": {
      "text": "### Day 3: Basic Operators\n**Objectives:**\n- Understand arithmetic, relational, and logical operators.\n- Use operators in simple expressions."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.15099179063740734,
      0.007181466381452089,
      0,
      0.21697254675330543,
      0,
      0,
      0.2539417746234116,
      0,
      0.30748264290357524,
      0.06240928468386781,
      0,
      0,
      0.08202544348677689,
      0,
      0,
      0,
      0.27682174064649645,
      0,
      0,
      0.05634078590511205,
      0.09956469920773313,
      0,
      0,
      0.08742574956821914,
      0,
      0.21900500021432362,
      0,
      0.12307996741563094,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.015307767518433995,
      0,
      0.3095059752406334,
      0.2579573395609367,
      0.13078249006518272,
      0,
      0,
      0,
      0,
      0,
      0.19578860887530994,
      0,
      0,
      0,
      0.299365379368571,
      0.16124405860945448,
      0.10771645764328253,
      0.09723344033791675,
      0,
      0.042075106719668534,
      0,
      0.4385481618087661,
      0.0944687976081397,
      0,
      0.0917831865683063,
      0,
      0.15733475426610563,
      0.09414741167258164,
      0.014130699435694147
    ],
    "metadata": {
      "text": "func main() {\n    a, b := 10, 5\n    sum := a + b\n    isEqual := (a == b)\n    fmt.Println(\"Sum:\", sum, \"Are they equal?\", isEqual)\n}\n```"
    }
  },
  {
    "embedding": [
      0.10826619693205976,
      0.06505218446824805,
      0,
      0.14065563988645421,
      0,
      0,
      0.18362665938382144,
      0,
      0.19615737747467338,
      0,
      0,
      0,
      0.1108124476330107,
      0,
      0,
      0,
      0.3077866787162827,
      0,
      0,
      0.11554662455089423,
      0.19452449469543456,
      0,
      0,
      0.07961811708152881,
      0,
      0.2351611016353419,
      0,
      0.09649778979575632,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.24833969258490105,
      0.19327510774810971,
      0.17265215921670157,
      0,
      0,
      0,
      0,
      0,
      0.17816778291950858,
      0,
      0,
      0,
      0.37050382495112294,
      0.2565068820218628,
      0.19995582612304116,
      0.10118921187827606,
      0,
      0,
      0,
      0.41315029680397747,
      0.06803538524137728,
      0,
      0.11308133015595842,
      0,
      0.23187937683751333,
      0.0846371770710772,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a program that uses different operators to compare two numbers."
    }
  },
  {
    "embedding": [
      0.22088522005416458,
      0,
      0,
      0.20811924332504603,
      0,
      0,
      0.1568893301618422,
      0,
      0.2838648811654526,
      0,
      0,
      0,
      0.08638228522541644,
      0,
      0,
      0,
      0.26852396492697317,
      0,
      0,
      0.08949970431864082,
      0.1859650484785415,
      0,
      0,
      0.013899285402341957,
      0,
      0.18282828252686031,
      0,
      0.12961957248758035,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.29758159408444756,
      0.17858747512760706,
      0.09751607740924086,
      0,
      0,
      0,
      0,
      0,
      0.2584422059035008,
      0,
      0,
      0,
      0.3414364851082153,
      0.15686157649288157,
      0,
      0.143117564709375,
      0,
      0.011995397424332721,
      0,
      0.46100461631985945,
      0.07385400514771198,
      0,
      0.11128996017388317,
      0,
      0.17472666585598282,
      0.10135449202046459,
      0.01983623435602672
    ],
    "metadata": {
      "text": "### Day 4: Basic Input/Output\n**Objectives:**\n- Learn how to use `fmt.Println`, `fmt.Printf`, and `fmt.Scan` for I/O.\n- Practice formatting output."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.20194814532321825,
      0,
      0,
      0.1425733938513218,
      0,
      0,
      0.17800154956219008,
      0,
      0.24741294750458945,
      0.01351653501125392,
      0,
      0,
      0.10200808125329806,
      0,
      0,
      0,
      0.2818431451385561,
      0,
      0,
      0.06817881465058359,
      0.17187643795797664,
      0,
      0,
      0.07905767162966426,
      0,
      0.09514539929823769,
      0,
      0.11538932042520704,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.041449955410323085,
      0,
      0.34037902779508555,
      0.3570588554394724,
      0.039027553214493034,
      0,
      0,
      0,
      0,
      0,
      0.17200075396029713,
      0,
      0,
      0,
      0.3633583974037795,
      0.17631960809736943,
      0.1577700804447438,
      0.08059757017808553,
      0,
      0.03193512757892794,
      0,
      0.38913294105532714,
      0.04183357040111015,
      0,
      0.14265664425755223,
      0,
      0.17174576865151409,
      0.13579119205824838,
      0
    ],
    "metadata": {
      "text": "func main() {\n    var name string\n    fmt.Print(\"Enter your name: \")\n    fmt.Scan(&name)\n    fmt.Printf(\"Hello, %s!\\n\", name)\n}\n```"
    }
  },
  {
    "embedding": [
      0.17654757895298304,
      0,
      0,
      0.14584045816587834,
      0,
      0,
      0.2179500228217025,
      0,
      0.25616901804168146,
      0,
      0,
      0,
      0.011821360981891014,
      0,
      0,
      0,
      0.34723394190153495,
      0,
      0,
      0.10915593750419683,
      0.13677615944254815,
      0,
      0,
      0.11331556770098568,
      0,
      0.13742592237776746,
      0,
      0.09430211903110076,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3236430504429055,
      0.24941118596637832,
      0.09519652876271426,
      0,
      0,
      0,
      0,
      0,
      0.20275555886318947,
      0,
      0,
      0,
      0.3655393172749314,
      0.2104527657780991,
      0,
      0.18380886213593267,
      0,
      0,
      0,
      0.37528190044728854,
      0.0033076507716895765,
      0,
      0.02113231021383462,
      0,
      0.2687952121633604,
      0,
      0.010988600185768738
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a program that prompts the user for two numbers, adds them, and prints the result."
    }
  },
  {
    "embedding": [
      0.21205931600620895,
      0,
      0,
      0.16941902238841478,
      0,
      0,
      0.2933302463676636,
      0,
      0.2163785177112337,
      0,
      0,
      0,
      0.058850845521008825,
      0,
      0,
      0,
      0.21725267923105912,
      0,
      0,
      0.08718835624466058,
      0.15874241953019022,
      0,
      0,
      0.13912621826459132,
      0,
      0.18890255385702984,
      0,
      0.1304691216832726,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0751662857275292,
      0,
      0.38933207579576207,
      0.19329164849377511,
      0.17193367238934198,
      0,
      0,
      0,
      0,
      0,
      0.3384011370958983,
      0,
      0,
      0,
      0.2960317446395235,
      0.17488343923477043,
      0.07212178707382362,
      0.07388801567680983,
      0,
      0,
      0,
      0.3578771909546521,
      0.022828972920214533,
      0,
      0.06804843869178116,
      0,
      0.17162111654547926,
      0.07370393714602366,
      0.04773499260713823
    ],
    "metadata": {
      "text": "### Day 5: Mini Project & Review\n**Objectives:**\n- Reinforce the week’s lessons with a small project.\n- Review variables, types, operators, and I/O."
    }
  },
  {
    "embedding": [
      0.15222337428803157,
      0.03809730312391316,
      0,
      0.17880891594037798,
      0,
      0,
      0.2431313208080084,
      0,
      0.24510885351540457,
      0,
      0,
      0,
      0.07946137017173335,
      0,
      0,
      0,
      0.24169826678480016,
      0,
      0,
      0.05988515130723465,
      0.1611298214992456,
      0,
      0,
      0.054665053134530586,
      0,
      0.19915943872003045,
      0,
      0.1215303202300982,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05990873322962726,
      0,
      0.34240708578432083,
      0.2055311639483372,
      0.19369021308903983,
      0,
      0,
      0,
      0,
      0,
      0.20619275776886084,
      0,
      0,
      0,
      0.36700221926227955,
      0.1989298407578368,
      0.07279678287665248,
      0.14402417781340987,
      0,
      0.07599052077144654,
      0,
      0.40342170704060437,
      0,
      0,
      0.06579900859300049,
      0,
      0.23105252689536535,
      0.03190358349119431,
      0.04290528943866275
    ],
    "metadata": {
      "text": "**Project Example:**\n- Write a program that calculates the area of a rectangle."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.2187431010805996,
      0,
      0,
      0.16423146383536713,
      0,
      0,
      0.2602797697979719,
      0,
      0.2789988703650972,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04097745593634495,
      0.36297582947707663,
      0,
      0,
      0.08474865612020799,
      0.15397662320389116,
      0,
      0,
      0.07815231402341684,
      0,
      0.09984321048035893,
      0,
      0.07329721462944426,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2987031410406891,
      0.3200109910502107,
      0.10565688968797823,
      0,
      0,
      0,
      0,
      0,
      0.20331599003628642,
      0,
      0,
      0,
      0.3316098269898087,
      0.19887932599704544,
      0.027460294765820153,
      0.06936511441638038,
      0,
      0,
      0,
      0.3637980919166319,
      0.06781082025534559,
      0,
      0.06356232890516818,
      0,
      0.21550769501792735,
      0.08470895926168502,
      0.0010755143440575913
    ],
    "metadata": {
      "text": "func main() {\n    var width, height float64\n    fmt.Print(\"Enter width: \")\n    fmt.Scan(&width)\n    fmt.Print(\"Enter height: \")\n    fmt.Scan(&height)\n    area := width * height\n    fmt.Printf(\"The area is: %.2f\\n\", area)\n}\n```"
    }
  },
  {
    "embedding": [
      0.1768817782829597,
      0.00801272261840731,
      0,
      0.13189495337086454,
      0,
      0,
      0.26092806525109313,
      0,
      0.23770245562557837,
      0,
      0,
      0,
      0.09645089738913071,
      0,
      0,
      0,
      0.353657814394943,
      0,
      0,
      0.04590770993682015,
      0.16351793002715242,
      0,
      0,
      0.0763362997025405,
      0,
      0.2703867982501242,
      0,
      0.09393996077947922,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01675621924376997,
      0,
      0.23607067384106137,
      0.18114957444185273,
      0.19356577193355226,
      0,
      0,
      0,
      0,
      0,
      0.21696703718304775,
      0,
      0,
      0,
      0.36757744164692563,
      0.19114538871418102,
      0.0015572469106385149,
      0.12187225931751376,
      0,
      0,
      0,
      0.4384621505583692,
      0.03774595170269546,
      0,
      0.057560217337337787,
      0,
      0.12725710873858542,
      0.011296569927749472,
      0.05001526508534859
    ],
    "metadata": {
      "text": "**Exercises:**\n- Modify the project to also calculate and print the perimeter."
    }
  },
  {
    "embedding": [
      0.13601090640758307,
      0,
      0,
      0.18488418119876993,
      0,
      0,
      0.25150198605896257,
      0,
      0.2229036837371487,
      0,
      0,
      0,
      0.09668723560916398,
      0,
      0,
      0,
      0.34015956592863905,
      0,
      0,
      0.04636925243604188,
      0.1495183000724098,
      0,
      0,
      0.16165570226316733,
      0,
      0.2743969238215307,
      0,
      0.12446763271050221,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0750817476111544,
      0,
      0.21263432593473153,
      0.15604177523937268,
      0.15042137543829476,
      0,
      0,
      0,
      0,
      0,
      0.24206018361198492,
      0,
      0,
      0,
      0.35638944901144043,
      0.16639486088045896,
      0.13393312622154332,
      0.033997297945694456,
      0,
      0,
      0,
      0.4232627185671521,
      0.126268769314212,
      0,
      0.10877214767160878,
      0,
      0.12607703853441152,
      0,
      0.1219116836388194
    ],
    "metadata": {
      "text": "## ||| Week 7: Control Structures and Basic Data Types"
    }
  },
  {
    "embedding": [
      0.22643164307541105,
      0,
      0,
      0.21889033596908236,
      0,
      0,
      0.1957972446945356,
      0,
      0.3019551587589405,
      0.05712697635127007,
      0,
      0,
      0.1451200040963212,
      0,
      0,
      0,
      0.19256708083749113,
      0,
      0,
      0.08134953262776,
      0.1213402727342433,
      0,
      0,
      0.1118671451587761,
      0,
      0.19953263384999256,
      0,
      0.08742116036953503,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.052019092607076434,
      0,
      0.3054291743071457,
      0.27385795647026595,
      0.05659216002048614,
      0,
      0,
      0,
      0,
      0,
      0.2224522404770945,
      0,
      0,
      0,
      0.3223204390919228,
      0.12585199678088085,
      0.12090992013659659,
      0.1564030644463827,
      0,
      0.021572783673851955,
      0,
      0.44073976975186985,
      0.05454193572767191,
      0,
      0.1135811708656931,
      0,
      0.15378400888542207,
      0.1071365033955758,
      0.019399599918421554
    ],
    "metadata": {
      "text": "### Day 1: If-Else Statements\n**Objectives:**\n- Learn how to use if-else statements for decision making."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.22840457621136484,
      0,
      0,
      0.146856368476932,
      0,
      0,
      0.1840574477331909,
      0,
      0.2852199425874096,
      0.03624234323153254,
      0,
      0,
      0.12803119506709457,
      0,
      0,
      0.005095848288017489,
      0.2901776388571768,
      0,
      0,
      0,
      0.17659970588889237,
      0,
      0,
      0,
      0,
      0.09241833941458492,
      0,
      0.05853172943340818,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003913239805136139,
      0,
      0.29053441777994915,
      0.26678927512887274,
      0.04655201970171244,
      0,
      0,
      0,
      0,
      0,
      0.1704445214705063,
      0,
      0,
      0,
      0.3795931499423184,
      0.1633079812909837,
      0,
      0.12331531911945585,
      0,
      0.07245616519598481,
      0,
      0.44814335281414286,
      0.15209077372038515,
      0,
      0.07661648465145424,
      0,
      0.2109693989722624,
      0.11648235288325441,
      0
    ],
    "metadata": {
      "text": "func main() {\n    age := 20\n    if age >= 18 {\n        fmt.Println(\"You are an adult.\")\n    } else {\n        fmt.Println(\"You are a minor.\")\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.21985852978571582,
      0.029636273674612613,
      0,
      0.1695698609824091,
      0,
      0,
      0.25296282219226,
      0,
      0.2164193370291396,
      0,
      0,
      0,
      0.0381524007989931,
      0,
      0,
      0,
      0.3279617143427614,
      0,
      0,
      0.12344224051162747,
      0.12401231526771257,
      0,
      0,
      0.08285358874597702,
      0,
      0.16757907199690578,
      0,
      0.11095374835164187,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02543063282812325,
      0,
      0.31165698307464884,
      0.22772092518867607,
      0.13286424500229513,
      0,
      0,
      0,
      0,
      0,
      0.19455209649810853,
      0,
      0,
      0,
      0.3114802538852758,
      0.2954517062213624,
      0.07410642867756659,
      0.09396368951545553,
      0,
      0,
      0,
      0.3731561066944197,
      0.01790395326649609,
      0,
      0.08815853635425083,
      0,
      0.25113638425936646,
      0.1006759880620668,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a program that prints a message based on a numerical condition."
    }
  },
  {
    "embedding": [
      0.2689100667851983,
      0,
      0,
      0.243348907751196,
      0,
      0,
      0.28289755407784123,
      0,
      0.24033379932101123,
      0.042910821727356455,
      0,
      0,
      0.020289926896469676,
      0,
      0,
      0,
      0.2259722225275788,
      0,
      0,
      0.043263332596959414,
      0.1637017824404082,
      0,
      0,
      0.07194126978431498,
      0,
      0.21294816307346376,
      0,
      0.14904292232551603,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.11696574422911385,
      0,
      0.3325198426527271,
      0.21480228352041417,
      0.0026308095550957775,
      0,
      0,
      0,
      0,
      0,
      0.18406431700169748,
      0,
      0,
      0,
      0.2635283220415062,
      0.2866339139288857,
      0,
      0.12974723333773439,
      0,
      0,
      0,
      0.4095133118730582,
      0,
      0,
      0.039196860320233444,
      0,
      0.17651684851323304,
      0.05330382818710517,
      0
    ],
    "metadata": {
      "text": "### Day 2: Switch Statements\n**Objectives:**\n- Use switch statements for cleaner multiple conditional checks."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.21512664995694344,
      0.022746918670271628,
      0,
      0.2526548220356901,
      0,
      0,
      0.16560305840005576,
      0,
      0.29702022537723194,
      0.04117886802933883,
      0,
      0,
      0.10953429107401105,
      0,
      0,
      0,
      0.29180086933592536,
      0,
      0,
      0.08789913033041391,
      0.13514361146121673,
      0,
      0,
      0.08074261776872901,
      0,
      0.1848824162262871,
      0,
      0.1042879210834079,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08976534675118811,
      0,
      0.2838243774101294,
      0.19619897695789598,
      0.0374024022146567,
      0,
      0,
      0,
      0,
      0,
      0.19154792037222465,
      0,
      0,
      0,
      0.3278872692440893,
      0.21162427818561977,
      0.17129399831022057,
      0.09269676916590816,
      0,
      0,
      0,
      0.41750727422379685,
      0.10979933442140594,
      0,
      0.13173475849986643,
      0,
      0.18878497512141484,
      0.049815953106650324,
      0.006677303887569617
    ],
    "metadata": {
      "text": "func main() {\n    day := 3\n    switch day {\n    case 1:\n        fmt.Println(\"Monday\")\n    case 2:\n        fmt.Println(\"Tuesday\")\n    case 3:\n        fmt.Println(\"Wednesday\")\n    default:\n        fmt.Println(\"Another day\")\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.2538463500697269,
      0,
      0,
      0.14664575821871584,
      0,
      0,
      0.15777299605068687,
      0,
      0.2529983699537465,
      0,
      0,
      0,
      0.13332265898223167,
      0,
      0,
      0,
      0.3113510401043489,
      0,
      0,
      0.10972441655883211,
      0.1553556561548094,
      0,
      0,
      0.04781798252749981,
      0,
      0.1950623695786517,
      0,
      0.07138607174049007,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.27518248394856254,
      0.23264516664779283,
      0.04928819198614681,
      0,
      0,
      0,
      0,
      0,
      0.24290668066348683,
      0,
      0,
      0,
      0.3792922228882472,
      0.14826935915526682,
      0.05445916715986306,
      0.11690821905989175,
      0,
      0,
      0,
      0.4231886773215379,
      0.12341505246959777,
      0,
      0.18393847658463278,
      0,
      0.1532134650218226,
      0.05870204319409472,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a switch statement that prints the name of a day based on a number input (1-7)."
    }
  },
  {
    "embedding": [
      0.20515240021669337,
      0,
      0,
      0.16160036179240123,
      0,
      0,
      0.22052173654044552,
      0,
      0.2675464966877584,
      0.021868152259744422,
      0,
      0,
      0.12708586272021208,
      0,
      0,
      0,
      0.37370050900796264,
      0,
      0,
      0.1187243755802965,
      0.12091575829595141,
      0,
      0,
      0.1041168807037917,
      0,
      0.1619636127037648,
      0,
      0.08641150588014006,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.142691480399706,
      0,
      0.23003990973999755,
      0.25806450206001813,
      0.08607179590239895,
      0,
      0,
      0,
      0,
      0,
      0.2609860373374471,
      0,
      0,
      0,
      0.34600672513877523,
      0.18885283906074032,
      0.10874816910873066,
      0.14469284662022322,
      0,
      0,
      0,
      0.34162327244352736,
      0.1203148112324678,
      0,
      0.04671293585907676,
      0,
      0.18370036785207106,
      0.10249537175936341,
      0.029799703111689828
    ],
    "metadata": {
      "text": "### Day 3: For Loops (Part 1)\n**Objectives:**\n- Learn the basic structure of Go’s `for` loop."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.1852997486002539,
      0,
      0,
      0.20726619226332568,
      0,
      0,
      0.2293352529475831,
      0,
      0.2818639360523531,
      0,
      0,
      0,
      0.08453495579522557,
      0,
      0,
      0,
      0.31462214655888787,
      0,
      0,
      0.06542395097690826,
      0.1829969936187385,
      0,
      0,
      0.12637989303105898,
      0,
      0.20112186081749528,
      0,
      0.08831759770919403,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.26330669591938305,
      0.25518866516859645,
      0.14119710976765695,
      0,
      0,
      0,
      0,
      0,
      0.15297771886262862,
      0,
      0,
      0,
      0.3860844968962485,
      0.20594946515938972,
      0.08801024315759402,
      0.0785821286524814,
      0,
      0,
      0,
      0.4025179850856466,
      0.015346640187695229,
      0,
      0.07207974104324312,
      0,
      0.17592485189512355,
      0.030827334127246492,
      0
    ],
    "metadata": {
      "text": "func main() {\n    for i := 0; i < 5; i++ {\n        fmt.Println(\"Iteration:\", i)\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.19156913499352118,
      0.03909793142896466,
      0.016359718475260247,
      0.11950445140765381,
      0,
      0,
      0.30384837409593446,
      0,
      0.21765147115942873,
      0,
      0,
      0,
      0.05923353317042173,
      0,
      0,
      0,
      0.250323496165028,
      0,
      0,
      0.007504940999102717,
      0.13307731179079116,
      0,
      0,
      0.14606565473690322,
      0,
      0.18906951915788375,
      0,
      0.09000296318775443,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03486863114549593,
      0,
      0.28954634919555133,
      0.28797288983575253,
      0.19149639906150137,
      0,
      0,
      0,
      0,
      0,
      0.18609173585499436,
      0,
      0,
      0,
      0.38340935652563907,
      0.1648731035231464,
      0.17557500249173721,
      0.08243693229046702,
      0,
      0.055827784362109965,
      0,
      0.36088480735239936,
      0.09996483338202415,
      0,
      0.09449450658582977,
      0,
      0.22256845626734065,
      0.07419048494698885,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a loop that prints numbers from 1 to 10."
    }
  },
  {
    "embedding": [
      0.18375215749490117,
      0,
      0,
      0.12145411310911831,
      0,
      0,
      0.14794116792811052,
      0,
      0.3344631478246445,
      0,
      0,
      0,
      0.07199055931082456,
      0,
      0,
      0.010593477717935076,
      0.2646825313610017,
      0,
      0,
      0.11526663233936658,
      0.16133104902664544,
      0,
      0,
      0.1284457923242605,
      0,
      0.12529349899310763,
      0,
      0.07264915902511877,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.33758362552169147,
      0.2696437860166465,
      0.13366535257614046,
      0,
      0,
      0,
      0,
      0,
      0.21714415427221875,
      0,
      0,
      0,
      0.362896512107846,
      0.17940884801497164,
      0.06453006172557102,
      0.1523172399413858,
      0,
      0.04670495183750295,
      0,
      0.3533661286502005,
      0.001530022100659727,
      0,
      0.07992768986098703,
      0,
      0.25326225416546644,
      0.15806869437094437,
      0.009463833931335538
    ],
    "metadata": {
      "text": "### Day 4: For Loops (Part 2) and Ranges\n**Objectives:**\n- Use the `range` keyword with slices and arrays."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.2137560874653521,
      0,
      0,
      0.17633932395131077,
      0,
      0,
      0.21733229801441625,
      0,
      0.24937057102349053,
      0.11166825293986854,
      0,
      0,
      0.06507407315993459,
      0,
      0,
      0.06561937571582285,
      0.2824843879506928,
      0,
      0,
      0.04792276844276783,
      0.15727454411241026,
      0,
      0,
      0.02637787538918612,
      0,
      0.15439892915584302,
      0,
      0.085645123014103,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.017856964945512574,
      0,
      0.34227642968293487,
      0.25743871637542176,
      0.03477668698216246,
      0,
      0,
      0,
      0,
      0,
      0.22444302020281165,
      0,
      0,
      0,
      0.35709184506268843,
      0.157376818462639,
      0.06917529641730993,
      0.13929193248316613,
      0,
      0.04650584493772283,
      0,
      0.4251481647336587,
      0.07724208223730282,
      0,
      0.09072854001833526,
      0,
      0.1991221623314329,
      0.07431354794155338,
      0
    ],
    "metadata": {
      "text": "func main() {\n    numbers := []int{10, 20, 30, 40, 50}\n    for index, value := range numbers {\n        fmt.Printf(\"Index: %d, Value: %d\\n\", index, value)\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.22346660959760656,
      0.03789741102445378,
      0,
      0.14666013525149263,
      0,
      0,
      0.27556510862587813,
      0,
      0.2518243167226202,
      0,
      0,
      0,
      0.05553111267302945,
      0,
      0,
      0,
      0.3407381617032385,
      0,
      0,
      0.12191354528650086,
      0.16720287411297335,
      0,
      0,
      0.18738514765737171,
      0,
      0.1978009565918918,
      0,
      0.15177274828568543,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.055983706364749704,
      0,
      0.2252364218550787,
      0.19847181071115705,
      0.15092867638676916,
      0,
      0,
      0,
      0,
      0,
      0.15280781510691663,
      0,
      0,
      0,
      0.307241339640086,
      0.23698292058832718,
      0.08064424072077271,
      0.0865539453496789,
      0,
      0,
      0,
      0.36666272723047644,
      0.07199673752052622,
      0,
      0.08669964121071158,
      0,
      0.26287639465161866,
      0.09110898081740344,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a slice of strings and print each element using a range-based loop."
    }
  },
  {
    "embedding": [
      0.2105424091414971,
      0,
      0,
      0.15306306796526276,
      0,
      0,
      0.22616438527578822,
      0,
      0.21513252600211902,
      0.03581718133480853,
      0,
      0,
      0.11022529970025546,
      0,
      0,
      0,
      0.2636792527466251,
      0,
      0,
      0.11373250812943132,
      0.18928308741366912,
      0,
      0,
      0.20126840007031088,
      0,
      0.2450729791498333,
      0,
      0.10980400211199183,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03177872485976219,
      0,
      0.25510518811355465,
      0.18408078248645007,
      0.06029897014843905,
      0,
      0,
      0,
      0,
      0,
      0.1965120475268445,
      0,
      0,
      0,
      0.29331782176243326,
      0.2934553520345976,
      0.18286113964059378,
      0.11941492472232883,
      0,
      0,
      0,
      0.3801083056505738,
      0.0526873256637083,
      0,
      0.08387300483677348,
      0,
      0.26305785749347377,
      0.06331464820763302,
      0.029737530260002427
    ],
    "metadata": {
      "text": "### Day 5: Arrays and Strings\n**Objectives:**\n- Understand how to declare and use arrays.\n- Learn basic string manipulation."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.2184463357159703,
      0,
      0,
      0.15614116251573204,
      0,
      0,
      0.18056381794340576,
      0,
      0.25633640028404153,
      0.07504222359864882,
      0,
      0,
      0.10247299968320417,
      0,
      0,
      0.021435238049646994,
      0.2958385753375148,
      0,
      0,
      0.018349348786918056,
      0.10899051540453952,
      0,
      0,
      0.014578849997146561,
      0,
      0.1240977047016966,
      0,
      0.09555582362470602,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07798140971402223,
      0,
      0.32632192602986626,
      0.25199570432995083,
      0.16601409561714436,
      0,
      0,
      0,
      0,
      0,
      0.2524127846381663,
      0,
      0,
      0,
      0.3529389377027843,
      0.19858508790616153,
      0.05239340745756762,
      0.13742547419833875,
      0,
      0.0924294408296244,
      0,
      0.3627621374315912,
      0.07854744769412896,
      0,
      0.09602972882777248,
      0,
      0.24775951031427393,
      0.13648383033011122,
      0
    ],
    "metadata": {
      "text": "func main() {\n    // Array example\n    var numbers [5]int = [5]int{1, 2, 3, 4, 5}\n    fmt.Println(\"Array:\", numbers)"
    }
  },
  {
    "embedding": [
      0.196712158215331,
      0,
      0,
      0.20639751358072317,
      0,
      0,
      0.14729383828982437,
      0,
      0.23719288130547492,
      0,
      0,
      0,
      0.08820649929791859,
      0,
      0,
      0,
      0.26435782865777224,
      0,
      0,
      0.07249351966388487,
      0.1669408061346681,
      0,
      0,
      0.11051447320072359,
      0,
      0.09873954831861324,
      0,
      0.045177951269492415,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03937722882961081,
      0,
      0.33356501873197675,
      0.21748007671607522,
      0.06766239502723444,
      0,
      0,
      0,
      0,
      0,
      0.24100971531701168,
      0,
      0,
      0,
      0.34624374482794923,
      0.2712240516859499,
      0.15036711551209625,
      0.09329779714658568,
      0,
      0,
      0,
      0.36030958521356166,
      0.05815849629012302,
      0,
      0.21311023326735856,
      0,
      0.2727298464402213,
      0.07356562755108464,
      0
    ],
    "metadata": {
      "text": "// String iteration example\n    str := \"GoLang\"\n    for i, c := range str {\n        fmt.Printf(\"Character %d: %c\\n\", i, c)\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.1886747650297734,
      0.011891840266538566,
      0,
      0.22229897295920265,
      0,
      0,
      0.21715597536101672,
      0,
      0.1968778390284562,
      0.029174076290865315,
      0,
      0,
      0.08717466759967182,
      0,
      0,
      0,
      0.3237475873035755,
      0,
      0,
      0.15163732588946213,
      0.0893265657840774,
      0,
      0,
      0.0729060993927789,
      0,
      0.19570017792183014,
      0,
      0.10821764746590408,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.068380561288342,
      0,
      0.2623976844711348,
      0.23246714533062418,
      0.10713022641211827,
      0,
      0,
      0,
      0,
      0,
      0.20159059251134853,
      0,
      0,
      0,
      0.3249521543045286,
      0.25989587662409586,
      0.08806848094315234,
      0.1331158720074424,
      0,
      0.028953768072614662,
      0,
      0.4032331046510191,
      0.10552187191935523,
      0,
      0.06378296676416424,
      0,
      0.25497601128003927,
      0.07520499230504453,
      0.041919207222661105
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a program that prints each character of a user-input string."
    }
  },
  {
    "embedding": [
      0.17276394070603027,
      0,
      0,
      0.1708457855136589,
      0,
      0,
      0.19193017213009825,
      0,
      0.20261855635000758,
      0,
      0,
      0,
      0.1367555756081974,
      0,
      0,
      0,
      0.3119921322787543,
      0,
      0,
      0.09012879827923374,
      0.16183418726781257,
      0,
      0,
      0.12436633276543067,
      0,
      0.2193385418201235,
      0,
      0.07738864475677329,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01659530781793071,
      0,
      0.27991674985341747,
      0.19998279555681592,
      0.10618471150438516,
      0,
      0,
      0,
      0,
      0,
      0.23717700398771857,
      0,
      0,
      0,
      0.3573775608644235,
      0.21489375377078354,
      0.09359770709544006,
      0.10370420651743899,
      0,
      0,
      0,
      0.43942845104897027,
      0.08075902878289523,
      0,
      0.15649279989614207,
      0,
      0.1984287085650393,
      0,
      0.01030999313149633
    ],
    "metadata": {
      "text": "## ||| Week 8: Functions, Error Handling, and Packages"
    }
  },
  {
    "embedding": [
      0.31724605382850235,
      0,
      0,
      0.11024377016597542,
      0,
      0,
      0.20938138290428993,
      0,
      0.2806571287266926,
      0,
      0,
      0,
      0.06510868659681567,
      0,
      0.06264186949119284,
      0.0043222007551329805,
      0.2653244576381843,
      0,
      0,
      0.047245933431802355,
      0.22370060593135266,
      0,
      0,
      0.16999182747236097,
      0,
      0.1385403943739719,
      0,
      0.19617820618456758,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.12519619534935994,
      0,
      0.26758064169644374,
      0.27614959830210556,
      0.10013015693393877,
      0,
      0,
      0,
      0,
      0,
      0.27753872452484546,
      0,
      0,
      0,
      0.29537975322614396,
      0.16148940832719919,
      0.0895236821377915,
      0.027352607387215528,
      0,
      0,
      0,
      0.37021943838054117,
      0.056004793818896385,
      0,
      0.09945019979454038,
      0,
      0.14892021053739743,
      0.03077472648590825,
      0.03567203381018899
    ],
    "metadata": {
      "text": "### Day 1: Functions Basics\n**Objectives:**\n- Define and call functions.\n- Understand parameters and return values."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.22310413812926552,
      0,
      0,
      0.21275741964720193,
      0,
      0,
      0.1807537868838684,
      0,
      0.26327567051572287,
      0.010080912637133151,
      0,
      0,
      0.08630103186570055,
      0,
      0,
      0,
      0.25752632711793805,
      0,
      0,
      0.09920300505847351,
      0.16405172406755167,
      0,
      0,
      0.1053809467735553,
      0,
      0.1682931142878243,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011187479299273249,
      0,
      0.2974766278627538,
      0.24701028826211763,
      0.12313278708716494,
      0,
      0,
      0,
      0,
      0,
      0.22389531287660117,
      0,
      0,
      0,
      0.31701105154687925,
      0.1452635375418289,
      0.12843737380002665,
      0.10514201648619446,
      0,
      0,
      0,
      0.4568679537545098,
      0.07029186461776779,
      0,
      0.14949626923631848,
      0,
      0.19869107687503013,
      0.06906973337898466,
      0.0926473183148406
    ],
    "metadata": {
      "text": "func add(a int, b int) int {\n    return a + b\n}"
    }
  },
  {
    "embedding": [
      0.2247120288749513,
      0,
      0,
      0.21222866666724247,
      0,
      0,
      0.2167570062944623,
      0,
      0.29283218290760354,
      0,
      0,
      0,
      0.05834552245790568,
      0,
      0,
      0,
      0.2255015947278025,
      0,
      0,
      0.04058920797292847,
      0.10105862238819881,
      0,
      0,
      0.12445315899527797,
      0,
      0.17934796131928188,
      0,
      0.03608024993784095,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3001024748964986,
      0.21264695872747202,
      0.043787822971814286,
      0,
      0,
      0,
      0,
      0,
      0.18769504286798086,
      0,
      0,
      0,
      0.32854032446471637,
      0.281498823275447,
      0.0972446753155952,
      0.10493590568766145,
      0,
      0,
      0,
      0.4157708910571023,
      0.06372489282312589,
      0,
      0.21799040431212918,
      0,
      0.2248708993909495,
      0.03441306741794317,
      0.01961948125281452
    ],
    "metadata": {
      "text": "func main() {\n    sum := add(3, 4)\n    fmt.Println(\"Sum:\", sum)\n}\n```"
    }
  },
  {
    "embedding": [
      0.21878651114882783,
      0,
      0,
      0.1332941600008789,
      0,
      0,
      0.16721472269769105,
      0,
      0.26581405475389963,
      0,
      0,
      0,
      0.15658918892566018,
      0,
      0,
      0.023681157856341523,
      0.23265576852199119,
      0,
      0,
      0.13158312416272355,
      0.16615876707979113,
      0,
      0,
      0.03520587030106655,
      0,
      0.12036043419217847,
      0,
      0.14435478088573184,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021795960845448593,
      0,
      0.3327594625783748,
      0.23491395485229652,
      0.017444675561393865,
      0,
      0,
      0,
      0,
      0,
      0.23281696952445047,
      0,
      0,
      0,
      0.311170740124782,
      0.23067596910651286,
      0.0716679751631555,
      0.1355151488912137,
      0,
      0,
      0,
      0.4597745778923796,
      0.027985610782690847,
      0,
      0.11699933070775327,
      0,
      0.20110546724450204,
      0.11960931376070631,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a function that multiplies two numbers and returns the result."
    }
  },
  {
    "embedding": [
      0.249795832894558,
      0,
      0,
      0.24129173907810583,
      0,
      0,
      0.23316894883246148,
      0,
      0.2105196315189664,
      0.004070492048605758,
      0,
      0,
      0.0853214933686848,
      0,
      0,
      0,
      0.3273998084775568,
      0,
      0,
      0.11481057718033505,
      0.1539288607934789,
      0,
      0,
      0.06216471802691524,
      0,
      0.1963121876431702,
      0,
      0.07011530002201057,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05207721881742638,
      0,
      0.3184092175548094,
      0.26628862627973304,
      0.012107014181442994,
      0,
      0,
      0,
      0,
      0,
      0.15808918303845051,
      0,
      0,
      0,
      0.2948765356352394,
      0.21413717111323702,
      0.10020318322011473,
      0.10754794094452173,
      0,
      0,
      0,
      0.3933975238416693,
      0.06892672095673558,
      0,
      0.05613734745618336,
      0,
      0.23566536269454438,
      0.09618411248601383,
      0
    ],
    "metadata": {
      "text": "### Day 2: Advanced Functions\n**Objectives:**\n- Explore variadic functions and named return values."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.20199723233392852,
      0.0188158504787027,
      0.031264921578591454,
      0.14459145914838997,
      0,
      0,
      0.21796437496861898,
      0,
      0.23345398767086792,
      0,
      0,
      0,
      0.034673165857175364,
      0,
      0,
      0,
      0.20164294266140848,
      0,
      0,
      0.010859715889952362,
      0.13302798714872863,
      0,
      0,
      0.1316280355650537,
      0,
      0.1679359432269301,
      0,
      0.07933448116316617,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.28247220950073276,
      0.14639360346273103,
      0.18833866523791823,
      0,
      0,
      0,
      0,
      0,
      0.23536202397667874,
      0,
      0,
      0,
      0.4422472701905325,
      0.17492217541763863,
      0.044466447401049734,
      0.16956971151581204,
      0,
      0,
      0,
      0.41584937528373606,
      0.0849188787704348,
      0,
      0.12356670585410162,
      0,
      0.27578352961112146,
      0.028584765708649575,
      0.046546391616421205
    ],
    "metadata": {
      "text": "// Variadic function to sum numbers.\nfunc sumAll(numbers ...int) (total int) {\n    for _, n := range numbers {\n        total += n\n    }\n    return\n}"
    }
  },
  {
    "embedding": [
      0.26912739981136213,
      0,
      0,
      0.18575813716628187,
      0,
      0,
      0.1677632297766287,
      0,
      0.2653471432209028,
      0.0590894164744214,
      0,
      0,
      0.15818171889817534,
      0,
      0,
      0,
      0.28170663510557853,
      0,
      0,
      0.07697056088542592,
      0.16940631090396313,
      0,
      0,
      0.061708139030522205,
      0,
      0.16564511186077086,
      0,
      0.03526117664663957,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00422322178424016,
      0,
      0.2949515756726754,
      0.22363319630233278,
      0.1018218389399182,
      0,
      0,
      0,
      0,
      0,
      0.1992278368955465,
      0,
      0,
      0,
      0.31758148217141813,
      0.19618373103459222,
      0.06816901306633234,
      0.15087835113525705,
      0,
      0.012796610322922607,
      0,
      0.4485613822331276,
      0.08729247491244918,
      0,
      0.010688425197912084,
      0,
      0.21097804130367767,
      0.10450965724109419,
      0.03382997544124869
    ],
    "metadata": {
      "text": "func main() {\n    fmt.Println(\"Total:\", sumAll(1, 2, 3, 4))\n}\n```"
    }
  },
  {
    "embedding": [
      0.13131076148493165,
      0.07865452795011506,
      0,
      0.1038901485111411,
      0,
      0,
      0.21457079465632098,
      0,
      0.1672537168263461,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03874328620219792,
      0.2827764302792537,
      0,
      0,
      0.09195359412613699,
      0.1404743035394846,
      0,
      0,
      0.1430106786801514,
      0,
      0.1849426552463368,
      0,
      0.13808716509179278,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3057029768868761,
      0.19031671261538086,
      0.20507215458547856,
      0,
      0,
      0,
      0,
      0,
      0.27359290969398015,
      0,
      0,
      0,
      0.3457140697615744,
      0.1908118223757161,
      0.04644930996762338,
      0.11992827811196179,
      0,
      0.1751449698404488,
      0,
      0.4305559364643108,
      0.04066178404486439,
      0,
      0.0030300569593194873,
      0,
      0.25469298367719667,
      0,
      0.08217068561996647
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a variadic function that concatenates multiple strings."
    }
  },
  {
    "embedding": [
      0.2687601269611332,
      0,
      0,
      0.22055314187499578,
      0,
      0,
      0.26043816734547476,
      0,
      0.21649116124547851,
      0,
      0,
      0,
      0.03962831847138752,
      0,
      0,
      0,
      0.27867355877987904,
      0,
      0,
      0.11003873232592581,
      0.15096721906783636,
      0,
      0,
      0.1565247735093476,
      0,
      0.11959650433256269,
      0,
      0.059360899912080066,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.16637219961170577,
      0,
      0.3091403672900492,
      0.17907412463561057,
      0.05292658813320584,
      0,
      0,
      0,
      0,
      0,
      0.2652251598824632,
      0,
      0,
      0,
      0.36315700259312916,
      0.18487091351031218,
      0.11299690895741794,
      0.1552006191177065,
      0,
      0,
      0,
      0.3504042678088722,
      0.09791461164681235,
      0,
      0.05115557453901227,
      0,
      0.19237644345864263,
      0.05457924893184233,
      0.04025531206508107
    ],
    "metadata": {
      "text": "### Day 3: Error Handling\n**Objectives:**\n- Learn Go’s idiomatic error handling with the `error` type."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.1208244057808827,
      0,
      0.0026460521799936466,
      0.20408113683708773,
      0,
      0,
      0.23225607638809753,
      0,
      0.19052842727743996,
      0,
      0,
      0,
      0.027696625634011787,
      0,
      0,
      0,
      0.26249783181335024,
      0,
      0,
      0.12684478532678387,
      0.12613857993659697,
      0,
      0,
      0.2202398508732052,
      0,
      0.24197266884314453,
      0,
      0.08824401656003833,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3060087191183328,
      0.20394991659918255,
      0.14943387057001434,
      0,
      0,
      0,
      0,
      0,
      0.20382632955232152,
      0,
      0,
      0,
      0.3703889948474109,
      0.198734982848979,
      0.13747278918209266,
      0.14542991713314912,
      0,
      0.001669510283085758,
      0,
      0.38229494687633525,
      0.008277172102754577,
      0,
      0.06456062879144159,
      0,
      0.25759889024809923,
      0.01683070062857538,
      0.06411870716338601
    ],
    "metadata": {
      "text": "import (\n    \"errors\"\n    \"fmt\"\n)"
    }
  },
  {
    "embedding": [
      0.14832817972008525,
      0,
      0,
      0.15808015079562782,
      0,
      0,
      0.20382441739678067,
      0,
      0.2624563310177624,
      0,
      0,
      0,
      0.0601158975135131,
      0,
      0,
      0,
      0.32197316118734376,
      0,
      0,
      0.15056646674109528,
      0.15357346862670532,
      0,
      0,
      0.05978858797939351,
      0,
      0.14149146294110668,
      0,
      0.13871218752252848,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04056592099901721,
      0,
      0.2924508088646708,
      0.21057775680020804,
      0.20768807019990596,
      0,
      0,
      0,
      0,
      0,
      0.22722114014374212,
      0,
      0,
      0,
      0.328353895454004,
      0.3261085907212879,
      0.010359416578209681,
      0.0639910318948777,
      0,
      0.035912699805381,
      0,
      0.32828993180070787,
      0.024755010088297398,
      0,
      0.03309355275071438,
      0,
      0.29178173041013494,
      0.07515663052846981,
      0.00286551040005768
    ],
    "metadata": {
      "text": "func divide(a, b float64) (float64, error) {\n    if b == 0 {\n        return 0, errors.New(\"cannot divide by zero\")\n    }\n    return a / b, nil\n}"
    }
  },
  {
    "embedding": [
      0.1977139997069756,
      0,
      0.06395695796939253,
      0.16161141368820237,
      0,
      0,
      0.175357036937879,
      0,
      0.24090516892087838,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2755040396279432,
      0,
      0,
      0.06250607201091114,
      0.19730524390546905,
      0,
      0,
      0.13086821388548733,
      0,
      0.14096644452326137,
      0,
      0.11810063105570405,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3734822431231186,
      0.23088053458331895,
      0.1319199629836107,
      0,
      0,
      0,
      0,
      0,
      0.21279060665910732,
      0,
      0,
      0,
      0.34219182088242045,
      0.2664502354587543,
      0.02347332597779913,
      0.04895877675761179,
      0,
      0,
      0,
      0.36242337145679643,
      0.08630630795060365,
      0,
      0.16325174398776326,
      0,
      0.22806364183561764,
      0.09083127256771577,
      0
    ],
    "metadata": {
      "text": "func main() {\n    result, err := divide(10, 0)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n    } else {\n        fmt.Println(\"Result:\", result)\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.14889635857899747,
      0.06113172875502556,
      0,
      0.13292654522764236,
      0,
      0,
      0.2637927347333538,
      0,
      0.18912303482231818,
      0,
      0,
      0,
      0.09585823851556007,
      0,
      0,
      0,
      0.2627839709587982,
      0,
      0,
      0.030904941348516804,
      0.14932036779868788,
      0,
      0,
      0.0728628015429974,
      0,
      0.22846262790120378,
      0,
      0.07663164001466055,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03139303219753446,
      0,
      0.29797202395528827,
      0.25386389982392304,
      0.14033717415947633,
      0,
      0,
      0,
      0,
      0,
      0.20235682772052588,
      0,
      0,
      0,
      0.36480255790700805,
      0.19491191209300032,
      0.15986916338894036,
      0.08582203345153394,
      0,
      0.04407216778419981,
      0,
      0.4185146302896068,
      0.09150073327715821,
      0,
      0.08849843087516969,
      0,
      0.26357858265268563,
      0.06755865462648315,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Modify the divide function to handle more edge cases."
    }
  },
  {
    "embedding": [
      0.23184080544681807,
      0,
      0,
      0.19306956831198133,
      0,
      0,
      0.2160285895849044,
      0,
      0.2226197905420251,
      0,
      0,
      0,
      0.034519105971501124,
      0,
      0,
      0,
      0.2566053387026314,
      0,
      0,
      0.09969338478815606,
      0.15900487588198198,
      0,
      0,
      0.12530577445617314,
      0,
      0.17505959350736558,
      0,
      0.14064219163892483,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09408068487189737,
      0,
      0.36801329651983306,
      0.20669052191472986,
      0.13024816836713493,
      0,
      0,
      0,
      0,
      0,
      0.2734631666518017,
      0,
      0,
      0,
      0.3421753125831627,
      0.1746105687275999,
      0,
      0.14063591022514146,
      0,
      0,
      0,
      0.37672232602545236,
      0,
      0,
      0.08620102629948892,
      0,
      0.21409569672384376,
      0.018032464445319498,
      0.05237273768564611
    ],
    "metadata": {
      "text": "### Day 4: Using Standard Library Packages\n**Objectives:**\n- Explore and use Go’s standard libraries."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.25745861986826324,
      0,
      0,
      0.2499817682541511,
      0,
      0,
      0.21634857648924036,
      0,
      0.27181558096927894,
      0.0727034447300193,
      0,
      0,
      0.08867732266229766,
      0,
      0,
      0,
      0.15279397876624784,
      0,
      0,
      0.12401242246630755,
      0.10129670539547084,
      0,
      0,
      0.14368878184812814,
      0,
      0.17750050234273593,
      0,
      0.05579143040139744,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09271252290782463,
      0,
      0.32021903197139745,
      0.18887993219814664,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2522786662308447,
      0,
      0,
      0,
      0.3153483727150121,
      0.12099228649299107,
      0.09054699781912269,
      0.16292159083737123,
      0,
      0,
      0,
      0.4395267239157584,
      0.06260209940138604,
      0,
      0,
      0,
      0.21063189053619635,
      0.07842106320331647,
      0.16196379237888606
    ],
    "metadata": {
      "text": "import (\n    \"fmt\"\n    \"strings\"\n)"
    }
  },
  {
    "embedding": [
      0.23887210654018162,
      0,
      0,
      0.17806236932708694,
      0,
      0,
      0.19330961073071729,
      0,
      0.25576990488623425,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3944539500095189,
      0,
      0,
      0.09390683801526792,
      0.0978399963967229,
      0,
      0,
      0.11722822977459497,
      0,
      0.13681346968948813,
      0,
      0.08390660863119548,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.29934913570293326,
      0.2089962330680482,
      0.13568665001096586,
      0,
      0,
      0,
      0,
      0,
      0.18531000626845137,
      0,
      0,
      0,
      0.2862509387346218,
      0.22640899150591884,
      0,
      0.10942844424236675,
      0,
      0,
      0,
      0.4321820392537195,
      0.13472090532932518,
      0,
      0.014122799178476558,
      0,
      0.2421065403374962,
      0,
      0
    ],
    "metadata": {
      "text": "func main() {\n    message := \"hello, world\"\n    upper := strings.ToUpper(message)\n    fmt.Println(\"Uppercase:\", upper)\n}\n```"
    }
  },
  {
    "embedding": [
      0.2851474281962965,
      0.024187817436935464,
      0,
      0.09784359021803353,
      0,
      0,
      0.24046863880596972,
      0,
      0.2870502812387966,
      0,
      0,
      0,
      0.12908420728623787,
      0,
      0,
      0,
      0.3553033606279893,
      0,
      0,
      0,
      0.16039169968530628,
      0,
      0,
      0.08388692969877522,
      0,
      0.1911177990765992,
      0,
      0.15786664226884342,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020961857319694747,
      0,
      0.22866709101568838,
      0.222690082733788,
      0.11422635770043599,
      0,
      0,
      0,
      0,
      0,
      0.22398891581911592,
      0,
      0,
      0,
      0.2872677625382069,
      0.21433146887511378,
      0.037952675868318256,
      0.0725381530100725,
      0,
      0,
      0,
      0.43108509770905107,
      0.10342407561464532,
      0,
      0.10492119536980192,
      0,
      0.15151231327425968,
      0,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Use a standard library package (like `math`) in a simple function."
    }
  },
  {
    "embedding": [
      0.21726793377439144,
      0,
      0,
      0.16608566721900864,
      0,
      0,
      0.28592438820801624,
      0,
      0.24629165575737788,
      0.07823363585702389,
      0,
      0,
      0.027433126382995873,
      0,
      0,
      0,
      0.2693721425430711,
      0,
      0,
      0.053582689224314715,
      0.11897704444344796,
      0,
      0,
      0.2073216222883186,
      0,
      0.18068252678179733,
      0,
      0.05786461519948269,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09829606398623841,
      0,
      0.3064249138563068,
      0.258376269894297,
      0.029077088145131377,
      0,
      0,
      0,
      0,
      0,
      0.1670176421703599,
      0,
      0,
      0,
      0.3288773856160466,
      0.196048803550365,
      0.06342499379054717,
      0.10946444101219907,
      0,
      0,
      0,
      0.4294244973007308,
      0.08101567100181659,
      0,
      0.050324518553200435,
      0,
      0.22115186971960557,
      0,
      0.05738229943319693
    ],
    "metadata": {
      "text": "### Day 5: Building and Organizing Code\n**Objectives:**\n- Learn how to structure a Go project using packages and modules."
    }
  },
  {
    "embedding": [
      0.14465203591276676,
      0.06230780832199945,
      0,
      0.08428029256751184,
      0,
      0,
      0.20327684301576535,
      0,
      0.22785348652671575,
      0,
      0,
      0,
      0.12455931835993754,
      0,
      0,
      0,
      0.3694096295481766,
      0,
      0,
      0.0766701781914272,
      0.21944384460026878,
      0,
      0,
      0.10088040148870159,
      0,
      0.20953350482225455,
      0,
      0.1550536683316061,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.24812275314172946,
      0.18549948134998737,
      0.1471233982334865,
      0,
      0,
      0,
      0,
      0,
      0.18111948953753013,
      0,
      0,
      0,
      0.3064184281885094,
      0.2592114721487479,
      0.040248795505831055,
      0.1202822333452177,
      0,
      0.04408882302264615,
      0,
      0.43760770192328063,
      0,
      0,
      0.1086251085667774,
      0,
      0.23467608627007117,
      0.05295963289312993,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Split a simple program into two files (one for functions, one for `main`) and initialize a module with `go mod init`."
    }
  },
  {
    "embedding": [
      0.18168400424704123,
      0,
      0,
      0.18370040312102168,
      0,
      0,
      0.21200444420699188,
      0,
      0.21414754383174656,
      0.043986169479500785,
      0,
      0,
      0.08288203798987283,
      0,
      0,
      0,
      0.31697385622815116,
      0,
      0,
      0.10416743494633378,
      0.1378288337531799,
      0,
      0,
      0.17824026203109172,
      0,
      0.23003112727455768,
      0,
      0.034500632521419806,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10282240012381995,
      0,
      0.22192655439666642,
      0.12889747288595269,
      0.12206344639045107,
      0,
      0,
      0,
      0,
      0,
      0.20318212771190267,
      0,
      0,
      0,
      0.3500988632216177,
      0.17624341832093415,
      0.14117658319828388,
      0.1761689885741467,
      0,
      0,
      0,
      0.4093031541897257,
      0.16486730357674884,
      0,
      0.11655573636066542,
      0,
      0.21464526431526698,
      0.09929766032485875,
      0.1264722483998796
    ],
    "metadata": {
      "text": "## ||| Week 9: Arrays, Slices, and Maps"
    }
  },
  {
    "embedding": [
      0.28253415160274126,
      0.014895598818850485,
      0,
      0.0805276910188332,
      0,
      0,
      0.2050524377964191,
      0,
      0.16822989014734854,
      0,
      0,
      0,
      0.04892422892992899,
      0,
      0.011707505555283134,
      0.014098066596904126,
      0.26245337441216643,
      0,
      0,
      0.08266604828033343,
      0.2532752880967588,
      0,
      0,
      0.11996739671810834,
      0,
      0.16980363577982,
      0,
      0.18020230007288465,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02539933420357849,
      0,
      0.3274009450864727,
      0.147717290421867,
      0.08164587069638837,
      0,
      0,
      0,
      0,
      0,
      0.25161181587515974,
      0,
      0,
      0,
      0.30752040417373827,
      0.2771880104513414,
      0.07963665348111613,
      0.10328194577559191,
      0,
      0,
      0,
      0.39353028633692216,
      0.010932984715308527,
      0,
      0.14145123977108398,
      0,
      0.24207545839946337,
      0.056491784705393504,
      0
    ],
    "metadata": {
      "text": "### Day 1: Arrays\n**Objectives:**\n- Understand arrays: declaration, initialization, and iteration."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.2664438168473982,
      0,
      0,
      0.1858752778717337,
      0,
      0,
      0.18891888664446674,
      0,
      0.31921908167861757,
      0,
      0,
      0,
      0.108757617642912,
      0,
      0,
      0,
      0.21445582656114065,
      0,
      0,
      0.020012224537640334,
      0.16208336979073326,
      0,
      0,
      0.052301057281545195,
      0,
      0.14419449418092162,
      0,
      0.07080922061509125,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02249806921226901,
      0,
      0.3197459897795356,
      0.26752494141466393,
      0.036654413531935943,
      0,
      0,
      0,
      0,
      0,
      0.22668820465127687,
      0,
      0,
      0,
      0.3596043863470712,
      0.12953888486398926,
      0.13018684491323454,
      0.09919950912432049,
      0,
      0.014250538651010579,
      0,
      0.414838164049721,
      0.10581096728151791,
      0,
      0.09717150111767757,
      0,
      0.16871706446005771,
      0.1450975731242248,
      0.03813849882435803
    ],
    "metadata": {
      "text": "func main() {\n    numbers := [5]int{10, 20, 30, 40, 50}\n    for i := 0; i < len(numbers); i++ {\n        fmt.Println(\"Number:\", numbers[i])\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.15114422286267132,
      0,
      0,
      0.12918050428117678,
      0,
      0,
      0.18252489124585608,
      0,
      0.26985290895898384,
      0.0021157523606990672,
      0,
      0,
      0.08193753705195446,
      0,
      0,
      0,
      0.3237021019043857,
      0,
      0,
      0.09375568297938985,
      0.12856151744998331,
      0,
      0,
      0.04102791690844786,
      0,
      0.18028575937321695,
      0,
      0.13808903245958506,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08008174637865705,
      0,
      0.33571000873566276,
      0.2507989497975808,
      0.11743502775811304,
      0,
      0,
      0,
      0,
      0,
      0.17968277867945825,
      0,
      0,
      0,
      0.30132279008691837,
      0.21637623054104269,
      0.11630269429377071,
      0.10037070406285378,
      0,
      0.06836764034682259,
      0,
      0.44969659828146397,
      0.004315486381532652,
      0,
      0.11786850210007331,
      0,
      0.21366349482902172,
      0.07637717911165669,
      0.05150985866478213
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a program that finds the maximum number in an array."
    }
  },
  {
    "embedding": [
      0.24164746541092968,
      0.051327581820621894,
      0,
      0.12898098678633899,
      0,
      0,
      0.16578831420965975,
      0,
      0.3720393720231269,
      0,
      0,
      0,
      0.13071175445286176,
      0,
      0,
      0,
      0.30801630014160597,
      0,
      0,
      0.02985694992572842,
      0.18537044827484736,
      0,
      0,
      0.05102727668301361,
      0,
      0.21153410913569975,
      0,
      0.13173992250311836,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.21641518246431232,
      0.25427154728045087,
      0.14080022067074294,
      0,
      0,
      0,
      0,
      0,
      0.2095465573569068,
      0,
      0,
      0,
      0.342880110096323,
      0.13519992660851674,
      0.04066073479459656,
      0.1574599456788193,
      0,
      0.1231816388132906,
      0,
      0.36633992624865047,
      0.05166823993514811,
      0,
      0.14949572612571752,
      0,
      0.15443172088832613,
      0.09356595260658045,
      0
    ],
    "metadata": {
      "text": "### Day 2: Slices\n**Objectives:**\n- Learn about slices as dynamic arrays."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.23986237524864892,
      0,
      0,
      0.1719028489451068,
      0,
      0,
      0.16726501209877517,
      0,
      0.18840754508575894,
      0.020724264089207804,
      0,
      0,
      0.12724183400986874,
      0,
      0,
      0,
      0.32317103069766834,
      0,
      0,
      0.04296291644319734,
      0.1825396952913991,
      0,
      0,
      0.031818803160913095,
      0,
      0.17722154844073634,
      0,
      0.11274625018266643,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.27011588944556464,
      0.2307877924448934,
      0.10845565191981064,
      0,
      0,
      0,
      0,
      0,
      0.2318964598728382,
      0,
      0,
      0,
      0.38197577143677425,
      0.2598765239152728,
      0.08540106645440057,
      0.08909202563683415,
      0,
      0,
      0,
      0.368903597205538,
      0.11825269145310376,
      0,
      0.1606314918828671,
      0,
      0.2041723292972438,
      0.10042003354532247,
      0
    ],
    "metadata": {
      "text": "func main() {\n    numbers := []int{1, 2, 3}\n    numbers = append(numbers, 4, 5)\n    fmt.Println(\"Slice:\", numbers)\n}\n```"
    }
  },
  {
    "embedding": [
      0.27033971970777715,
      0,
      0,
      0.21509372140015426,
      0,
      0,
      0.1981206573784125,
      0,
      0.2611712812452493,
      0,
      0,
      0,
      0.06759714611959053,
      0,
      0,
      0,
      0.2803969123305183,
      0,
      0,
      0.17485092550080317,
      0.19523629345489343,
      0,
      0,
      0.09628384925460792,
      0,
      0.17376972104529217,
      0,
      0.12509905065581822,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.12425206065434037,
      0,
      0.29957092650598227,
      0.18470413313842868,
      0.09658314273556408,
      0,
      0,
      0,
      0,
      0,
      0.18644179220630092,
      0,
      0,
      0,
      0.33388125203610836,
      0.14844706034378194,
      0.04030558222566636,
      0.07609430307282218,
      0,
      0,
      0,
      0.4292371394712523,
      0.06436222338590333,
      0,
      0.12364774325953827,
      0,
      0.15396561938654604,
      0.08325001328085868,
      0.08697774562974236
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a slice of strings and append new elements to it."
    }
  },
  {
    "embedding": [
      0.26830817249689576,
      0,
      0,
      0.13444109614547348,
      0,
      0,
      0.20152875893896013,
      0,
      0.30576923724880634,
      0,
      0,
      0,
      0.07910113880934316,
      0,
      0,
      0,
      0.33805434086392566,
      0,
      0,
      0,
      0.21018297356033183,
      0,
      0,
      0.09300937631190401,
      0,
      0.16337512910090987,
      0,
      0.07941388934668915,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005559052319093072,
      0,
      0.27261710423586105,
      0.1838982444695274,
      0.024496437372430586,
      0,
      0,
      0,
      0,
      0,
      0.23612758325719013,
      0,
      0,
      0,
      0.36714400529351465,
      0.19038533937455787,
      0.01590443457588577,
      0.10323263626119893,
      0,
      0,
      0,
      0.42719185960708955,
      0.03814560999905329,
      0,
      0.0347667401036496,
      0,
      0.18333012510037205,
      0.0649659356949186,
      0
    ],
    "metadata": {
      "text": "### Day 3: Slice Operations\n**Objectives:**\n- Practice slicing, copying, and modifying slices."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.27129233148362797,
      0,
      0,
      0.1598269238655925,
      0,
      0,
      0.2785879528552555,
      0,
      0.25810116957980683,
      0.05268993550102012,
      0,
      0,
      0.07404341510495129,
      0,
      0,
      0,
      0.25657620365123746,
      0,
      0,
      0,
      0.14733849379137642,
      0,
      0,
      0.003305691767065594,
      0,
      0.179756666631727,
      0,
      0.09416066533603021,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02108401256699778,
      0,
      0.3429020985062817,
      0.23958387731339195,
      0.09578735281850179,
      0,
      0,
      0,
      0,
      0,
      0.18017952916653845,
      0,
      0,
      0,
      0.35073310257799867,
      0.15133147037698588,
      0.055778900941656905,
      0.15436519867257298,
      0,
      0.01223558759540273,
      0,
      0.429446419846364,
      0.08135843524526289,
      0,
      0.051281110387177455,
      0,
      0.17663982722456523,
      0.06851331653142556,
      0
    ],
    "metadata": {
      "text": "func main() {\n    numbers := []int{10, 20, 30, 40, 50}\n    subSlice := numbers[1:4]\n    fmt.Println(\"Sub-slice:\", subSlice)\n}\n```"
    }
  },
  {
    "embedding": [
      0.07725242967416074,
      0.04066369175816175,
      0,
      0.10097650769241308,
      0,
      0,
      0.22322640695896465,
      0,
      0.20616330029641455,
      0,
      0,
      0,
      0.1404490938652441,
      0,
      0,
      0,
      0.2611934617521169,
      0,
      0,
      0.06966671153666106,
      0.09882681006098344,
      0.0014143218446039738,
      0,
      0.10608962025379227,
      0,
      0.2975265090587021,
      0,
      0.090105442163872,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04890840486521872,
      0,
      0.2504400502351163,
      0.22355041012519028,
      0.19363408397447213,
      0,
      0,
      0,
      0,
      0,
      0.18598807828990158,
      0,
      0,
      0,
      0.3247288784431505,
      0.26529443454329,
      0.22558206088763458,
      0.09992909408694714,
      0,
      0.0897363812090645,
      0,
      0.42561148149075295,
      0.12551186129902875,
      0,
      0.0626607200264718,
      0,
      0.2002089958064098,
      0.05373550727392731,
      0.06048495029801124
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a program that creates a copy of a slice and modifies the copy without affecting the original."
    }
  },
  {
    "embedding": [
      0.20594905069844296,
      0,
      0,
      0.22118743220858939,
      0,
      0,
      0.2833677568418433,
      0,
      0.22665233937945378,
      0,
      0,
      0,
      0.08181219332047139,
      0,
      0,
      0,
      0.26945426812981965,
      0,
      0,
      0.0544543861656447,
      0.14569749272119192,
      0,
      0,
      0.10204585632395786,
      0,
      0.18834413383907136,
      0,
      0.10734656231148537,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.11268992400733467,
      0,
      0.2501620421864161,
      0.24507548283319205,
      0.153037927117422,
      0,
      0,
      0,
      0,
      0,
      0.18671222555367045,
      0,
      0,
      0,
      0.3671963519000414,
      0.1827119593730956,
      0.04818532716935782,
      0.10351175390811555,
      0,
      0.002832089966964161,
      0,
      0.41581350567744985,
      0,
      0,
      0.1368712274127324,
      0,
      0.2144993603187669,
      0.05966956619986525,
      0
    ],
    "metadata": {
      "text": "### Day 4: Maps\n**Objectives:**\n- Introduce maps for key-value storage."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.26146773976160165,
      0,
      0,
      0.23590662889544423,
      0,
      0,
      0.22902371181772976,
      0,
      0.27213245589137347,
      0.03776555207843984,
      0,
      0,
      0.04512192595382441,
      0,
      0,
      0,
      0.2752499784518707,
      0,
      0,
      0.04163785582727445,
      0.17570314341178772,
      0,
      0,
      0.1020991907797144,
      0,
      0.20464531575593697,
      0,
      0.06776997770354098,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09365539887068715,
      0,
      0.2968150663542349,
      0.221198909630216,
      0.08076047161008959,
      0,
      0,
      0,
      0,
      0,
      0.16622353747930474,
      0,
      0,
      0,
      0.3209195898824699,
      0.18295139641448493,
      0.05936759404347212,
      0.13948617588596748,
      0,
      0,
      0,
      0.4123208840212425,
      0.08986040487734415,
      0,
      0.15645515058540427,
      0,
      0.16962008576482718,
      0.10010925236381213,
      0
    ],
    "metadata": {
      "text": "func main() {\n    scores := map[string]int{\n        \"Alice\": 90,\n        \"Bob\":   85,\n    }\n    scores[\"Charlie\"] = 95\n    fmt.Println(\"Scores:\", scores)\n}\n```"
    }
  },
  {
    "embedding": [
      0.22745936451351262,
      0,
      0,
      0.23770279227409769,
      0,
      0,
      0.20030628421209395,
      0,
      0.2715827973665805,
      0,
      0,
      0,
      0.0863639598993343,
      0,
      0,
      0,
      0.33158531400517466,
      0,
      0,
      0.13953449394752537,
      0.11806291249101365,
      0,
      0,
      0,
      0,
      0.16566922005584228,
      0,
      0.0802062930432925,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06335419538785736,
      0,
      0.23682507522685228,
      0.21565737782016253,
      0.12907036844234612,
      0,
      0,
      0,
      0,
      0,
      0.21880958482330168,
      0,
      0,
      0,
      0.35303230330956037,
      0.16770297146317936,
      0,
      0.11306882562170002,
      0,
      0,
      0,
      0.40456805643521615,
      0.104507453169978,
      0,
      0.21013313748257403,
      0,
      0.17762866095031798,
      0.07870042721265123,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a map that stores product names and their prices, then print each entry."
    }
  },
  {
    "embedding": [
      0.2537368494711167,
      0.0006729792243294106,
      0,
      0.15036270552368478,
      0,
      0,
      0.2889028449665047,
      0,
      0.14627430254912616,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.31196235006350853,
      0,
      0,
      0.08704846567946442,
      0.1123698420486948,
      0,
      0,
      0.17369336648648745,
      0,
      0.18822578784347183,
      0,
      0.02799557103041463,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02587598100143632,
      0,
      0.24725043402084074,
      0.2234646277045109,
      0.09427845166585483,
      0,
      0,
      0,
      0,
      0,
      0.1385773977518347,
      0,
      0,
      0,
      0.25498594912560824,
      0.3265729379319524,
      0.11519626632134004,
      0.07236148022053332,
      0,
      0,
      0,
      0.4152310788804743,
      0.19603025680201597,
      0,
      0.07517856038062683,
      0,
      0.2731545023789961,
      0.055904249597932346,
      0
    ],
    "metadata": {
      "text": "### Day 5: Review and Mini Project\n**Objectives:**\n- Combine arrays, slices, and maps into a small project."
    }
  },
  {
    "embedding": [
      0.25417029573385924,
      0,
      0,
      0.1320108983337594,
      0,
      0,
      0.22527095704501815,
      0,
      0.25506278721189735,
      0,
      0,
      0,
      0.07807973278127874,
      0,
      0,
      0,
      0.21692203962557335,
      0,
      0,
      0,
      0.20576444623798212,
      0,
      0,
      0.10254688518518669,
      0,
      0.22248530716585677,
      0,
      0.08811919958338833,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06746871305901343,
      0,
      0.308504541094158,
      0.15369128879228644,
      0.13241199038323323,
      0,
      0,
      0,
      0,
      0,
      0.21764542926785208,
      0,
      0,
      0,
      0.33381123485876324,
      0.20174177766999057,
      0.07039412924967628,
      0.10255916295355048,
      0,
      0,
      0,
      0.48642479176857145,
      0.05052605626655925,
      0,
      0.08887109342184198,
      0,
      0.18942473750750136,
      0.00998192370643863,
      0
    ],
    "metadata": {
      "text": "**Project Example:**\n- Write a program that stores student names and scores, calculates the average score, and prints the details."
    }
  },
  {
    "embedding": [
      0.23486479438731603,
      0,
      0,
      0.1277210165168029,
      0,
      0,
      0.20503904049888674,
      0,
      0.22726159262554865,
      0.03039679357687766,
      0,
      0,
      0.09433689470444095,
      0,
      0,
      0,
      0.26691846841634115,
      0,
      0,
      0.033658696217523244,
      0.1611918042671289,
      0,
      0,
      0.16778936142507622,
      0,
      0.16143183554776316,
      0,
      0.09971261645818692,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.030254179796349038,
      0,
      0.37358630472770843,
      0.21632509633435343,
      0.06955919131381076,
      0,
      0,
      0,
      0,
      0,
      0.16742675118662173,
      0,
      0,
      0,
      0.26800814164119996,
      0.1788775260666894,
      0.16894779055106393,
      0.07033165093331895,
      0,
      0.05058079427863102,
      0,
      0.5104112389908437,
      0.08695310210207088,
      0,
      0.09336445223856686,
      0,
      0.15620002275167832,
      0.005123741461338476,
      0.03537792660478375
    ],
    "metadata": {
      "text": "**Exercises:**\n- Enhance the program by adding functions to update and delete student records."
    }
  },
  {
    "embedding": [
      0.21796511841336946,
      0,
      0,
      0.17489983805354523,
      0,
      0,
      0.19098056070363978,
      0,
      0.23231758288064666,
      0.016356119078528384,
      0,
      0,
      0.07609826175532379,
      0,
      0,
      0,
      0.29821001818042936,
      0,
      0,
      0.1031072854172664,
      0.157189087607078,
      0,
      0,
      0.11030963043037721,
      0,
      0.21678565247246442,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.051055158819847,
      0,
      0.28964416355484424,
      0.1913617297631342,
      0.11616298691712393,
      0,
      0,
      0,
      0,
      0,
      0.23338209409482008,
      0,
      0,
      0,
      0.34688127401603425,
      0.24313878653870455,
      0.10899316887652476,
      0.12526734324948532,
      0,
      0,
      0,
      0.3969747510130529,
      0.13502322872218894,
      0,
      0.13437147331362548,
      0,
      0.20627150801593935,
      0.07707312958298769,
      0.03879989186470736
    ],
    "metadata": {
      "text": "## ||| Week 10: Pointers, Memory, and Interfaces"
    }
  },
  {
    "embedding": [
      0.24399317959182384,
      0.047783158398456635,
      0,
      0.052665648428293396,
      0,
      0,
      0.2337770270507367,
      0,
      0.19436024718188097,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.30623415887498695,
      0,
      0,
      0.03427011119864808,
      0.14161182339374837,
      0,
      0,
      0.20158522878936688,
      0,
      0.1796202297766556,
      0,
      0.10064297208692015,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003200158395190556,
      0,
      0.3604209733318396,
      0.19880670916779117,
      0.17284753316749146,
      0,
      0,
      0,
      0,
      0,
      0.2628844902748843,
      0,
      0,
      0,
      0.3752053417521645,
      0.22263046679448253,
      0.06395573276216165,
      0.1221862319697859,
      0,
      0,
      0,
      0.3466327592209162,
      0.07853451487786717,
      0,
      0.019213642444719417,
      0,
      0.20104386625171425,
      0,
      0.007141378984887231
    ],
    "metadata": {
      "text": "### Day 1: Pointers Basics\n**Objectives:**\n- Understand pointers, the address-of operator, and dereferencing."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.1600438892208223,
      0.01393026604740971,
      0,
      0.14497485359846196,
      0,
      0,
      0.1926433561479192,
      0,
      0.22358517234255967,
      0,
      0,
      0,
      0.011786956720287315,
      0,
      0,
      0,
      0.2826275419096578,
      0,
      0,
      0.07324115111662409,
      0.16475794677384864,
      0,
      0,
      0.19823088942541112,
      0,
      0.1322039767187608,
      0,
      0.09920731366132994,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.33910765873863696,
      0.20583599231800645,
      0.10514326361808335,
      0,
      0,
      0,
      0,
      0,
      0.1733364647252117,
      0,
      0,
      0,
      0.34228226351976077,
      0.2931030378847096,
      0.1218620224591204,
      0.12873452476289082,
      0,
      0,
      0,
      0.4105778088214688,
      0.04363872934846037,
      0,
      0.10897742126050412,
      0,
      0.2521296751028036,
      0.08011473697962544,
      0.04043961826814255
    ],
    "metadata": {
      "text": "func main() {\n    x := 10\n    p := &x\n    fmt.Println(\"Value of x:\", x)\n    fmt.Println(\"Address of x:\", p)\n    fmt.Println(\"Dereferenced value:\", *p)\n}\n```"
    }
  },
  {
    "embedding": [
      0.1807350173348004,
      0.010255328181367946,
      0,
      0.1836665050859119,
      0,
      0,
      0.19139321040513774,
      0,
      0.19964291828480196,
      0,
      0,
      0,
      0.10820388271864102,
      0,
      0,
      0,
      0.33146456904986116,
      0,
      0,
      0.11982404596463647,
      0.14940465285073173,
      0,
      0,
      0.10311430254028905,
      0,
      0.17023022411849337,
      0,
      0.11724950259102179,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026158094022417627,
      0,
      0.25613781323059975,
      0.1808668602347564,
      0.04066252145184946,
      0,
      0,
      0,
      0,
      0,
      0.24691759759399542,
      0,
      0,
      0,
      0.3800756761186512,
      0.3072678734470863,
      0.1517295338035914,
      0.11495620201597148,
      0,
      0,
      0,
      0.383765346199531,
      0.08711021418444478,
      0,
      0.06587864873442367,
      0,
      0.20592125804175,
      0.043948929201987015,
      0.07155823687234895
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a program that demonstrates pointer usage with basic variables."
    }
  },
  {
    "embedding": [
      0.15958152944930454,
      0,
      0,
      0.13124957560614728,
      0,
      0,
      0.21744456390956965,
      0,
      0.24927946435135168,
      0.0049608509301043045,
      0,
      0,
      0.05128468831837243,
      0,
      0,
      0,
      0.3766413750750386,
      0,
      0,
      0.07742294348037038,
      0.1648483461025936,
      0,
      0,
      0.15893171931270642,
      0,
      0.16063625612672108,
      0,
      0.08872296490136289,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020184219137696423,
      0,
      0.34769479962826594,
      0.24924046373760483,
      0.09701247859605716,
      0,
      0,
      0,
      0,
      0,
      0.21782894869189376,
      0,
      0,
      0,
      0.36484403417322925,
      0.22821100701131497,
      0.06625151771632663,
      0.09415435609549003,
      0,
      0,
      0,
      0.3586225488003647,
      0.07439180276381932,
      0,
      0.042232338237570874,
      0,
      0.1860852552447358,
      0.03643476132669254,
      0.025642428994113047
    ],
    "metadata": {
      "text": "### Day 2: Pointers in Functions\n**Objectives:**\n- Pass pointers to functions to modify values."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.1663719334903623,
      0,
      0,
      0.26888106504795906,
      0,
      0,
      0.2810413249817459,
      0,
      0.19627243966176577,
      0.023151040234415766,
      0,
      0,
      0.042522154958952035,
      0,
      0,
      0,
      0.2498769850140581,
      0,
      0,
      0.09155925928861987,
      0.1118209766789004,
      0,
      0,
      0.1616130616528763,
      0,
      0.1798481573538072,
      0,
      0.036576004332572055,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03993778308482561,
      0,
      0.31094508013858996,
      0.25627401826087814,
      0.08681250198118072,
      0,
      0,
      0,
      0,
      0,
      0.12341858813747879,
      0,
      0,
      0,
      0.34198981191044525,
      0.1772987172096453,
      0.17352074925793684,
      0.08274402347512597,
      0,
      0,
      0,
      0.42545368608924017,
      0.014867972357717522,
      0,
      0.08462795553519474,
      0,
      0.2572738867344442,
      0.0676345645805203,
      0.0762358525891538
    ],
    "metadata": {
      "text": "func increment(n *int) {\n    *n++\n}"
    }
  },
  {
    "embedding": [
      0.18959495774853777,
      0,
      0,
      0.1405382988935504,
      0,
      0,
      0.19219256306363616,
      0,
      0.26967819283246586,
      0,
      0,
      0,
      0.1518266462534033,
      0,
      0,
      0,
      0.3115398521692213,
      0,
      0,
      0.005248818842073029,
      0.16443497871154913,
      0,
      0,
      0,
      0,
      0.1731281915602686,
      0,
      0.060702808805329425,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.25646382248544974,
      0.2002133666416336,
      0.08391200473627751,
      0,
      0,
      0,
      0,
      0,
      0.19552144984108638,
      0,
      0,
      0,
      0.37394825605559956,
      0.22755522586860968,
      0.057994355589658465,
      0.07206199501997707,
      0,
      0,
      0,
      0.47484263261659515,
      0.15394330141228332,
      0,
      0.13318802522336,
      0,
      0.16870805214982587,
      0.08441552611726053,
      0
    ],
    "metadata": {
      "text": "func main() {\n    value := 5\n    increment(&value)\n    fmt.Println(\"Incremented value:\", value)\n}\n```"
    }
  },
  {
    "embedding": [
      0.19923813421471523,
      0,
      0,
      0.09539855667209644,
      0,
      0,
      0.24544777047751506,
      0,
      0.30702557112791184,
      0.004354049878622693,
      0,
      0,
      0.1152742320300393,
      0,
      0,
      0,
      0.3253352076223454,
      0,
      0,
      0.02259579527950168,
      0.17408179423915282,
      0,
      0,
      0.12341848880591279,
      0,
      0.1754800988626956,
      0,
      0.08683776327435033,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.30762598602418534,
      0.2748843842303345,
      0.13390477362350572,
      0,
      0,
      0,
      0,
      0,
      0.16182459258854878,
      0,
      0,
      0,
      0.29499203727505985,
      0.1432931421288994,
      0.11139760733610302,
      0.09396888266303952,
      0,
      0,
      0,
      0.4521744330569904,
      0.09209624250283949,
      0,
      0.13030747352676367,
      0,
      0.13779560305513675,
      0.0338507951277432,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a function that swaps two integer values using pointers."
    }
  },
  {
    "embedding": [
      0.22315580197019347,
      0.0007770449237012918,
      0,
      0.2122286591416605,
      0,
      0,
      0.1958927483144708,
      0,
      0.29584400394634724,
      0.04380949418720553,
      0,
      0,
      0.08356782913869094,
      0,
      0,
      0,
      0.31662397666044334,
      0,
      0,
      0.09056404791837575,
      0.14414110845924508,
      0,
      0,
      0.0498430184023514,
      0,
      0.16445170117421767,
      0,
      0.14709931208646812,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06127141894490796,
      0,
      0.21626514580036027,
      0.22010679472936792,
      0.10515599854220355,
      0,
      0,
      0,
      0,
      0,
      0.2364989662725822,
      0,
      0,
      0,
      0.3481468111656091,
      0.24305524563793163,
      0.13825164916414937,
      0.13436791365399048,
      0,
      0,
      0,
      0.4025219271464637,
      0,
      0,
      0.04152724660610591,
      0,
      0.1881835352724564,
      0.08503323984184188,
      0.012628306039618202
    ],
    "metadata": {
      "text": "### Day 3: Introduction to Memory Management\n**Objectives:**\n- Learn about memory allocation using `new` and `make`.\n- Understand garbage collection at a high level."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.21185179283313493,
      0.004978672065409976,
      0,
      0.17198956732276216,
      0,
      0,
      0.22702933364527544,
      0,
      0.22425451892259396,
      0.02360609740187121,
      0,
      0,
      0.151179594724297,
      0,
      0,
      0,
      0.23206405973484603,
      0,
      0,
      0.03450221244593258,
      0.135410287391857,
      0,
      0,
      0.12604481312443538,
      0,
      0.2381543410833103,
      0,
      0.06858759077893802,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004292605101928576,
      0,
      0.2615623869767687,
      0.22638022288878218,
      0.08485997197753865,
      0,
      0,
      0,
      0,
      0,
      0.19005503048441733,
      0,
      0,
      0,
      0.35821467227214066,
      0.24133487979962853,
      0.0996460343776828,
      0.14153077603411165,
      0,
      0,
      0,
      0.42858586528675846,
      0.13879665215282705,
      0,
      0.10688957391962332,
      0,
      0.22698995229774396,
      0.06446230769452406,
      0
    ],
    "metadata": {
      "text": "func main() {\n    // Using new to allocate a pointer to an int\n    p := new(int)\n    *p = 100\n    fmt.Println(\"Value from new:\", *p)"
    }
  },
  {
    "embedding": [
      0.2290915927298431,
      0,
      0,
      0.14325771120646622,
      0,
      0,
      0.24810430327708333,
      0,
      0.2708297066250956,
      0,
      0,
      0,
      0.12433383614730936,
      0,
      0,
      0,
      0.29610628240637094,
      0,
      0,
      0.08622861308402661,
      0.18999528508899027,
      0,
      0,
      0.07189512136445904,
      0,
      0.1861480750282545,
      0,
      0.07365474102339269,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03159308500114702,
      0,
      0.25554219952670354,
      0.1850525337779787,
      0.1611452144951592,
      0,
      0,
      0,
      0,
      0,
      0.24278935163326487,
      0,
      0,
      0,
      0.3092611621215724,
      0.1443014269101937,
      0.027734767993889027,
      0.14530508666181874,
      0,
      0,
      0,
      0.4717184822937644,
      0.07508206163086852,
      0,
      0.09086662158871962,
      0,
      0.19478392102940487,
      0.0448687078045922,
      0
    ],
    "metadata": {
      "text": "// Using make to allocate a slice\n    s := make([]int, 3)\n    fmt.Println(\"Slice allocated with make:\", s)\n}\n```"
    }
  },
  {
    "embedding": [
      0.1879063712434646,
      0.09653471104738377,
      0,
      0.12317481964984933,
      0,
      0,
      0.23652130964608042,
      0,
      0.22111251193137216,
      0,
      0,
      0,
      0.11366518200279846,
      0,
      0,
      0,
      0.3402769601124601,
      0,
      0,
      0.05220888386031658,
      0.08243261339545639,
      0,
      0,
      0.07805790253924665,
      0,
      0.2239901527063036,
      0,
      0.09650950029840544,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.038403732864891904,
      0,
      0.2530711077961932,
      0.27855893103312257,
      0.14443282055097817,
      0,
      0,
      0,
      0,
      0,
      0.12229353350817151,
      0,
      0,
      0,
      0.3488965473290259,
      0.19397970993503888,
      0.1224315469801907,
      0.08349944464583751,
      0,
      0.07494165046707028,
      0,
      0.4114837862572122,
      0.16053082134968996,
      0,
      0.08322883387494401,
      0,
      0.24042427801278926,
      0.07663640968004153,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a program that uses both `new` and `make` to allocate different types."
    }
  },
  {
    "embedding": [
      0.16023398911353826,
      0,
      0,
      0.12988976050413098,
      0,
      0,
      0.15651347212259692,
      0,
      0.15738845307330235,
      0,
      0,
      0,
      0.07404629971193569,
      0,
      0.00978295079210927,
      0,
      0.31170352125499806,
      0,
      0,
      0.1063009023092428,
      0.24681567623901352,
      0,
      0,
      0.21477133773477536,
      0,
      0.19764259369834586,
      0,
      0.06603863873975505,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.30824033618578767,
      0.18071174858982234,
      0.1410070263857974,
      0,
      0,
      0,
      0,
      0,
      0.23549369892952102,
      0,
      0,
      0,
      0.34859711995381376,
      0.28029733996799006,
      0.11491502508363385,
      0.03590149798680071,
      0,
      0,
      0,
      0.3975741646166259,
      0.09024509221139382,
      0,
      0.1082615039342874,
      0,
      0.2073014810983053,
      0.01098288437045996,
      0.07117363827920165
    ],
    "metadata": {
      "text": "### Day 4: Interfaces Basics\n**Objectives:**\n- Introduce interfaces and how they provide abstraction."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.13327733623759172,
      0,
      0,
      0.1211254494421681,
      0,
      0,
      0.2159350973861147,
      0,
      0.19225062287223843,
      0,
      0,
      0,
      0.13866690157488615,
      0,
      0,
      0,
      0.2986501970162124,
      0,
      0,
      0.06058496702235505,
      0.13049843808833986,
      0,
      0,
      0.15974610422963734,
      0,
      0.2087576818965089,
      0,
      0.08578923304562253,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.33387500391750924,
      0.20865958259430575,
      0.1405298562681064,
      0,
      0,
      0,
      0,
      0,
      0.23476768643631354,
      0,
      0,
      0,
      0.32051602679890834,
      0.21719415172648296,
      0.06043248556800392,
      0.13297588741657432,
      0,
      0.02409959920925965,
      0,
      0.47043453077893727,
      0.09412608547196198,
      0,
      0.10925740346843699,
      0,
      0.1850169984031155,
      0.007458437063770745,
      0.017626689549360693
    ],
    "metadata": {
      "text": "type Greeter interface {\n    Greet() string\n}"
    }
  },
  {
    "embedding": [
      0.27441881544562013,
      0,
      0,
      0.14476814787440676,
      0,
      0,
      0.14433829124720515,
      0,
      0.25503004629217335,
      0,
      0,
      0,
      0.01399464594784495,
      0,
      0,
      0.001464348219598393,
      0.26031525277944856,
      0,
      0,
      0.06600288426713594,
      0.18282647036384508,
      0,
      0,
      0.1633364433857956,
      0,
      0.09142737920461076,
      0,
      0.10531816767210525,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.35537080613589045,
      0.1811311386417155,
      0.10246991705632026,
      0,
      0,
      0,
      0,
      0,
      0.2627069489563306,
      0,
      0,
      0,
      0.3526596076198662,
      0.1957325039793481,
      0.026854210913309345,
      0.15602014543993833,
      0,
      0.0034936637437006967,
      0,
      0.37835102972249124,
      0.02330456965116821,
      0,
      0.057654955672548115,
      0,
      0.29117849418387887,
      0.06396292793529032,
      0.0610621299212269
    ],
    "metadata": {
      "text": "type Person struct {\n    Name string\n}"
    }
  },
  {
    "embedding": [
      0.20068278809054943,
      0.007614614622024382,
      0,
      0.19616128915009132,
      0,
      0,
      0.2396899487156399,
      0,
      0.1885352712829327,
      0,
      0,
      0,
      0.018503259981073692,
      0,
      0,
      0.03032746579694358,
      0.28039440253535663,
      0,
      0,
      0.09805743288854836,
      0.12701751135445077,
      0,
      0,
      0.18548680329404219,
      0,
      0.16480864874729542,
      0,
      0.11660807572007019,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009991837322118922,
      0,
      0.33081553439351885,
      0.2430501636320836,
      0.08130090224528096,
      0,
      0,
      0,
      0,
      0,
      0.2155600904963125,
      0,
      0,
      0,
      0.3444182416766757,
      0.27775803513137104,
      0.12874576778170796,
      0.03649265987646217,
      0,
      0,
      0,
      0.36095853019295093,
      0.006524382947309868,
      0,
      0.09907625967757253,
      0,
      0.2619863662725775,
      0.056925107280808566,
      0
    ],
    "metadata": {
      "text": "func (p Person) Greet() string {\n    return \"Hello, \" + p.Name\n}"
    }
  },
  {
    "embedding": [
      0.24862317032875,
      0,
      0,
      0.08848701653021905,
      0,
      0,
      0.23553050490378757,
      0,
      0.32074675749358766,
      0.04383237564769899,
      0,
      0,
      0.030477202885895484,
      0,
      0,
      0,
      0.2688526257197219,
      0,
      0,
      0,
      0.11082566489942017,
      0,
      0,
      0.16708726653317663,
      0,
      0.1283759628798637,
      0,
      0.054286151518035654,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.045791172382399825,
      0,
      0.31992770776948765,
      0.3354446989685419,
      0.07641417140037941,
      0,
      0,
      0,
      0,
      0,
      0.18109781039158,
      0,
      0,
      0,
      0.3752783202204535,
      0.19436998059179794,
      0.16347025000241727,
      0.09759787915195964,
      0,
      0,
      0,
      0.33084949702464506,
      0.1101686428955554,
      0,
      0.05746953305043575,
      0,
      0.18640128520573435,
      0.08441799548232475,
      0
    ],
    "metadata": {
      "text": "func main() {\n    var g Greeter = Person{Name: \"Alice\"}\n    fmt.Println(g.Greet())\n}\n```"
    }
  },
  {
    "embedding": [
      0.24712367860424134,
      0,
      0,
      0.1739461009755995,
      0,
      0,
      0.27078286202538604,
      0,
      0.29758477093721497,
      0.03784836002137991,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2869146947761091,
      0,
      0,
      0.11231637086165105,
      0.10510792999280356,
      0,
      0,
      0.09027715384136835,
      0,
      0.2008561411940484,
      0,
      0.10733904848442627,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06498120277136456,
      0,
      0.31859254859801656,
      0.19693766487682487,
      0.14704413152461454,
      0,
      0,
      0,
      0,
      0,
      0.20554499193592865,
      0,
      0,
      0,
      0.30018071491186327,
      0.21582304133350894,
      0,
      0.14718177374954916,
      0,
      0.0034716974528144844,
      0,
      0.4196894269769491,
      0.06074278673404368,
      0,
      0.052791001037582386,
      0,
      0.16626422546558953,
      0.033732217842298344,
      0.0349803402377409
    ],
    "metadata": {
      "text": "**Exercises:**\n- Define an interface for a simple shape (e.g., `Area() float64`) and implement it for a circle."
    }
  },
  {
    "embedding": [
      0.18794734055365853,
      0,
      0,
      0.30411846160191314,
      0,
      0,
      0.23009558366709068,
      0,
      0.19148410345177708,
      0.03746578457461322,
      0,
      0,
      0.09835586374257568,
      0,
      0,
      0,
      0.29690651968785214,
      0,
      0,
      0.17347541095582023,
      0.11831509008351895,
      0,
      0,
      0.10992492797707185,
      0,
      0.219384464264375,
      0,
      0.031102487422056836,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01111248065923806,
      0,
      0.2755483437983633,
      0.2403113731617283,
      0.042442568766001845,
      0,
      0,
      0,
      0,
      0,
      0.17253577496578562,
      0,
      0,
      0,
      0.30403363512917175,
      0.20317630003880316,
      0.014954597493025863,
      0.11542542568370116,
      0,
      0,
      0,
      0.42295137328577137,
      0.11529531707252286,
      0,
      0.09811241361621235,
      0,
      0.22261809917833492,
      0.11863656552401144,
      0
    ],
    "metadata": {
      "text": "### Day 5: Interfaces in Depth\n**Objectives:**\n- Explore type assertions and interface switching."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.24509831840979207,
      0,
      0,
      0.2218833798697229,
      0,
      0,
      0.1756793576457939,
      0,
      0.1992415079910462,
      0.003875641034834978,
      0,
      0,
      0.04327649938963964,
      0,
      0,
      0,
      0.36325023265358203,
      0,
      0,
      0.10893273216029904,
      0.1526965975635844,
      0,
      0,
      0.039014346911830006,
      0,
      0.15650050878023772,
      0,
      0.11276814989966945,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3433226160034005,
      0.15923402764637798,
      0.06451368892467277,
      0,
      0,
      0,
      0,
      0,
      0.22568676691787345,
      0,
      0,
      0,
      0.32646379208197224,
      0.2667779653971248,
      0,
      0.12417403439147916,
      0,
      0,
      0,
      0.3976269880065828,
      0.04539406074289148,
      0,
      0.06096844988301104,
      0,
      0.23208888362922409,
      0.05604310653217635,
      0
    ],
    "metadata": {
      "text": "type Describer interface {\n    Describe() string\n}"
    }
  },
  {
    "embedding": [
      0.15178071577822874,
      0,
      0,
      0.10942789521624165,
      0,
      0,
      0.18911520624588787,
      0,
      0.18063191419370037,
      0,
      0,
      0,
      0.15601549381913787,
      0,
      0,
      0,
      0.30201935022526155,
      0,
      0,
      0.07498323556870695,
      0.12680322790319243,
      0,
      0,
      0.15298018835238042,
      0,
      0.1744913598809234,
      0,
      0.11628359431788655,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.11447511414074923,
      0,
      0.29103432834561344,
      0.11086279561764698,
      0.15814341741794322,
      0,
      0,
      0,
      0,
      0,
      0.24373834949261186,
      0,
      0,
      0,
      0.42053694306095163,
      0.24204797899744493,
      0.0872537762186565,
      0.16777905917163632,
      0,
      0,
      0,
      0.3784104750047201,
      0.13488061913070754,
      0,
      0.08638333461661182,
      0,
      0.22645574229606805,
      0,
      0.07822173915789533
    ],
    "metadata": {
      "text": "type Product struct {\n    Name  string\n    Price float64\n}"
    }
  },
  {
    "embedding": [
      0.16311146601809184,
      0.02119838420228171,
      0,
      0.2339450081589963,
      0,
      0,
      0.20024676297424576,
      0,
      0.20153211187597717,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2830135047236589,
      0,
      0,
      0.11529205267284948,
      0.12713540365482204,
      0,
      0,
      0.17980592713112994,
      0,
      0.2046007067996672,
      0,
      0.10178203752355477,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.018049221310026654,
      0,
      0.3305678539809807,
      0.24796050553489032,
      0.16123053655354913,
      0,
      0,
      0,
      0,
      0,
      0.13308761349134818,
      0,
      0,
      0,
      0.3419537351505396,
      0.23079204776081355,
      0.047078565399676586,
      0.06866928489843417,
      0,
      0.03890248780948462,
      0,
      0.4050949797492718,
      0.0057181103548289815,
      0,
      0.037760850933744004,
      0,
      0.27437904349254566,
      0.04313059426733006,
      0.08519052068894825
    ],
    "metadata": {
      "text": "func (p Product) Describe() string {\n    return fmt.Sprintf(\"%s costs $%.2f\", p.Name, p.Price)\n}"
    }
  },
  {
    "embedding": [
      0.2931306142286382,
      0,
      0,
      0.20444543557221626,
      0,
      0,
      0.30003049243534874,
      0,
      0.27010201277150286,
      0,
      0,
      0,
      0.06142956415788541,
      0,
      0,
      0,
      0.25148779214975814,
      0,
      0,
      0.05905043704794015,
      0.1538271098441321,
      0,
      0,
      0.1367047460412003,
      0,
      0.21553939650066084,
      0,
      0.07977056419219311,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04479467791103957,
      0,
      0.20817157577745854,
      0.24248926900243167,
      0.04362728678443406,
      0,
      0,
      0,
      0,
      0,
      0.12695847156893997,
      0,
      0,
      0,
      0.3339673342614665,
      0.21864468387997496,
      0.16868090320406853,
      0.10573273246485673,
      0,
      0,
      0,
      0.3872259338067558,
      0.030028491289009335,
      0,
      0.04352249669520201,
      0,
      0.2556818691397142,
      0.0661416138822253,
      0
    ],
    "metadata": {
      "text": "func printDescription(d Describer) {\n    switch v := d.(type) {\n    case Product:\n        fmt.Println(\"Product:\", v.Describe())\n    default:\n        fmt.Println(\"Unknown type\")\n    }\n}"
    }
  },
  {
    "embedding": [
      0.2746620201012821,
      0,
      0,
      0.1424455460955103,
      0,
      0,
      0.2360793151308459,
      0,
      0.3008714157969913,
      0,
      0,
      0,
      0.0371378908016159,
      0,
      0,
      0,
      0.2397558746621,
      0,
      0,
      0.07796375598316503,
      0.15278120618180122,
      0,
      0,
      0.09415334928123889,
      0,
      0.19545425126102955,
      0,
      0.0952905639866175,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0162725741221949,
      0,
      0.3341000414702804,
      0.18940454692287587,
      0.09112954734932906,
      0,
      0,
      0,
      0,
      0,
      0.23060051815349766,
      0,
      0,
      0,
      0.3110356819882683,
      0.20883305374612773,
      0.06138671123702623,
      0.17136287024800811,
      0,
      0.016899270942157436,
      0,
      0.40867505419063505,
      0.02284881842467228,
      0,
      0.07958576635408092,
      0,
      0.21706259363307467,
      0.09767436334597446,
      0.006222796040307337
    ],
    "metadata": {
      "text": "func main() {\n    prod := Product{Name: \"Book\", Price: 12.99}\n    printDescription(prod)\n}\n```"
    }
  },
  {
    "embedding": [
      0.25570017507321147,
      0,
      0,
      0.2228463859648628,
      0,
      0,
      0.18206382484367026,
      0,
      0.20574523648299195,
      0,
      0,
      0,
      0.029267656936427657,
      0,
      0,
      0,
      0.28531773211140754,
      0,
      0,
      0.05762014943488143,
      0.12961944185003701,
      0,
      0,
      0.17222852858335758,
      0,
      0.18417105376172094,
      0,
      0.05306606545951581,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0004162622682442913,
      0,
      0.3142913157209499,
      0.23492938305455174,
      0.06204004267506724,
      0,
      0,
      0,
      0,
      0,
      0.22476645566293948,
      0,
      0,
      0,
      0.37630714757448436,
      0.25812043328076334,
      0.03539608799679185,
      0.09352035231167936,
      0,
      0,
      0,
      0.3662158439410999,
      0.1059654785887985,
      0,
      0.131674796072104,
      0,
      0.2268121309907205,
      0,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Extend the previous interface example by adding another type and handling it with a type switch."
    }
  },
  {
    "embedding": [
      0.19486850643799927,
      0.0587734788245711,
      0,
      0.19952633677500023,
      0,
      0,
      0.2094104146755652,
      0,
      0.20638761723225577,
      0,
      0,
      0,
      0.04086517416852718,
      0,
      0,
      0,
      0.3413475932080705,
      0,
      0,
      0.12826060238120113,
      0.16759934265007537,
      0,
      0,
      0.1946320022271035,
      0,
      0.19446023066784246,
      0,
      0.10108918084581135,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2337281154551516,
      0.16005999760428427,
      0.11752360780266896,
      0,
      0,
      0,
      0,
      0,
      0.2258313518727153,
      0,
      0,
      0,
      0.33148070015049025,
      0.2887961593454219,
      0.14675904720464725,
      0.045779115692895965,
      0,
      0,
      0,
      0.36674593938547123,
      0.05339559121847357,
      0,
      0.1285208157899711,
      0,
      0.2601251137882819,
      0,
      0.012495114576168078
    ],
    "metadata": {
      "text": "## ||| Week 11: Structs and Methods"
    }
  },
  {
    "embedding": [
      0.23183543207462773,
      0,
      0,
      0.2090800721763806,
      0,
      0,
      0.24122500168707656,
      0,
      0.23513270614704634,
      0,
      0,
      0,
      0.043222543809896624,
      0,
      0,
      0,
      0.26080059779378334,
      0,
      0,
      0.07916670425251186,
      0.1502267365764558,
      0,
      0,
      0.12820560628121588,
      0,
      0.22513734868099156,
      0,
      0.10513512778100145,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.055108327682035045,
      0,
      0.3332494021006721,
      0.20797520272413514,
      0.20237801281374895,
      0,
      0,
      0,
      0,
      0,
      0.2429242065881977,
      0,
      0,
      0,
      0.31443493647296655,
      0.1406440161638915,
      0.17107677021464918,
      0.09538438005905939,
      0,
      0,
      0,
      0.366103874964266,
      0.02872312508545424,
      0,
      0.11662089123259273,
      0,
      0.22058301164138644,
      0.009033892570540793,
      0.02524275264162483
    ],
    "metadata": {
      "text": "### Day 1: Introduction to Structs\n**Objectives:**\n- Learn how to define and instantiate structs."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.27333784246841697,
      0,
      0,
      0.1775096524194515,
      0,
      0,
      0.12932700171147488,
      0,
      0.23433776395549852,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.27621353173821245,
      0,
      0,
      0.08438831191533609,
      0.14119029772058697,
      0,
      0,
      0.11919425705198618,
      0,
      0.11401186663400832,
      0,
      0.045564602365131476,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.34671155912252577,
      0.22400231127048856,
      0.11298674722429401,
      0,
      0,
      0,
      0,
      0,
      0.2251203969919854,
      0,
      0,
      0,
      0.331668464317859,
      0.16383716491029587,
      0.024764130954351024,
      0.16306907533857729,
      0,
      0.03392942595758219,
      0,
      0.42165753277149676,
      0.04854214608427599,
      0,
      0.06514821692390015,
      0,
      0.3008826778102923,
      0.07896648109538297,
      0.09648554768762439
    ],
    "metadata": {
      "text": "type Person struct {\n    Name string\n    Age  int\n}"
    }
  },
  {
    "embedding": [
      0.26204456610538396,
      0,
      0,
      0.15843948182073272,
      0,
      0,
      0.3309278785656547,
      0,
      0.2755188799995869,
      0,
      0,
      0,
      0.11937194650385724,
      0,
      0,
      0,
      0.3411838476832324,
      0,
      0,
      0.06414973622566192,
      0.15962040302595404,
      0,
      0,
      0.06989476537982577,
      0,
      0.22450387620081427,
      0,
      0.15247604533917838,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03373656275315403,
      0,
      0.20544076007274578,
      0.2010752767693355,
      0.1548404208882587,
      0,
      0,
      0,
      0,
      0,
      0.23252546523401532,
      0,
      0,
      0,
      0.3156766732393562,
      0.19602477156823808,
      0.0481927556529044,
      0.08046053103153396,
      0,
      0,
      0,
      0.3478140960094035,
      0.022732321378318186,
      0,
      0.03976279049519792,
      0,
      0.2134770333934876,
      0.06842289265631941,
      0
    ],
    "metadata": {
      "text": "func main() {\n    p := Person{Name: \"Alice\", Age: 30}\n    fmt.Println(\"Person:\", p)\n}\n```"
    }
  },
  {
    "embedding": [
      0.2614775067459055,
      0,
      0,
      0.2075776607759735,
      0,
      0,
      0.1751340994560252,
      0,
      0.2737878274389124,
      0.02258117092779232,
      0,
      0,
      0.09331557726307797,
      0,
      0,
      0,
      0.3158134945375785,
      0,
      0,
      0.12819472789501415,
      0.16233812377630713,
      0,
      0,
      0.11578498250056322,
      0,
      0.19146240991675217,
      0,
      0.12757259487988573,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1344097710555133,
      0,
      0.23181205378841443,
      0.23343543925536095,
      0.11373475947630259,
      0,
      0,
      0,
      0,
      0,
      0.24054435808257799,
      0,
      0,
      0,
      0.3444788537814294,
      0.1951590649182256,
      0.08993053947108343,
      0.04770249864904972,
      0,
      0,
      0,
      0.37855734019705,
      0.06931683254040738,
      0,
      0.14760450605648673,
      0,
      0.1676717013955747,
      0.03265645635587349,
      0.039260690017465856
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a struct for a `Car` with fields like Model and Year, then instantiate and print it."
    }
  },
  {
    "embedding": [
      0.1710596222924903,
      0.01016470705355427,
      0,
      0.19166567817474198,
      0,
      0,
      0.24011100839001231,
      0,
      0.17206649765735196,
      0.02367859625417907,
      0,
      0,
      0.08674751154103513,
      0,
      0,
      0,
      0.28056735464917254,
      0,
      0,
      0.15335324688586163,
      0.10851224708914535,
      0,
      0,
      0.1433237306116939,
      0,
      0.29683866206782045,
      0,
      0.07687067180569133,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05702920089906949,
      0,
      0.3130844647821744,
      0.16710313751727482,
      0.1278968165874175,
      0,
      0,
      0,
      0,
      0,
      0.21858245666995116,
      0,
      0,
      0,
      0.2716480123045755,
      0.22423847255366328,
      0.15748469351179067,
      0.10732738303649685,
      0,
      0.01978313242086295,
      0,
      0.42500856435890927,
      0.08940054625424652,
      0,
      0.044167004276207296,
      0,
      0.24763097541136775,
      0.062243612816914824,
      0.009355792312718984
    ],
    "metadata": {
      "text": "### Day 2: Methods on Structs\n**Objectives:**\n- Associate methods with structs using value and pointer receivers."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.21563415862936275,
      0,
      0,
      0.2635507295924215,
      0,
      0,
      0.21003183604433753,
      0,
      0.2910296791837802,
      0,
      0,
      0,
      0.10057486830334157,
      0,
      0,
      0,
      0.26166766434266886,
      0,
      0,
      0.08706761192933993,
      0.15089301603584998,
      0,
      0,
      0.1261165579852661,
      0,
      0.19209402360799988,
      0,
      0.09955692309509732,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.056302716154902406,
      0,
      0.3056588305630068,
      0.2256552979780692,
      0.10286763600176324,
      0,
      0,
      0,
      0,
      0,
      0.17470334620197833,
      0,
      0,
      0,
      0.3366294490905355,
      0.2053568863141583,
      0.05359736364497344,
      0.11179421945245024,
      0,
      0,
      0,
      0.42706566990496975,
      0.11010533298301514,
      0,
      0.017374901222739034,
      0,
      0.1667043386703807,
      0.029116876674704063,
      0.025476749615021263
    ],
    "metadata": {
      "text": "type Rectangle struct {\n    Width, Height float64\n}"
    }
  },
  {
    "embedding": [
      0.18471585073399605,
      0.0336276711509956,
      0,
      0.10466926799708705,
      0,
      0,
      0.22760266851175884,
      0,
      0.2496526273896447,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.4007013708675853,
      0,
      0,
      0.1006438566754532,
      0.163907491813131,
      0,
      0,
      0.1775067284609257,
      0,
      0.19869192857496115,
      0,
      0.15239649892411047,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.23919901819382347,
      0.15977039661978934,
      0.10094361811041662,
      0,
      0,
      0,
      0,
      0,
      0.1877797347308534,
      0,
      0,
      0,
      0.3204416255237726,
      0.24595383302818474,
      0.048286360615743554,
      0.11410589868037899,
      0,
      0,
      0,
      0.4218990952790738,
      0.055129801727438844,
      0,
      0.03907668503478209,
      0,
      0.23230528033339579,
      0,
      0.06814395082994584
    ],
    "metadata": {
      "text": "// Value receiver\nfunc (r Rectangle) Area() float64 {\n    return r.Width * r.Height\n}"
    }
  },
  {
    "embedding": [
      0.23518693157760354,
      0,
      0,
      0.12638946771501625,
      0,
      0,
      0.2191448397132202,
      0,
      0.25395358055172007,
      0.002036311293347456,
      0,
      0,
      0,
      0,
      0,
      0,
      0.31444658528215286,
      0,
      0,
      0.11259162697054828,
      0.1747969485614748,
      0,
      0,
      0.11461850059296193,
      0,
      0.18510685615586434,
      0,
      0.0355699291369854,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1383777061279252,
      0,
      0.3559559291510439,
      0.20351188552330757,
      0.0794457583667457,
      0,
      0,
      0,
      0,
      0,
      0.20470588769286446,
      0,
      0,
      0,
      0.29909767410961186,
      0.28548846665804206,
      0.03691356327694151,
      0.09536990997154726,
      0,
      0.00009782032956626266,
      0,
      0.372261497601997,
      0.07235448678091391,
      0,
      0.10302931686505748,
      0,
      0.2289088508622091,
      0.02950539642929417,
      0.028479670714406203
    ],
    "metadata": {
      "text": "// Pointer receiver\nfunc (r *Rectangle) Scale(factor float64) {\n    r.Width *= factor\n    r.Height *= factor\n}"
    }
  },
  {
    "embedding": [
      0.16540154664152298,
      0,
      0,
      0.21630408422188963,
      0,
      0,
      0.23587749112935924,
      0,
      0.303390762566427,
      0.10512187794447532,
      0,
      0,
      0.1435672640411981,
      0,
      0,
      0,
      0.27519851371276094,
      0,
      0,
      0.06749524912273007,
      0.06801880215729933,
      0,
      0,
      0.06667437239506528,
      0,
      0.1486622740417271,
      0,
      0.1085811618748923,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.11115937685967339,
      0,
      0.3067499534679969,
      0.2598044872344679,
      0.1331231847355627,
      0,
      0,
      0,
      0,
      0,
      0.20423249848532446,
      0,
      0,
      0,
      0.3430389308514573,
      0.018388086155532588,
      0.10470581028765578,
      0.1500754860956402,
      0,
      0.007086340264047172,
      0,
      0.43830659456066745,
      0.07626578652097063,
      0,
      0.0717490787594378,
      0,
      0.10811054988276875,
      0.12147323248467158,
      0.09382236299200875
    ],
    "metadata": {
      "text": "func main() {\n    rect := Rectangle{Width: 10, Height: 5}\n    fmt.Println(\"Area:\", rect.Area())\n    rect.Scale(2)\n    fmt.Println(\"Scaled Area:\", rect.Area())\n}\n```"
    }
  },
  {
    "embedding": [
      0.25403680398707135,
      0,
      0,
      0.1507263541023104,
      0,
      0,
      0.24642460620404752,
      0,
      0.3084187359791785,
      0,
      0,
      0,
      0.057230453129737055,
      0,
      0,
      0,
      0.23489277188284965,
      0,
      0,
      0.044879902285418535,
      0.13349333917354658,
      0,
      0,
      0.11394993012966151,
      0,
      0.2405680375701778,
      0,
      0.09593426442685642,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.17479819348611988,
      0,
      0.23422757808047032,
      0.19490492082499136,
      0.18347053886867484,
      0,
      0,
      0,
      0,
      0,
      0.3526699022024929,
      0,
      0,
      0,
      0.31840137830434534,
      0.11913997376596894,
      0.07822687192842798,
      0.09236759223432624,
      0,
      0,
      0,
      0.39792984504005086,
      0.04249842900737346,
      0,
      0.10878740570268819,
      0,
      0.09730994935981302,
      0,
      0.07367845304441692
    ],
    "metadata": {
      "text": "**Exercises:**\n- Define a struct and add methods to modify its fields."
    }
  },
  {
    "embedding": [
      0.12606741608378752,
      0.023926082626691565,
      0,
      0.20773645994699563,
      0,
      0,
      0.19577575181572435,
      0,
      0.1856624855221889,
      0,
      0,
      0,
      0.012423929801374328,
      0,
      0,
      0,
      0.40618030349195117,
      0,
      0,
      0.1493169818769468,
      0.09996523612263035,
      0,
      0,
      0.14875295903501212,
      0,
      0.1886773921210593,
      0,
      0.18816235481232207,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03370407154734964,
      0,
      0.29061405212975894,
      0.19411059655257823,
      0.17035653573316567,
      0,
      0,
      0,
      0,
      0,
      0.23116340168214872,
      0,
      0,
      0,
      0.28280564493568033,
      0.2508304217599578,
      0.021297208245654738,
      0.10516927305365813,
      0,
      0,
      0,
      0.36217836601380654,
      0,
      0,
      0.000780014603281088,
      0,
      0.2868071646884817,
      0.04259646978254962,
      0.04048930670713003
    ],
    "metadata": {
      "text": "### Day 3: Struct Composition\n**Objectives:**\n- Understand how to embed structs to create composite types."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.1738210728082658,
      0.040857909350434624,
      0,
      0.1514571421059234,
      0,
      0,
      0.2808827864443193,
      0,
      0.2272579156701402,
      0,
      0,
      0,
      0.09473662421898639,
      0,
      0,
      0,
      0.2570524481129194,
      0,
      0,
      0.03073890307240965,
      0.13329837601245717,
      0,
      0,
      0.10644223192843871,
      0,
      0.19227067453371938,
      0,
      0.14126414878841134,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.287768346615929,
      0.20687018506169225,
      0.1999590511132213,
      0,
      0,
      0,
      0,
      0,
      0.20720748039092193,
      0,
      0,
      0,
      0.34128664290683663,
      0.11013295633420352,
      0.21745370011941012,
      0.18833972746279992,
      0,
      0.05344305035589859,
      0,
      0.42054324390072817,
      0.04801746235331854,
      0,
      0.07790028431175693,
      0,
      0.19685895075191456,
      0.05283077827712334,
      0.055666350921890734
    ],
    "metadata": {
      "text": "type Address struct {\n    City, Country string\n}"
    }
  },
  {
    "embedding": [
      0.2994124402940418,
      0,
      0,
      0.11921242728811496,
      0,
      0,
      0.06932480298422017,
      0,
      0.24554114030804183,
      0,
      0,
      0,
      0.05000918533296174,
      0,
      0,
      0.039549928955937154,
      0.2805211454269821,
      0,
      0,
      0.11250099094351741,
      0.17779910344902436,
      0,
      0,
      0.14051252427622501,
      0,
      0.045197181505560034,
      0,
      0.10629737227808471,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04474354568484326,
      0,
      0.31487411820023875,
      0.20698711193421432,
      0.018546993249558445,
      0,
      0,
      0,
      0,
      0,
      0.27224714955410045,
      0,
      0,
      0,
      0.3075326328172435,
      0.2779666876239125,
      0.06560114995043645,
      0.11703293389822839,
      0,
      0,
      0,
      0.36521481664818617,
      0.04402336865891862,
      0,
      0.12595471069100853,
      0,
      0.33202448477222307,
      0.0348088059155023,
      0
    ],
    "metadata": {
      "text": "type Person struct {\n    Name    string\n    Address // Embedded struct\n}"
    }
  },
  {
    "embedding": [
      0.17641023951270632,
      0,
      0.0002857686821283753,
      0.09798643195446508,
      0,
      0,
      0.2698271910166333,
      0,
      0.23101829988602196,
      0,
      0,
      0,
      0.15010511937225143,
      0,
      0,
      0,
      0.3222030650905467,
      0,
      0,
      0.032939473247873864,
      0.20591183704443902,
      0,
      0,
      0.056734072197804755,
      0,
      0.21535734382105243,
      0,
      0.14509903576281402,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010485231127802317,
      0,
      0.24063715132307606,
      0.22708954641262952,
      0.13569846195644977,
      0,
      0,
      0,
      0,
      0,
      0.21071378195374155,
      0,
      0,
      0,
      0.3034934011289551,
      0.2247394618412495,
      0.13135927142987336,
      0.08346362074248005,
      0,
      0.0551530232618704,
      0,
      0.43645969851937505,
      0,
      0,
      0.1297674457983557,
      0,
      0.19842051016078976,
      0.06027090402318004,
      0
    ],
    "metadata": {
      "text": "func main() {\n    p := Person{\n        Name: \"Alice\",\n        Address: Address{\n            City:    \"Paris\",\n            Country: \"France\",\n        },\n    }\n    fmt.Printf(\"%s lives in %s, %s\\n\", p.Name, p.City, p.Country)\n}\n```"
    }
  },
  {
    "embedding": [
      0.1301241920358379,
      0.015291625345156703,
      0,
      0.13223385104792137,
      0,
      0,
      0.22434297158983613,
      0,
      0.314420786388806,
      0,
      0,
      0,
      0.08720145470278119,
      0,
      0,
      0,
      0.3681236821545541,
      0,
      0,
      0.1277569646203397,
      0.12980237637948056,
      0,
      0,
      0.050433261684433094,
      0,
      0.13315657039098164,
      0,
      0.1882480032202976,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006075963272350811,
      0,
      0.25460887111317904,
      0.24643031299125512,
      0.15019681151004313,
      0,
      0,
      0,
      0,
      0,
      0.21372435930773015,
      0,
      0,
      0,
      0.33245564931538585,
      0.2040378708256518,
      0,
      0.13397576113066406,
      0,
      0,
      0,
      0.37811467438224255,
      0.016172724611564365,
      0,
      0.036230969793841133,
      0,
      0.25886725168385033,
      0.09308136178869354,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a composite struct for an `Employee` that embeds a `Person` struct."
    }
  },
  {
    "embedding": [
      0.24665552527849488,
      0.03901844411034515,
      0,
      0.24472681224609447,
      0,
      0,
      0.18888896829927265,
      0,
      0.24511115564071942,
      0,
      0,
      0,
      0.0948572947757471,
      0,
      0,
      0,
      0.2986713203382845,
      0,
      0,
      0.07284470753310641,
      0.12272961957668645,
      0,
      0,
      0.06076213310480138,
      0,
      0.22810462210441634,
      0,
      0.14849895199206273,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010344086232074685,
      0,
      0.2596680894643123,
      0.18957954232020716,
      0.140518498730653,
      0,
      0,
      0,
      0,
      0,
      0.1867276852114561,
      0,
      0,
      0,
      0.3111964392679262,
      0.2063706608985258,
      0.05126141317631497,
      0.12604535126534783,
      0,
      0.10006772480452161,
      0,
      0.4351591420226381,
      0,
      0,
      0.12228493981456996,
      0,
      0.22457619548907548,
      0.06884684313439025,
      0.010098847572705858
    ],
    "metadata": {
      "text": "### Day 4: Constructors and Initialization\n**Objectives:**\n- Create constructor functions for initializing structs."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.24475497336055987,
      0,
      0,
      0.10370727969326411,
      0,
      0,
      0.2501170086592142,
      0,
      0.29364093768775834,
      0,
      0,
      0,
      0.08310576344903325,
      0,
      0,
      0,
      0.2330925085474746,
      0,
      0,
      0,
      0.24924615423327923,
      0,
      0,
      0.10548656580855059,
      0,
      0.14633644208019997,
      0,
      0.08337175380604651,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.36589384681364984,
      0.26805312374669915,
      0.04186302355647693,
      0,
      0,
      0,
      0,
      0,
      0.19805883291712123,
      0,
      0,
      0,
      0.3054548627820723,
      0.17987866254146695,
      0.09575174128423206,
      0.028809404527163584,
      0,
      0.0018058621291418102,
      0,
      0.43174386170021445,
      0.05684974750243698,
      0,
      0.15532656383143312,
      0,
      0.146166782700843,
      0.014295644760030556,
      0
    ],
    "metadata": {
      "text": "type Book struct {\n    Title  string\n    Author string\n    Pages  int\n}"
    }
  },
  {
    "embedding": [
      0.19163161238122625,
      0,
      0,
      0.1748003479070114,
      0,
      0,
      0.228070590131986,
      0,
      0.278470660631165,
      0.024162218288341236,
      0,
      0,
      0.11411910102500386,
      0,
      0,
      0,
      0.23916596389577652,
      0,
      0,
      0.049413602992809655,
      0.08320800043284918,
      0,
      0,
      0.05102131958619316,
      0,
      0.20729750310517558,
      0,
      0.0927447049952626,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08923923886548597,
      0,
      0.2918887569291681,
      0.22379583328725342,
      0.1350742990175679,
      0,
      0,
      0,
      0,
      0,
      0.212589249865291,
      0,
      0,
      0,
      0.3692033774240594,
      0.14640726135658552,
      0.06086255355435381,
      0.1799044236803524,
      0,
      0.0308276924807068,
      0,
      0.4494533398192027,
      0.0377884891267303,
      0,
      0.09148641344462166,
      0,
      0.20889751854406977,
      0.1086796114347729,
      0.010100873666143982
    ],
    "metadata": {
      "text": "func NewBook(title, author string, pages int) *Book {\n    return &Book{\n        Title:  title,\n        Author: author,\n        Pages:  pages,\n    }\n}"
    }
  },
  {
    "embedding": [
      0.21161484870282807,
      0.0067810141270022726,
      0,
      0.1875792030695026,
      0,
      0,
      0.1869397605514566,
      0,
      0.22901011480388767,
      0,
      0,
      0,
      0.09889675476114293,
      0,
      0,
      0.011343074655835518,
      0.29018707671302996,
      0,
      0,
      0.10928799685754306,
      0.1952686333893207,
      0,
      0,
      0.02591472868352284,
      0,
      0.205399580703493,
      0,
      0.09710970491616408,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2788653323620806,
      0.21678246377206845,
      0.11415154965564607,
      0,
      0,
      0,
      0,
      0,
      0.25099191737974397,
      0,
      0,
      0,
      0.333586601208887,
      0.1957521992904504,
      0.1415468140165306,
      0.12763861595618112,
      0,
      0.08475846510474003,
      0,
      0.37920148392146297,
      0.0031069762344928887,
      0,
      0.05138863464298549,
      0,
      0.2776511125179738,
      0.13667603036033313,
      0
    ],
    "metadata": {
      "text": "func main() {\n    book := NewBook(\"Go Programming\", \"Alice\", 300)\n    fmt.Println(\"Book:\", book)\n}\n```"
    }
  },
  {
    "embedding": [
      0.18952034572780257,
      0.019999112772065102,
      0,
      0.15263421967370344,
      0,
      0,
      0.18966987645668842,
      0,
      0.21596457691648746,
      0,
      0,
      0,
      0.022750252225999093,
      0,
      0,
      0,
      0.3606669720333239,
      0,
      0,
      0.1382556487060065,
      0.15352461108600104,
      0,
      0,
      0.08266125069741988,
      0,
      0.15369962039047258,
      0,
      0.09883073001452147,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.32453467171507094,
      0.18851271977278217,
      0.13785997989583756,
      0,
      0,
      0,
      0,
      0,
      0.18291946581745167,
      0,
      0,
      0,
      0.37311087866080833,
      0.2323053718363178,
      0.03957267251730409,
      0.11332469819788474,
      0,
      0.020469222391088292,
      0,
      0.38190857419086083,
      0.0962292582262452,
      0,
      0.040007452725074694,
      0,
      0.2808641370115225,
      0.08232583953934368,
      0.023582782334045867
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a constructor for a `Student` struct and instantiate a new student."
    }
  },
  {
    "embedding": [
      0.10297687657773165,
      0,
      0,
      0.23100661139224604,
      0,
      0,
      0.2821906623545292,
      0,
      0.19952089381580992,
      0,
      0,
      0,
      0.07925244893749113,
      0,
      0,
      0,
      0.2791826388176516,
      0,
      0,
      0.07492047979847205,
      0.0690600506622218,
      0,
      0,
      0.14816361948785606,
      0,
      0.19722730039683778,
      0,
      0.11535409260169531,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0626062623154794,
      0,
      0.31550295428090175,
      0.24689786258602492,
      0.1521180534201313,
      0,
      0,
      0,
      0,
      0,
      0.13689874465238921,
      0,
      0,
      0,
      0.29912658771170636,
      0.156955599639741,
      0.09709527788970258,
      0.1549848722911165,
      0,
      0.08583423605932673,
      0,
      0.42318577732127993,
      0.008070484659647503,
      0,
      0.09155695504237345,
      0,
      0.2925200800470624,
      0.10560044850481874,
      0.0484325682223857
    ],
    "metadata": {
      "text": "### Day 5: Review and Mini Project\n**Objectives:**\n- Apply your knowledge of structs and methods in a small project."
    }
  },
  {
    "embedding": [
      0.23269622293167933,
      0,
      0,
      0.11600933855755255,
      0,
      0,
      0.23669559520996014,
      0,
      0.13412701606431082,
      0,
      0,
      0,
      0.08110143742832224,
      0,
      0,
      0,
      0.2979374333051053,
      0,
      0,
      0.07908569130595426,
      0.2112860529068657,
      0,
      0,
      0.1486401423466556,
      0,
      0.31615683256311283,
      0,
      0.13368423651891795,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.15430523761119283,
      0.09669216559222639,
      0.16582102142406446,
      0,
      0,
      0,
      0,
      0,
      0.19376136975747904,
      0,
      0,
      0,
      0.3109156789367309,
      0.308208599286095,
      0.06543563077357874,
      0.10263847598263785,
      0,
      0.04143590999672206,
      0,
      0.43247933808707095,
      0.06629925886026156,
      0,
      0.0419116748267268,
      0,
      0.26950658250872866,
      0,
      0
    ],
    "metadata": {
      "text": "**Project Example:**\n- Build a simple book library system that can add, list, and update books."
    }
  },
  {
    "embedding": [
      0.2187028489662191,
      0,
      0,
      0.1133374173709261,
      0,
      0,
      0.12836122036987113,
      0,
      0.2774489856275728,
      0.07410123185874337,
      0,
      0,
      0.15386162047121807,
      0,
      0,
      0,
      0.29076034653144495,
      0,
      0,
      0.08870737755603683,
      0.15658720055051278,
      0,
      0,
      0.12028293087892238,
      0,
      0.16292207534458344,
      0,
      0.10722285711802138,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03490986652195679,
      0,
      0.3394123616606716,
      0.20431768864173175,
      0.033720906226844004,
      0,
      0,
      0,
      0,
      0,
      0.22964740376883208,
      0,
      0,
      0,
      0.3021353066480035,
      0.19607657624814448,
      0.16529550622445094,
      0.10931768514199112,
      0,
      0.032231745635357086,
      0,
      0.44994854634124515,
      0.1418279308017973,
      0,
      0.10616777850066988,
      0,
      0.16769641847603295,
      0.05659097613152128,
      0.004172783220616983
    ],
    "metadata": {
      "text": "**Exercises:**\n- Enhance the project by adding additional struct methods."
    }
  },
  {
    "embedding": [
      0.192250995040295,
      0,
      0,
      0.20645297846099941,
      0,
      0,
      0.2482306222822058,
      0,
      0.23425182244438505,
      0.04432070109289573,
      0,
      0,
      0.01683171418697025,
      0,
      0,
      0,
      0.2807936453753493,
      0,
      0,
      0.18495370687479318,
      0.120718323787352,
      0,
      0,
      0.18945943834506215,
      0,
      0.27739689648668175,
      0,
      0.002833837819898114,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.27353660392325074,
      0.16514036744325544,
      0.12763053003153477,
      0,
      0,
      0,
      0,
      0,
      0.13876513346190694,
      0,
      0,
      0,
      0.2735472006805676,
      0.19228652773854876,
      0.02383989731219914,
      0.13836279470943347,
      0,
      0.05528626922030302,
      0,
      0.4657664691197004,
      0.050812895925644606,
      0,
      0.033147922244451934,
      0,
      0.24716578847082638,
      0.043486626064761426,
      0.0733995259110077
    ],
    "metadata": {
      "text": "## ||| Week 12: Concurrency in Go"
    }
  },
  {
    "embedding": [
      0.22451045425159566,
      0,
      0.0042039675859406635,
      0.15815201290005146,
      0,
      0,
      0.23242259628510395,
      0,
      0.24530498553150337,
      0.026711645019046402,
      0,
      0,
      0,
      0,
      0,
      0.029481652749028635,
      0.28908425349894,
      0,
      0,
      0.0652168913643963,
      0.23256231785761286,
      0,
      0,
      0.20495605914051035,
      0,
      0.21136420209527623,
      0,
      0.14523644637572852,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3042720745969577,
      0.16879691433135682,
      0.09295272835304971,
      0,
      0,
      0,
      0,
      0,
      0.17612039878930053,
      0,
      0,
      0,
      0.2516052224991613,
      0.2714358470857191,
      0.011723265980579614,
      0.0015558287511477208,
      0,
      0.046560515326078245,
      0,
      0.427359404531992,
      0.00832901699499987,
      0,
      0.004936508370807325,
      0,
      0.2743570387374607,
      0.012714320734596076,
      0.030300879281359896
    ],
    "metadata": {
      "text": "### Day 1: Introduction to Concurrency\n**Objectives:**\n- Understand the concept of concurrency and its importance in Go."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.16659644311528926,
      0,
      0,
      0.09102199741091693,
      0,
      0,
      0.27578446232794535,
      0,
      0.3094220867700986,
      0,
      0,
      0,
      0.04763392910519718,
      0,
      0,
      0.025125022114299008,
      0.24506990833168515,
      0,
      0,
      0,
      0.15745451702887722,
      0,
      0,
      0.19360276714015656,
      0,
      0.2315803104371289,
      0,
      0.08356775340723557,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3071091834095126,
      0.1462061433503646,
      0.10289898804725356,
      0,
      0,
      0,
      0,
      0,
      0.21986953675677645,
      0,
      0,
      0,
      0.39669788101740194,
      0.12165264786858562,
      0.08549104956966483,
      0.16844687054237786,
      0,
      0.03475988893028253,
      0,
      0.41031988109166806,
      0.025859775188155496,
      0,
      0,
      0,
      0.20759981434363378,
      0.049137469991442424,
      0.0899374124290784
    ],
    "metadata": {
      "text": "import (\n    \"fmt\"\n    \"time\"\n)"
    }
  },
  {
    "embedding": [
      0.1621080892391578,
      0.012649284082457489,
      0,
      0.1902055071592086,
      0,
      0,
      0.20270050393651182,
      0,
      0.1844897976369413,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.33501229303579766,
      0,
      0,
      0.1552221581919411,
      0.15399937969241526,
      0,
      0,
      0.15120541032917875,
      0,
      0.12585377797259137,
      0,
      0.13064409635047056,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07729401082084256,
      0,
      0.2982711120936499,
      0.184647597979402,
      0.13605304488497655,
      0,
      0,
      0,
      0,
      0,
      0.17690737451380192,
      0,
      0,
      0,
      0.3935474871345751,
      0.2531479108052433,
      0.0968443401475391,
      0.09833659239972706,
      0,
      0,
      0,
      0.3301022094678336,
      0.032634801686301125,
      0,
      0.07218576046553345,
      0,
      0.30379835398614563,
      0.11001280066449808,
      0.09976176037657591
    ],
    "metadata": {
      "text": "func sayHello() {\n    fmt.Println(\"Hello from a goroutine!\")\n}"
    }
  },
  {
    "embedding": [
      0.19970412966540987,
      0,
      0,
      0.147874381538512,
      0,
      0,
      0.21189183057091623,
      0,
      0.32894424685866014,
      0,
      0,
      0,
      0.07427279534299447,
      0,
      0,
      0,
      0.2688870969537337,
      0,
      0,
      0.10396453054456652,
      0.04900262205214993,
      0,
      0,
      0.07713260592355102,
      0,
      0.20599955830402436,
      0,
      0.03442048066016107,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.044518797466267516,
      0,
      0.28726914571122336,
      0.2943806413835096,
      0.10656657764442105,
      0,
      0,
      0,
      0,
      0,
      0.2060583828977288,
      0,
      0,
      0,
      0.3512084869004957,
      0.16453203016546186,
      0.13028111617381696,
      0.11504555566670162,
      0,
      0.036095848043258064,
      0,
      0.3716771260182534,
      0.11607000094047289,
      0,
      0.12631785919364838,
      0,
      0.20985443884509675,
      0.1609597654697858,
      0.011017374331975341
    ],
    "metadata": {
      "text": "func main() {\n    go sayHello()\n    time.Sleep(time.Second) // Wait for the goroutine to finish\n}\n```"
    }
  },
  {
    "embedding": [
      0.2542399287161483,
      0.03232827074914557,
      0,
      0.09429149848857872,
      0,
      0,
      0.19484787603875578,
      0,
      0.2880126786925227,
      0,
      0,
      0,
      0.10426210719889993,
      0,
      0,
      0,
      0.3856860129226603,
      0,
      0,
      0.07830329913888213,
      0.15075795108316514,
      0,
      0,
      0.04400022096103875,
      0,
      0.16470101276785903,
      0,
      0.19752435299532345,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026254882958677356,
      0,
      0.26924799064381605,
      0.20769339212461435,
      0.10228221729914382,
      0,
      0,
      0,
      0,
      0,
      0.18540872808947004,
      0,
      0,
      0,
      0.30970140872006297,
      0.202188874758489,
      0.05179802820409684,
      0.13447657163788954,
      0,
      0.041497439409811473,
      0,
      0.4126809323258346,
      0.0015382056014066694,
      0,
      0.05725343480901439,
      0,
      0.21542314940316135,
      0.0789465224390191,
      0.035760471543681005
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a simple program that launches a goroutine to print a message."
    }
  },
  {
    "embedding": [
      0.17973464175911189,
      0,
      0,
      0.22319891050566218,
      0,
      0,
      0.17565016277425557,
      0,
      0.256189619836403,
      0.03148086203681018,
      0,
      0,
      0.11993500011987783,
      0,
      0,
      0,
      0.32291209831493206,
      0,
      0,
      0.15741668514680252,
      0.16576925371984594,
      0,
      0,
      0.09864730031214826,
      0,
      0.2179338881591807,
      0,
      0.1427955815966449,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03198466946111058,
      0,
      0.28124014506112294,
      0.1872167565719313,
      0.10375103816940766,
      0,
      0,
      0,
      0,
      0,
      0.21350318950143535,
      0,
      0,
      0,
      0.3392742005054153,
      0.22211513561722554,
      0.07371795379047431,
      0.16577413282535217,
      0,
      0,
      0,
      0.3860657273986083,
      0.014495858470333476,
      0,
      0.08735363397928417,
      0,
      0.19406005692639888,
      0.09175331978664843,
      0.005230380420998228
    ],
    "metadata": {
      "text": "### Day 2: Goroutines in Depth\n**Objectives:**\n- Practice launching multiple goroutines concurrently."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.16659644311528926,
      0,
      0,
      0.09102199741091693,
      0,
      0,
      0.27578446232794535,
      0,
      0.3094220867700986,
      0,
      0,
      0,
      0.04763392910519718,
      0,
      0,
      0.025125022114299008,
      0.24506990833168515,
      0,
      0,
      0,
      0.15745451702887722,
      0,
      0,
      0.19360276714015656,
      0,
      0.2315803104371289,
      0,
      0.08356775340723557,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3071091834095126,
      0.1462061433503646,
      0.10289898804725356,
      0,
      0,
      0,
      0,
      0,
      0.21986953675677645,
      0,
      0,
      0,
      0.39669788101740194,
      0.12165264786858562,
      0.08549104956966483,
      0.16844687054237786,
      0,
      0.03475988893028253,
      0,
      0.41031988109166806,
      0.025859775188155496,
      0,
      0,
      0,
      0.20759981434363378,
      0.049137469991442424,
      0.0899374124290784
    ],
    "metadata": {
      "text": "import (\n    \"fmt\"\n    \"time\"\n)"
    }
  },
  {
    "embedding": [
      0.22127589074929974,
      0.003670141536743824,
      0,
      0.2337387110463064,
      0,
      0,
      0.23899549240180257,
      0,
      0.2213652493084282,
      0,
      0,
      0,
      0.0738986217041094,
      0,
      0,
      0,
      0.24957919715831708,
      0,
      0,
      0.09940910511487439,
      0.1206040537832141,
      0,
      0,
      0.16486167664186507,
      0,
      0.21515871413895446,
      0,
      0.08797862681873468,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.023402964306904778,
      0,
      0.3054817790746138,
      0.23353021343092906,
      0.10357991817872983,
      0,
      0,
      0,
      0,
      0,
      0.1579523216669242,
      0,
      0,
      0,
      0.3330104077091634,
      0.1290061678512782,
      0.1630572847925565,
      0.10516482258273363,
      0,
      0.0013539220393424408,
      0,
      0.4241146185029504,
      0.06987490402639733,
      0,
      0.10450574592380073,
      0,
      0.2319247386655723,
      0.035714753124366505,
      0.12987207508468743
    ],
    "metadata": {
      "text": "func worker(id int) {\n    fmt.Printf(\"Worker %d starting\\n\", id)\n    time.Sleep(500 * time.Millisecond)\n    fmt.Printf(\"Worker %d done\\n\", id)\n}"
    }
  },
  {
    "embedding": [
      0.19531656475945933,
      0,
      0,
      0.16491261932579918,
      0,
      0,
      0.2678203554925934,
      0,
      0.2264314766425196,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.28907380775859176,
      0,
      0,
      0.07619082695723044,
      0.16834734384974978,
      0,
      0,
      0.15447061019143618,
      0,
      0.23177474266653195,
      0,
      0.07742793891097598,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3399903725666732,
      0.20495379378341377,
      0.1394786724305722,
      0,
      0,
      0,
      0,
      0,
      0.15006534501368435,
      0,
      0,
      0,
      0.3096082572500952,
      0.26439686355082986,
      0.07367141624260677,
      0.04822370683797989,
      0,
      0,
      0,
      0.41173634526618125,
      0.0031840796809888623,
      0,
      0.04030577091092049,
      0,
      0.25645961254088673,
      0,
      0.018669408925115538
    ],
    "metadata": {
      "text": "func main() {\n    for i := 1; i <= 3; i++ {\n        go worker(i)\n    }\n    time.Sleep(2 * time.Second)\n}\n```"
    }
  },
  {
    "embedding": [
      0.23528678345453194,
      0.0014021359307037702,
      0,
      0.0762686258664422,
      0,
      0,
      0.2081616701200772,
      0,
      0.19031201164600672,
      0,
      0,
      0,
      0.012997013491950465,
      0,
      0,
      0,
      0.2646749193208018,
      0,
      0,
      0.07189838726658364,
      0.16639331428503282,
      0,
      0,
      0.17187369490206075,
      0,
      0.15169158750004716,
      0,
      0.17800993340786087,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04173619692717616,
      0,
      0.3766156452980784,
      0.1934633224310637,
      0.14024040095335935,
      0,
      0,
      0,
      0,
      0,
      0.2794938916663,
      0,
      0,
      0,
      0.33081156145326507,
      0.26666086454574706,
      0.012059744141109035,
      0.11076912753186491,
      0,
      0.021660598681715486,
      0,
      0.38538874905279574,
      0.004163217512384379,
      0,
      0.018595710766496108,
      0,
      0.21759941553960313,
      0,
      0.05912410797799595
    ],
    "metadata": {
      "text": "**Exercises:**\n- Launch several goroutines and observe how they run concurrently."
    }
  },
  {
    "embedding": [
      0.20724422538918724,
      0,
      0,
      0.21827869143698791,
      0,
      0,
      0.27792294171478127,
      0,
      0.2667321991911637,
      0,
      0,
      0,
      0.011913109519294855,
      0,
      0,
      0,
      0.3087141711845335,
      0,
      0,
      0.05749198873795749,
      0.17835705155268913,
      0,
      0,
      0.16175332574397688,
      0,
      0.12421902515591655,
      0,
      0.09192282228510376,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.027637405096975334,
      0,
      0.24265817988757515,
      0.2432946307869117,
      0.06764976937217974,
      0,
      0,
      0,
      0,
      0,
      0.2441842775368545,
      0,
      0,
      0,
      0.39425003470620323,
      0.17654001452271095,
      0.005589477550940394,
      0.03043853169023895,
      0,
      0,
      0,
      0.37587664658196324,
      0.11741351076404019,
      0,
      0.03138145186835912,
      0,
      0.23174533215687745,
      0.0071509545518936134,
      0
    ],
    "metadata": {
      "text": "### Day 3: Channels Basics\n**Objectives:**\n- Use channels to communicate between goroutines."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.18483146046580995,
      0,
      0,
      0.17928087395592768,
      0,
      0,
      0.17577291607435916,
      0,
      0.19645713869587003,
      0,
      0,
      0,
      0.10906658066972,
      0,
      0,
      0,
      0.29171406050426724,
      0,
      0,
      0.0705246069742002,
      0.15741053925725262,
      0,
      0,
      0.11988104064461767,
      0,
      0.19958497095501287,
      0,
      0.09426196722763636,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2213091082503646,
      0.17082196416942147,
      0.0612768231896641,
      0,
      0,
      0,
      0,
      0,
      0.18955885980239906,
      0,
      0,
      0,
      0.3309042411696305,
      0.2812525642543842,
      0.1592352355926623,
      0.1759192225226611,
      0,
      0,
      0,
      0.4722118534073135,
      0.05107433182130367,
      0,
      0.10518979111385553,
      0,
      0.27093710613361066,
      0.0206033586249203,
      0.033623845131293656
    ],
    "metadata": {
      "text": "func worker(done chan bool) {\n    fmt.Println(\"Working...\")\n    done <- true\n}"
    }
  },
  {
    "embedding": [
      0.18574679233888894,
      0.0727356571876313,
      0,
      0.1872828606290629,
      0,
      0,
      0.13888248846043347,
      0,
      0.13669597440192216,
      0,
      0,
      0,
      0,
      0,
      0,
      0.028584138891543917,
      0.40085266477875936,
      0,
      0,
      0.1589298496697868,
      0.09959069617129587,
      0,
      0,
      0.10550464312732323,
      0,
      0.10844459825568076,
      0,
      0.1042812358437692,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3308810329249792,
      0.23130769435836887,
      0.09451481448350525,
      0,
      0,
      0,
      0,
      0,
      0.177857165914715,
      0,
      0,
      0,
      0.2527273823390367,
      0.3176473575515788,
      0.08301438677942043,
      0.04977241266736566,
      0,
      0.03498060544110198,
      0,
      0.4304728429405014,
      0.0935919179329981,
      0,
      0.06994497249458041,
      0,
      0.27787775211402216,
      0.04032380413786713,
      0
    ],
    "metadata": {
      "text": "func main() {\n    done := make(chan bool)\n    go worker(done)\n    <-done // Wait for the worker to finish\n    fmt.Println(\"Worker finished\")\n}\n```"
    }
  },
  {
    "embedding": [
      0.130674883885143,
      0.08416955510060299,
      0,
      0.13320508803332834,
      0,
      0,
      0.24455571448399704,
      0,
      0.24150147813110964,
      0,
      0,
      0,
      0.10989282903430295,
      0,
      0,
      0,
      0.3260792512282635,
      0,
      0,
      0.057898160154875644,
      0.11948012932298063,
      0,
      0,
      0.08574697824748573,
      0,
      0.2563231369339727,
      0,
      0.10275168409389379,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.018599762097941314,
      0,
      0.2608449844580697,
      0.24483462480541793,
      0.16807258203614367,
      0,
      0,
      0,
      0,
      0,
      0.1517148579076454,
      0,
      0,
      0,
      0.38663881794917376,
      0.1641985978757621,
      0.08044502036423735,
      0.13138589497090397,
      0,
      0.08873076865471578,
      0,
      0.41299924505175223,
      0.07832068959014411,
      0,
      0.05301481254216025,
      0,
      0.21500204392115949,
      0.048555485310464885,
      0.06761433563091784
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a program that uses a channel to transfer data between two goroutines."
    }
  },
  {
    "embedding": [
      0.14238436154841616,
      0,
      0,
      0.2123059480093475,
      0,
      0,
      0.2764367858065611,
      0,
      0.2564602654586351,
      0.018745742789160014,
      0,
      0,
      0.032210462020235704,
      0,
      0,
      0,
      0.2517954266640885,
      0,
      0,
      0.09799987423551491,
      0.19602525640351073,
      0,
      0,
      0.07223025670510233,
      0,
      0.20453794394132715,
      0,
      0.11026682449390211,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.031897468058645684,
      0,
      0.36885344830269995,
      0.23544470441514592,
      0.11244462896310513,
      0,
      0,
      0,
      0,
      0,
      0.2279511100734117,
      0,
      0,
      0,
      0.3126953768398115,
      0.16726586918088562,
      0,
      0.12880054144192438,
      0,
      0,
      0,
      0.41958005940643633,
      0,
      0,
      0.08331061985881497,
      0,
      0.19046828099728608,
      0.04135338989780793,
      0
    ],
    "metadata": {
      "text": "### Day 4: Select Statement\n**Objectives:**\n- Learn how to use the `select` statement to handle multiple channels."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.16659644311528926,
      0,
      0,
      0.09102199741091693,
      0,
      0,
      0.27578446232794535,
      0,
      0.3094220867700986,
      0,
      0,
      0,
      0.04763392910519718,
      0,
      0,
      0.025125022114299008,
      0.24506990833168515,
      0,
      0,
      0,
      0.15745451702887722,
      0,
      0,
      0.19360276714015656,
      0,
      0.2315803104371289,
      0,
      0.08356775340723557,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3071091834095126,
      0.1462061433503646,
      0.10289898804725356,
      0,
      0,
      0,
      0,
      0,
      0.21986953675677645,
      0,
      0,
      0,
      0.39669788101740194,
      0.12165264786858562,
      0.08549104956966483,
      0.16844687054237786,
      0,
      0.03475988893028253,
      0,
      0.41031988109166806,
      0.025859775188155496,
      0,
      0,
      0,
      0.20759981434363378,
      0.049137469991442424,
      0.0899374124290784
    ],
    "metadata": {
      "text": "import (\n    \"fmt\"\n    \"time\"\n)"
    }
  },
  {
    "embedding": [
      0.1864876583275526,
      0,
      0,
      0.20904901919517724,
      0,
      0,
      0.18108824706781435,
      0,
      0.22876907322148748,
      0,
      0,
      0,
      0.027898564998368482,
      0,
      0,
      0,
      0.355412240475381,
      0,
      0,
      0.09081205917691978,
      0.16364868277261374,
      0,
      0,
      0.12585311552679937,
      0,
      0.14714667117371807,
      0,
      0.061784355842968555,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006062869106880351,
      0,
      0.23521597177658798,
      0.15968577167970605,
      0.17783000129737,
      0,
      0,
      0,
      0,
      0,
      0.208621273273535,
      0,
      0,
      0,
      0.3530582896078762,
      0.2824873032429178,
      0.11696736890820948,
      0.054337109572494074,
      0,
      0,
      0,
      0.41229560667116194,
      0.09044545385568727,
      0,
      0.0855732747972714,
      0,
      0.2522682781997452,
      0.058610026372197276,
      0.05746891967346572
    ],
    "metadata": {
      "text": "func main() {\n    ch1 := make(chan string)\n    ch2 := make(chan string)"
    }
  },
  {
    "embedding": [
      0.25532693825772823,
      0,
      0,
      0.02101443334366563,
      0,
      0,
      0.19992840425930034,
      0,
      0.25947361134112684,
      0,
      0,
      0,
      0.012547961959270174,
      0,
      0,
      0,
      0.3657630653977922,
      0,
      0,
      0.07627517706683536,
      0.15509293969944538,
      0,
      0,
      0.14316662612105216,
      0,
      0.1750188100606233,
      0,
      0.1233669912960194,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04364042567526025,
      0,
      0.24066335426985097,
      0.1388585869128698,
      0.09311498493141063,
      0,
      0,
      0,
      0,
      0,
      0.2729861017432362,
      0,
      0,
      0,
      0.29013585144192044,
      0.25462402359898034,
      0.008185239852339564,
      0.1376589438817771,
      0,
      0,
      0,
      0.45881331349670396,
      0.07360657640658327,
      0,
      0.049634884469570296,
      0,
      0.20292100323464135,
      0,
      0.0837553957269856
    ],
    "metadata": {
      "text": "go func() {\n        time.Sleep(1 * time.Second)\n        ch1 <- \"Message from channel 1\"\n    }()"
    }
  },
  {
    "embedding": [
      0.23592746257779185,
      0,
      0,
      0.028950346789758125,
      0,
      0,
      0.23712450570391544,
      0,
      0.28176811614293845,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3685274119570307,
      0,
      0,
      0.05107601514283109,
      0.13610020932064715,
      0,
      0,
      0.16852604062580986,
      0,
      0.1727136666901751,
      0,
      0.10462182045724416,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.037401407254490204,
      0,
      0.2242547012053623,
      0.13398573178096476,
      0.13202602253504567,
      0,
      0,
      0,
      0,
      0,
      0.2737707538371933,
      0,
      0,
      0,
      0.2904027362843485,
      0.21291237043182942,
      0.017756222288279944,
      0.13220913330680445,
      0,
      0,
      0,
      0.46532401283969144,
      0.0707021951018472,
      0,
      0.0198798562404737,
      0,
      0.20067928171334387,
      0,
      0.10041150958116418
    ],
    "metadata": {
      "text": "go func() {\n        time.Sleep(2 * time.Second)\n        ch2 <- \"Message from channel 2\"\n    }()"
    }
  },
  {
    "embedding": [
      0.18055634573280535,
      0.049453999066888965,
      0,
      0.18642147443143262,
      0,
      0,
      0.21785104699883548,
      0,
      0.2119388351399868,
      0,
      0,
      0,
      0.09156112012326593,
      0,
      0,
      0,
      0.26759683225379505,
      0,
      0,
      0.01124063377021661,
      0.16361952241439032,
      0,
      0,
      0.13891088213323255,
      0,
      0.1758002783820127,
      0,
      0.19598249873176246,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0127579205605004,
      0,
      0.2670699390208397,
      0.21736637166521874,
      0.1101078082919352,
      0,
      0,
      0,
      0,
      0,
      0.2713470125879925,
      0,
      0,
      0,
      0.4058551548516304,
      0.245093581858588,
      0.16692534326129396,
      0.09825957685296967,
      0,
      0,
      0,
      0.3457457454818841,
      0.05275548845273242,
      0,
      0.11152805134807946,
      0,
      0.20189739177688437,
      0.0006940495208350928,
      0
    ],
    "metadata": {
      "text": "select {\n    case msg1 := <-ch1:\n        fmt.Println(msg1)\n    case msg2 := <-ch2:\n        fmt.Println(msg2)\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.22357438518327372,
      0,
      0,
      0.08098285048287315,
      0,
      0,
      0.19531853759362577,
      0,
      0.19654988446320043,
      0.01778862027945158,
      0,
      0,
      0.10189766573078986,
      0,
      0,
      0,
      0.3460837884693893,
      0,
      0,
      0.1665152872677115,
      0.17927803554638896,
      0,
      0,
      0.13156812084460695,
      0,
      0.19766918037454648,
      0,
      0.03815087944911259,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006925815512716736,
      0,
      0.27564748786828125,
      0.17403743091801133,
      0.09130943507103607,
      0,
      0,
      0,
      0,
      0,
      0.222167415917809,
      0,
      0,
      0,
      0.32773382380950306,
      0.24226343705252948,
      0.04595622774639164,
      0.08480321043272684,
      0,
      0.01584027051044808,
      0,
      0.450041903265318,
      0.10885066767225539,
      0,
      0.11300429019761118,
      0,
      0.20902998737444511,
      0.08618000879718665,
      0.02341609166786479
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a program that uses `select` to receive messages from two channels."
    }
  },
  {
    "embedding": [
      0.1758469157457681,
      0,
      0,
      0.2601774658680564,
      0,
      0,
      0.28717653782131025,
      0,
      0.24064665760546283,
      0,
      0,
      0,
      0.10655946326364374,
      0,
      0,
      0,
      0.2367870632970008,
      0,
      0,
      0.08670770058485519,
      0.12079538369392341,
      0,
      0,
      0.0662724036643692,
      0,
      0.2349506361662054,
      0,
      0.18227902194408907,
      0,
      0,
      0.0037615383263169067,
      0,
      0,
      0,
      0,
      0.14909306460797875,
      0,
      0.2411586116451227,
      0.19264927576370924,
      0.21490712974636514,
      0,
      0,
      0,
      0,
      0,
      0.2192127227892394,
      0,
      0,
      0,
      0.3350469710610318,
      0.15010935326362357,
      0.10081962677849392,
      0.15120475939308722,
      0,
      0,
      0,
      0.39494398482562443,
      0,
      0,
      0.09542531146325062,
      0,
      0.1699324245175589,
      0.04796673389235629,
      0.053078864022653646
    ],
    "metadata": {
      "text": "### Day 5: Concurrency Patterns and Review\n**Objectives:**\n- Explore common concurrency patterns such as worker pools.\n- Review the week’s concepts."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.16659644311528926,
      0,
      0,
      0.09102199741091693,
      0,
      0,
      0.27578446232794535,
      0,
      0.3094220867700986,
      0,
      0,
      0,
      0.04763392910519718,
      0,
      0,
      0.025125022114299008,
      0.24506990833168515,
      0,
      0,
      0,
      0.15745451702887722,
      0,
      0,
      0.19360276714015656,
      0,
      0.2315803104371289,
      0,
      0.08356775340723557,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3071091834095126,
      0.1462061433503646,
      0.10289898804725356,
      0,
      0,
      0,
      0,
      0,
      0.21986953675677645,
      0,
      0,
      0,
      0.39669788101740194,
      0.12165264786858562,
      0.08549104956966483,
      0.16844687054237786,
      0,
      0.03475988893028253,
      0,
      0.41031988109166806,
      0.025859775188155496,
      0,
      0,
      0,
      0.20759981434363378,
      0.049137469991442424,
      0.0899374124290784
    ],
    "metadata": {
      "text": "import (\n    \"fmt\"\n    \"time\"\n)"
    }
  },
  {
    "embedding": [
      0.21398034107157532,
      0,
      0,
      0.1787307285720344,
      0,
      0,
      0.25291632700010097,
      0,
      0.1966471774257029,
      0.022103170591310752,
      0,
      0,
      0.1114540931552528,
      0,
      0,
      0,
      0.31465141919527234,
      0,
      0,
      0.001965687797778291,
      0.12291948859580737,
      0,
      0,
      0.06679205517252845,
      0,
      0.17142215228366742,
      0,
      0.09662009212027083,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.046969226960462955,
      0,
      0.3040961127798462,
      0.24091375714209626,
      0.17693194319006897,
      0,
      0,
      0,
      0,
      0,
      0.14297925107443643,
      0,
      0,
      0,
      0.38833914563798994,
      0.19059666406720238,
      0.17524682798534666,
      0.13153149857295823,
      0,
      0,
      0,
      0.38012874026296245,
      0.08736507550451039,
      0,
      0.0586542786101914,
      0,
      0.22564890681072475,
      0.016932973468710536,
      0.05504822340777807
    ],
    "metadata": {
      "text": "func worker(id int, jobs <-chan int, results chan<- int) {\n    for j := range jobs {\n        fmt.Printf(\"Worker %d processing job %d\\n\", id, j)\n        time.Sleep(time.Millisecond * 500)\n        results <- j * 2\n    }\n}"
    }
  },
  {
    "embedding": [
      0.2951882581110842,
      0,
      0,
      0.15284035771433635,
      0,
      0,
      0.23179654195311275,
      0,
      0.23543106402413966,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.31250010588430177,
      0,
      0,
      0.07587837719392751,
      0.1803566490617985,
      0,
      0,
      0.10882033250273211,
      0,
      0.13057120225942423,
      0,
      0.08020503834338683,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.27500806466074884,
      0.29220696028409743,
      0.018411699090858647,
      0,
      0,
      0,
      0,
      0,
      0.16042237586318212,
      0,
      0,
      0,
      0.29731970484978787,
      0.2862779364619652,
      0.08014767902185947,
      0.07643339325708137,
      0,
      0,
      0,
      0.3801641465512925,
      0.03368283511499849,
      0,
      0.13028027516386328,
      0,
      0.27701925082833545,
      0,
      0
    ],
    "metadata": {
      "text": "func main() {\n    jobs := make(chan int, 5)\n    results := make(chan int, 5)"
    }
  },
  {
    "embedding": [
      0.21029218244206077,
      0.024303438889934675,
      0,
      0.15315161949680897,
      0,
      0,
      0.286738419939831,
      0,
      0.2649391574219275,
      0,
      0,
      0,
      0.08773143302991084,
      0,
      0,
      0,
      0.2827536061457803,
      0,
      0,
      0.0009153908285831956,
      0.15056170015422157,
      0,
      0,
      0.08321699441633497,
      0,
      0.17935516031933116,
      0,
      0.1155964325862526,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.27152816351810594,
      0.259106255521597,
      0.1814287401480101,
      0,
      0,
      0,
      0,
      0,
      0.26554048201519825,
      0,
      0,
      0,
      0.33059495660429006,
      0.16248960683121272,
      0.049702968933512434,
      0.11089709827977197,
      0,
      0.016538445080706617,
      0,
      0.3996408452788874,
      0,
      0,
      0.09191478839204213,
      0,
      0.22880287776764233,
      0.031716034049802805,
      0
    ],
    "metadata": {
      "text": "for w := 1; w <= 3; w++ {\n        go worker(w, jobs, results)\n    }"
    }
  },
  {
    "embedding": [
      0.17257081533985127,
      0.061366545675221505,
      0,
      0.20818304381922542,
      0,
      0,
      0.14318701937629708,
      0,
      0.2604328548438419,
      0.002011240929462478,
      0,
      0,
      0.10041070245202548,
      0,
      0,
      0,
      0.308960090057166,
      0,
      0,
      0.14875647985883114,
      0.17750585624820084,
      0,
      0,
      0.12404175340739979,
      0,
      0.1563457480550306,
      0,
      0.08406834093354941,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2548168490854035,
      0.19188869527538527,
      0.19670632936323088,
      0,
      0,
      0,
      0,
      0,
      0.23571470294867383,
      0,
      0,
      0,
      0.34794037641094444,
      0.16367378310337102,
      0.08162718328875401,
      0.15051729464785363,
      0,
      0.009232117848433537,
      0,
      0.39405148962585024,
      0.09519371108257071,
      0,
      0.15082008754820114,
      0,
      0.24206546474170518,
      0.09458758772891993,
      0.028592384715350555
    ],
    "metadata": {
      "text": "for j := 1; j <= 5; j++ {\n        jobs <- j\n    }\n    close(jobs)"
    }
  },
  {
    "embedding": [
      0.1292369597730101,
      0.048580761737281514,
      0.02572317024076102,
      0.19094511496387542,
      0,
      0,
      0.2829831799449959,
      0,
      0.23116283590112677,
      0,
      0,
      0,
      0,
      0,
      0,
      0.002061361010564172,
      0.24468631679575972,
      0,
      0,
      0.05190365660330997,
      0.13516342522130015,
      0,
      0,
      0.24293303799269395,
      0,
      0.155101337345746,
      0,
      0.0988396611216317,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.36907317599859946,
      0.2611576996930669,
      0.12483160268341444,
      0,
      0,
      0,
      0,
      0,
      0.17103739837161555,
      0,
      0,
      0,
      0.37094374715691225,
      0.13945253111336822,
      0.10127397511137932,
      0.09594059169266536,
      0,
      0.009185892689012752,
      0,
      0.3315258474085171,
      0.11690303918063415,
      0,
      0.06446969764951302,
      0,
      0.25860164582186246,
      0.04808220194451713,
      0.11770222209700236
    ],
    "metadata": {
      "text": "for a := 1; a <= 5; a++ {\n        fmt.Println(\"Result:\", <-results)\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.12443502888264928,
      0,
      0,
      0.15427088543483067,
      0,
      0,
      0.2886605827896738,
      0,
      0.28779675047064424,
      0,
      0,
      0,
      0.03279011877541395,
      0,
      0,
      0,
      0.35189736656729304,
      0,
      0,
      0.11317740688606205,
      0.08795118648289475,
      0,
      0,
      0.11678014204674644,
      0,
      0.20962854663504574,
      0,
      0.12615662974492545,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09120398184243184,
      0,
      0.21342737983088686,
      0.30568896826051495,
      0.15276358534186232,
      0,
      0,
      0,
      0,
      0,
      0.14368598868525065,
      0,
      0,
      0,
      0.37297778746647864,
      0.1699398427586485,
      0,
      0.12604769057485968,
      0,
      0,
      0,
      0.35111575442071696,
      0.03888226931338789,
      0,
      0,
      0,
      0.2486060652053132,
      0.10528344432632981,
      0.05248417246969863
    ],
    "metadata": {
      "text": "**Exercises:**\n- Modify the worker pool example to handle more jobs and different processing logic."
    }
  },
  {
    "embedding": [
      0.13039168314873495,
      0,
      0,
      0.18027500895202456,
      0,
      0,
      0.22195563249706374,
      0,
      0.1313281968316557,
      0,
      0,
      0,
      0.049961014609628464,
      0,
      0.00939666855316805,
      0,
      0.257418321506202,
      0,
      0,
      0.08944183815466172,
      0.17410392511828884,
      0.04597860256263004,
      0,
      0.20027101603022784,
      0,
      0.20826918159098884,
      0,
      0.06495859427352167,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02099668111647108,
      0,
      0.2632057329930045,
      0.18933727929151972,
      0.10083300292652511,
      0,
      0,
      0,
      0,
      0,
      0.24691799061734848,
      0,
      0,
      0,
      0.3896157816850983,
      0.24435429474564233,
      0.12032927140418126,
      0.08607230047440156,
      0,
      0,
      0,
      0.41158024816206645,
      0.11800391478740596,
      0,
      0.1879030494567986,
      0,
      0.2299388958423642,
      0.01581055074151066,
      0.07180892750669338
    ],
    "metadata": {
      "text": "## ||| Week 13: Working with Files, Networking, and the Web"
    }
  },
  {
    "embedding": [
      0.22719179654177746,
      0,
      0,
      0.16055396753959106,
      0,
      0,
      0.2761304096715396,
      0,
      0.18393307400739806,
      0,
      0,
      0,
      0.10641609417139292,
      0,
      0,
      0,
      0.30357167349201924,
      0,
      0,
      0.09798089664185418,
      0.13608921134095925,
      0,
      0,
      0.09711323467875042,
      0,
      0.16815143166678603,
      0,
      0.06862563387988582,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1118571035093839,
      0,
      0.2821885919748012,
      0.22862000133826943,
      0.10279191566814874,
      0,
      0,
      0,
      0,
      0,
      0.23497554368179108,
      0,
      0,
      0,
      0.31346726538090314,
      0.20271869351836758,
      0.1051587062410407,
      0.08846531525874839,
      0,
      0,
      0,
      0.40660756760616673,
      0.1528295330821439,
      0,
      0.10074557382291716,
      0,
      0.25601439609308807,
      0.07550503320062676,
      0
    ],
    "metadata": {
      "text": "### Day 1: File I/O Basics\n**Objectives:**\n- Learn to read from and write to files using Go."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.18660493409302945,
      0,
      0,
      0.1639118428650983,
      0,
      0,
      0.21333173544875672,
      0,
      0.3597103866149256,
      0.03457518989601055,
      0,
      0,
      0.057490135325355074,
      0,
      0,
      0,
      0.145616436068845,
      0,
      0,
      0,
      0.1554537119941287,
      0,
      0,
      0.13532214903389322,
      0,
      0.16982531863685338,
      0,
      0.0603568977078774,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.049091528139105764,
      0,
      0.3181483688327555,
      0.16912644507573685,
      0.04341678185493786,
      0,
      0,
      0,
      0,
      0,
      0.2693259698798392,
      0,
      0,
      0,
      0.3786743287479592,
      0.09943457711993664,
      0.09356186659156632,
      0.19507928796691307,
      0,
      0,
      0,
      0.45000821433330923,
      0.05865037538520853,
      0,
      0.015739240997093087,
      0,
      0.18403305498528147,
      0.05198914137960554,
      0.11503220845580114
    ],
    "metadata": {
      "text": "import (\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n)"
    }
  },
  {
    "embedding": [
      0.2702650579956545,
      0,
      0,
      0.10377127512504011,
      0,
      0,
      0.07120805701741988,
      0,
      0.28879282226854885,
      0.08196288829000352,
      0,
      0,
      0.0687932952890671,
      0,
      0,
      0,
      0.33151680799084365,
      0,
      0,
      0.11422126775347415,
      0.1453275160070494,
      0.0029086225166536817,
      0,
      0.04160406456056616,
      0,
      0.04378609726441131,
      0,
      0.06207554606676045,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.14811015064145236,
      0.18908231634149789,
      0.08524570588474073,
      0,
      0,
      0,
      0,
      0,
      0.1842746914165827,
      0,
      0,
      0,
      0.42892855042867356,
      0.3001054108029222,
      0.0681711291380161,
      0.1303636110409438,
      0,
      0,
      0,
      0.44717657253710164,
      0.08481431779366928,
      0,
      0.004618674495394341,
      0,
      0.24417414521219855,
      0.0437696824327754,
      0.037012479732855055
    ],
    "metadata": {
      "text": "func main() {\n    data, err := ioutil.ReadFile(\"sample.txt\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(\"File contents:\", string(data))\n}\n```"
    }
  },
  {
    "embedding": [
      0.17560455830071622,
      0,
      0,
      0.12374792259293169,
      0,
      0,
      0.28292693039246986,
      0,
      0.24728058422871527,
      0,
      0,
      0,
      0.08763515644085601,
      0,
      0,
      0,
      0.3197038501918448,
      0,
      0,
      0.12107586016110611,
      0.1682458465813938,
      0,
      0,
      0.10029139321372646,
      0,
      0.19025059841219694,
      0,
      0.0626403231169096,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.041379054245239306,
      0,
      0.29403324763084127,
      0.2480730566417602,
      0.15457930567538383,
      0,
      0,
      0,
      0,
      0,
      0.20985020260111928,
      0,
      0,
      0,
      0.3397219148263061,
      0.21772666990200254,
      0.12391622601743192,
      0.11068353464599877,
      0,
      0,
      0,
      0.36089557462215593,
      0.07451517365688323,
      0,
      0.11601147273662413,
      0,
      0.21454913037719028,
      0.07918476288646088,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a text file and write a program to read and print its contents."
    }
  },
  {
    "embedding": [
      0.20983354251023423,
      0,
      0,
      0.2494495721102682,
      0,
      0,
      0.19872738004222096,
      0,
      0.21070388059085346,
      0.041469986256104596,
      0,
      0,
      0.082655147332805,
      0,
      0,
      0,
      0.3038882815772168,
      0,
      0,
      0.06014677571907553,
      0.1405944458062707,
      0.01375384561698578,
      0,
      0.07908912872601324,
      0,
      0.20403034622349822,
      0,
      0.04125076125189117,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08050705899824791,
      0,
      0.23486606257357867,
      0.23931255137293694,
      0.11955929918276319,
      0,
      0,
      0,
      0,
      0,
      0.23233131896760717,
      0,
      0,
      0,
      0.3224063657438842,
      0.22506352394529464,
      0.08477538770783992,
      0.09087208893604064,
      0,
      0,
      0,
      0.44747049969723185,
      0.1779020921657269,
      0,
      0.16302210526324762,
      0,
      0.1351778106903378,
      0.028001307358791774,
      0.032481987537414415
    ],
    "metadata": {
      "text": "### Day 2: More on File I/O\n**Objectives:**\n- Explore advanced file operations and error handling."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.20370666274140728,
      0,
      0,
      0.16179680655089268,
      0,
      0,
      0.19636728657914837,
      0,
      0.3472637017038233,
      0.03891708516106931,
      0,
      0,
      0.048076262253760105,
      0,
      0,
      0,
      0.15427834246958275,
      0,
      0,
      0,
      0.16202439203247374,
      0,
      0,
      0.13159419160816124,
      0,
      0.15415069785530675,
      0,
      0.04294761322663255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04884280366420617,
      0,
      0.33237756008989244,
      0.17003152182387438,
      0.033710015226785614,
      0,
      0,
      0,
      0,
      0,
      0.2904376373897392,
      0,
      0,
      0,
      0.37720978267209326,
      0.11719791702134703,
      0.08382668976080931,
      0.18326757132659724,
      0,
      0,
      0,
      0.4415299662064407,
      0.06864957647107645,
      0,
      0.03498654025116976,
      0,
      0.19075058639659845,
      0.046780914641674484,
      0.11406939524170809
    ],
    "metadata": {
      "text": "import (\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"os\"\n)"
    }
  },
  {
    "embedding": [
      0.21944442375662238,
      0,
      0,
      0.24325279910818615,
      0,
      0,
      0.17821662677664105,
      0,
      0.2796756405296659,
      0.03237941013811144,
      0,
      0,
      0.11842658376012409,
      0,
      0,
      0,
      0.24594326223174512,
      0,
      0,
      0.11856244703276488,
      0.0989820125932885,
      0,
      0,
      0.05764739278231311,
      0,
      0.18359051341171947,
      0,
      0.0003006992992016801,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08379760784914041,
      0,
      0.29810697416156934,
      0.26739669111556635,
      0.1094415460631429,
      0,
      0,
      0,
      0,
      0,
      0.1816280518972925,
      0,
      0,
      0,
      0.3656896097308024,
      0.12457184331817865,
      0.1091340530207556,
      0.1513253957051381,
      0,
      0.004142694469410887,
      0,
      0.41893866769032895,
      0.06571146462880668,
      0,
      0.1823560185759689,
      0,
      0.1610958581695407,
      0.08805013547651756,
      0.05505545553129833
    ],
    "metadata": {
      "text": "func main() {\n    content := []byte(\"Hello, file!\")\n    err := ioutil.WriteFile(\"output.txt\", content, 0644)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(\"Data written to file successfully\")\n}\n```"
    }
  },
  {
    "embedding": [
      0.15485317713508306,
      0.011306857585786754,
      0,
      0.15027744475343327,
      0,
      0,
      0.1084058855837444,
      0,
      0.2418171038168533,
      0,
      0,
      0,
      0.11127098105373108,
      0,
      0,
      0,
      0.33552440762568875,
      0,
      0,
      0.14996520237941802,
      0.1066195965122094,
      0,
      0,
      0.044417811586375755,
      0,
      0.1448649493377631,
      0,
      0.13893342100685258,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10150156399383943,
      0,
      0.2354975597641801,
      0.19465647248906376,
      0.09986511741981152,
      0,
      0,
      0,
      0,
      0,
      0.20854165121389873,
      0,
      0,
      0,
      0.3479728644674303,
      0.34608276020394674,
      0.10774285999537787,
      0.09073899105623148,
      0,
      0,
      0,
      0.3744037728617538,
      0.07743334897207159,
      0,
      0.11871050056489008,
      0,
      0.3074205108586388,
      0.09612052444862479,
      0.013295500222514127
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a program that appends user input to a file."
    }
  },
  {
    "embedding": [
      0.22889958744424355,
      0,
      0,
      0.18903255046105158,
      0,
      0,
      0.22509497599951725,
      0,
      0.23044358243554972,
      0,
      0,
      0,
      0.09773851346068844,
      0,
      0,
      0,
      0.32372686507540477,
      0,
      0,
      0.09948609070892443,
      0.18316174713326325,
      0,
      0,
      0.09258306126017705,
      0,
      0.18067060126352866,
      0,
      0.10379620382300767,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01831398647421489,
      0,
      0.28639398397039756,
      0.18305033077338206,
      0.16367291757054758,
      0,
      0,
      0,
      0,
      0,
      0.27470937879099344,
      0,
      0,
      0,
      0.28176409711802686,
      0.2143091630903873,
      0.030875434334461306,
      0.10954444384733142,
      0,
      0.016284224107955894,
      0,
      0.4093239455986732,
      0.02786233396668822,
      0,
      0.10188703897417382,
      0,
      0.24609517622262944,
      0.04891258548195124,
      0
    ],
    "metadata": {
      "text": "### Day 3: Introduction to HTTP Servers\n**Objectives:**\n- Build a simple HTTP server using Go’s `net/http` package."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.23843312691888033,
      0,
      0,
      0.22106992964472735,
      0,
      0,
      0.2755302565464694,
      0,
      0.31447176073958677,
      0,
      0,
      0,
      0.020710664654608652,
      0,
      0,
      0,
      0.13400128288295277,
      0,
      0,
      0,
      0.18456020777766552,
      0,
      0,
      0.0966777541749977,
      0,
      0.18696818659405315,
      0,
      0.04380974638905703,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08255183065981483,
      0,
      0.3268394862659525,
      0.16805784460225331,
      0.033712769572194295,
      0,
      0,
      0,
      0,
      0,
      0.2620869719212128,
      0,
      0,
      0,
      0.3946485159781965,
      0.13895614691270744,
      0.06534116171759417,
      0.11318816744864395,
      0,
      0,
      0,
      0.40406617441952586,
      0,
      0,
      0.04153995349185496,
      0,
      0.20158232778889687,
      0.041538391138980474,
      0.09795896718621885
    ],
    "metadata": {
      "text": "import (\n    \"fmt\"\n    \"net/http\"\n)"
    }
  },
  {
    "embedding": [
      0.24233202849242688,
      0,
      0,
      0.15778510191608172,
      0,
      0,
      0.33437162097802986,
      0,
      0.24326900226796794,
      0,
      0,
      0,
      0.03493100613898335,
      0,
      0,
      0,
      0.23848123738425936,
      0,
      0,
      0.02050020413284494,
      0.14639510078977216,
      0,
      0,
      0.14287009380148544,
      0,
      0.2119396449286223,
      0,
      0.11910712221326974,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.048564396485144185,
      0,
      0.25756427561355977,
      0.29121535847522145,
      0.13123331802638008,
      0,
      0,
      0,
      0,
      0,
      0.18998522218696684,
      0,
      0,
      0,
      0.331879632087613,
      0.22248651113887566,
      0.10797077682903049,
      0.09472025668635094,
      0,
      0.00002025485012099402,
      0,
      0.34332086274360124,
      0.06721910159952038,
      0,
      0.0925747667354734,
      0,
      0.2558338077559407,
      0.04928881526465745,
      0.00014068642546358765
    ],
    "metadata": {
      "text": "func helloHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, \"Hello, Go Web!\")\n}"
    }
  },
  {
    "embedding": [
      0.1266134882572616,
      0,
      0,
      0.22912615573106015,
      0,
      0,
      0.25714537152196154,
      0,
      0.2771672092528402,
      0,
      0,
      0,
      0.03306816590182124,
      0,
      0,
      0,
      0.311264300158822,
      0,
      0,
      0.11854708445484112,
      0.051932173663028915,
      0,
      0,
      0.04508817206403276,
      0,
      0.15928259290807345,
      0,
      0.1405533086337947,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.33003329189871766,
      0.3231699494691131,
      0.20842861669409998,
      0,
      0,
      0,
      0,
      0,
      0.1754488611614972,
      0,
      0,
      0,
      0.34432820511747003,
      0.0912110763774676,
      0.041858461395721,
      0.19839094746441166,
      0,
      0.04453184950599109,
      0,
      0.3202712988533322,
      0,
      0,
      0.029116526925140364,
      0,
      0.23369696033077011,
      0.09635277978320014,
      0.04190025973096548
    ],
    "metadata": {
      "text": "func main() {\n    http.HandleFunc(\"/\", helloHandler)\n    fmt.Println(\"Server starting on :8080\")\n    http.ListenAndServe(\":8080\", nil)\n}\n```"
    }
  },
  {
    "embedding": [
      0.16051697837147266,
      0,
      0,
      0.16710100962095437,
      0,
      0,
      0.2615208223486839,
      0,
      0.2852995687040391,
      0,
      0,
      0,
      0.084719228380259,
      0,
      0,
      0,
      0.29780739258854216,
      0,
      0,
      0.0997946176216414,
      0.1371590953204483,
      0,
      0,
      0.08520400404096365,
      0,
      0.1660140387186698,
      0,
      0.14610219261056903,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.12868669566428956,
      0,
      0.25263046989039306,
      0.24205638691693443,
      0.15305903996674966,
      0,
      0,
      0,
      0,
      0,
      0.21381006490120477,
      0,
      0,
      0,
      0.3512448294614142,
      0.1956735398526343,
      0.16493603549817903,
      0.13189774581144698,
      0,
      0,
      0,
      0.3635312641480013,
      0.02550632398027225,
      0,
      0.07905585281672714,
      0,
      0.246749344992622,
      0.03339983878672908,
      0.016866754900086014
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a server that responds with different messages based on the URL path."
    }
  },
  {
    "embedding": [
      0.1847688716936159,
      0.008289895542580375,
      0,
      0.06673238084357964,
      0,
      0,
      0.21349916960607862,
      0,
      0.31426342014692854,
      0,
      0,
      0,
      0.09351526833768918,
      0,
      0,
      0,
      0.3588352390359767,
      0,
      0,
      0.04666591691303988,
      0.2128641525096892,
      0,
      0,
      0.17267220273660466,
      0,
      0.2085108621583298,
      0,
      0.1437878735538089,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0036751368977840965,
      0,
      0.23574432263981152,
      0.18701796568175896,
      0.15211321993656973,
      0,
      0,
      0,
      0,
      0,
      0.1893981269361235,
      0,
      0,
      0,
      0.3117909864874718,
      0.22346168374101857,
      0.10092558372973731,
      0.13180230520070552,
      0,
      0.0424371934271138,
      0,
      0.3727427635730927,
      0.009565229239684331,
      0,
      0.1661535083046296,
      0,
      0.21057052183218092,
      0.029737196040917038,
      0.00943176157036767
    ],
    "metadata": {
      "text": "### Day 4: HTTP Clients\n**Objectives:**\n- Learn how to make HTTP requests using Go."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.23951471144313433,
      0,
      0.01563583301261141,
      0.17752464140179228,
      0,
      0,
      0.1804862785138707,
      0,
      0.3445559746038575,
      0.03519974275085737,
      0,
      0,
      0.0677871908980157,
      0,
      0,
      0,
      0.12892127690364807,
      0,
      0,
      0,
      0.20125334664841787,
      0,
      0,
      0.14283284650180425,
      0,
      0.16190320336731076,
      0,
      0.05628224540848836,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.023543292387293826,
      0,
      0.3189622859290952,
      0.174030014249518,
      0,
      0,
      0,
      0,
      0,
      0,
      0.26812677917855327,
      0,
      0,
      0,
      0.3648384190726034,
      0.12128750109093885,
      0.11438210679076993,
      0.13971710146420668,
      0,
      0,
      0,
      0.45945274606577396,
      0.06108671347408887,
      0,
      0.11243072547356311,
      0,
      0.1668454930287353,
      0.021375652966478947,
      0.07864409683051922
    ],
    "metadata": {
      "text": "import (\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n)"
    }
  },
  {
    "embedding": [
      0.16169428448931703,
      0.0017996141826607508,
      0,
      0.13670177243621057,
      0,
      0,
      0.20341450399543198,
      0,
      0.2660708661846693,
      0,
      0,
      0,
      0.10619656699133817,
      0,
      0.004165721443436518,
      0,
      0.2587887429359902,
      0,
      0,
      0,
      0.11006087292604273,
      0,
      0,
      0.05840831302620482,
      0,
      0.10901290250867285,
      0,
      0.20724395296361423,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.137932534702515,
      0,
      0.3142509741103905,
      0.16022263755724486,
      0.2063314441266842,
      0,
      0,
      0,
      0,
      0,
      0.20244223304242417,
      0,
      0,
      0,
      0.40432053476000795,
      0.14994573166396094,
      0.06728001590866821,
      0.17706875616857545,
      0,
      0.028721646831948947,
      0,
      0.42406170156658496,
      0.05418562680528049,
      0,
      0,
      0,
      0.2119264276563283,
      0.09286115698496007,
      0.09163908169298443
    ],
    "metadata": {
      "text": "func main() {\n    resp, err := http.Get(\"https://api.github.com\")\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        return\n    }\n    defer resp.Body.Close()\n    body, _ := ioutil.ReadAll(resp.Body)\n    fmt.Println(\"Response:\", string(body))\n}\n```"
    }
  },
  {
    "embedding": [
      0.15456960764207464,
      0,
      0,
      0.16275187710755848,
      0,
      0,
      0.18698197144571202,
      0,
      0.20537935548235733,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.25140149661127525,
      0,
      0,
      0.18140696721774624,
      0.13835165554043055,
      0,
      0,
      0.10982038120644393,
      0,
      0.16999878639086874,
      0,
      0.09357681421560629,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013157507853625945,
      0.11377703966146041,
      0,
      0.3683202977415608,
      0.2566097430868088,
      0.07702746456834655,
      0,
      0,
      0,
      0,
      0,
      0.1603049821919608,
      0,
      0,
      0,
      0.3748037247308854,
      0.2846073879119786,
      0.05390746414322861,
      0.04778947992055917,
      0,
      0,
      0,
      0.3529035553427077,
      0.05694829301066557,
      0,
      0.08813731303166046,
      0,
      0.296453478377427,
      0.0908269805396337,
      0.05380429056407486
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a program that fetches data from a public API and displays a specific field from the JSON response."
    }
  },
  {
    "embedding": [
      0.0844536542719287,
      0.009097135777999681,
      0,
      0.09638180369794623,
      0,
      0,
      0.2460074090607645,
      0,
      0.2343700931184194,
      0,
      0,
      0,
      0.1273330042360426,
      0,
      0,
      0,
      0.31651291559213385,
      0,
      0,
      0.06098051104442967,
      0.1597410776303188,
      0,
      0,
      0.08007943147792332,
      0,
      0.27959494126548,
      0,
      0.15888335009994078,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006081352394057026,
      0,
      0.2538424424396187,
      0.21592236997850164,
      0.17618415624480802,
      0,
      0,
      0,
      0,
      0,
      0.25121805527357866,
      0,
      0,
      0,
      0.2855876031233147,
      0.1953429600918395,
      0.16034190813122984,
      0.06360785616262506,
      0,
      0.0889800514562575,
      0,
      0.45188658092835304,
      0.03572004861412065,
      0,
      0.08360367755496081,
      0,
      0.16582154034338875,
      0.09991901020662017,
      0
    ],
    "metadata": {
      "text": "### Day 5: JSON Handling\n**Objectives:**\n- Learn to marshal and unmarshal JSON data."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.1935565207006547,
      0.01694063881144906,
      0,
      0.07282265491462431,
      0,
      0,
      0.1650902413628081,
      0,
      0.25779407291783024,
      0,
      0,
      0,
      0.049079225847768485,
      0,
      0,
      0,
      0.335259109627014,
      0,
      0,
      0.16738023435725702,
      0.1957308354250468,
      0,
      0,
      0.09151670477106905,
      0,
      0.14206795724185303,
      0,
      0.10311537023926541,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3022251018572914,
      0.20231475039420613,
      0.10058864088854792,
      0,
      0,
      0,
      0,
      0,
      0.20601902188327448,
      0,
      0,
      0,
      0.35823255329614956,
      0.24570528280520956,
      0.04074686008030562,
      0.17302483569136182,
      0,
      0.03651105968369507,
      0,
      0.362513246580424,
      0.08276001590835211,
      0,
      0.08976900980294704,
      0,
      0.29429267230873685,
      0.05924632666987339,
      0
    ],
    "metadata": {
      "text": "import (\n    \"encoding/json\"\n    \"fmt\"\n)"
    }
  },
  {
    "embedding": [
      0.22964470520920255,
      0,
      0,
      0.1492697101373356,
      0,
      0,
      0.24052446264922178,
      0,
      0.2813006818882893,
      0,
      0,
      0,
      0.09039020965054897,
      0,
      0.005869401100306211,
      0,
      0.2699254957683988,
      0,
      0,
      0.07184529981198577,
      0.1869645483837995,
      0,
      0,
      0.109188893650731,
      0,
      0.19861263205459484,
      0,
      0.05587778797227754,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05250028161440552,
      0,
      0.3413660128353844,
      0.2219874481891685,
      0.10239765547785919,
      0,
      0,
      0,
      0,
      0,
      0.23170209899921748,
      0,
      0,
      0,
      0.3664391207714564,
      0.1490182318101852,
      0.083929026744785,
      0.03949753648045565,
      0,
      0,
      0,
      0.4295395581791068,
      0.10158799020675127,
      0,
      0.05326765758734878,
      0,
      0.12938960456594129,
      0.003415331748037055,
      0.00928533351619369
    ],
    "metadata": {
      "text": "type User struct {\n    Name string `json:\"name\"`\n    Age  int    `json:\"age\"`\n}"
    }
  },
  {
    "embedding": [
      0.2918172515439033,
      0.014807077045813792,
      0.05645293793248868,
      0.2764808794902534,
      0,
      0,
      0.28436231891376196,
      0,
      0.23359000568200833,
      0,
      0,
      0,
      0.015880589621677467,
      0,
      0,
      0,
      0.22823384725629778,
      0,
      0,
      0.03564074033543055,
      0.13857701741974845,
      0,
      0,
      0.11754189221405129,
      0,
      0.19628217434689194,
      0,
      0.0770516993641578,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014583372394798002,
      0,
      0.16065393471055467,
      0.2469523111911027,
      0.13976264661262566,
      0,
      0,
      0,
      0,
      0,
      0.20351691885597295,
      0,
      0,
      0,
      0.3459104003174268,
      0.19740903171389745,
      0.08333938169804875,
      0.11155971129628309,
      0,
      0,
      0,
      0.3824707161561561,
      0.09936614844744257,
      0,
      0.14814959491254534,
      0,
      0.2537527352657816,
      0,
      0
    ],
    "metadata": {
      "text": "func main() {\n    jsonData := `{\"name\": \"Alice\", \"age\": 30}`\n    var user User\n    err := json.Unmarshal([]byte(jsonData), &user)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n    }\n    fmt.Printf(\"User: %+v\\n\", user)\n}\n```"
    }
  },
  {
    "embedding": [
      0.2590441861885077,
      0,
      0,
      0.07836690874464051,
      0,
      0,
      0.16609756734435294,
      0,
      0.2988324973457463,
      0,
      0,
      0,
      0.09472483408945725,
      0,
      0,
      0,
      0.34706431346325817,
      0,
      0,
      0.1261427078282234,
      0.21257263151792183,
      0,
      0,
      0.10107493439617947,
      0,
      0.13287139215547622,
      0,
      0.1054079528511792,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03221109108385215,
      0,
      0.2913538042731147,
      0.23369126856924738,
      0.07831768144964814,
      0,
      0,
      0,
      0,
      0,
      0.21744611728768198,
      0,
      0,
      0,
      0.36509255689147924,
      0.20861321775379565,
      0.051076140636369484,
      0.12266912381209982,
      0,
      0,
      0,
      0.3499532279311151,
      0.10572298747564295,
      0,
      0.06635803560732424,
      0,
      0.20935672234625524,
      0.10019500388402043,
      0.004434132695202118
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a program that reads JSON data from a file, unmarshals it into a struct, and prints the result."
    }
  },
  {
    "embedding": [
      0.15205563793623095,
      0,
      0,
      0.24439755088792595,
      0,
      0,
      0.24400310885263649,
      0,
      0.2594564814764775,
      0.007812581245966815,
      0,
      0,
      0.10592686951539404,
      0,
      0,
      0,
      0.27301990106642965,
      0,
      0,
      0.10348989363663362,
      0.18755293139423604,
      0,
      0,
      0.06993122373052622,
      0,
      0.17792776741710725,
      0,
      0.08038795448799026,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05101217201771986,
      0,
      0.314180282436702,
      0.19392350484261478,
      0.10160185785688147,
      0,
      0,
      0,
      0,
      0,
      0.27635558064452237,
      0,
      0,
      0,
      0.3948561305720139,
      0.17298927636979805,
      0.03384796914774208,
      0.10226149380016548,
      0,
      0,
      0,
      0.3770436376272624,
      0,
      0,
      0.16584561771638195,
      0,
      0.15092451104139323,
      0.008797029219024359,
      0
    ],
    "metadata": {
      "text": "## ||| Week 14: Testing, Debugging, and Best Practices"
    }
  },
  {
    "embedding": [
      0.16056046646251457,
      0,
      0,
      0.2451640698657293,
      0,
      0,
      0.18194879366427946,
      0,
      0.14171260073429126,
      0.026747029341177675,
      0,
      0,
      0.06235731640042857,
      0,
      0,
      0,
      0.2952614488101691,
      0,
      0,
      0.24467758238201642,
      0.11208932154734412,
      0,
      0,
      0.07576324081740103,
      0,
      0.19829606872504602,
      0,
      0.06147036021496863,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.023084366930126513,
      0,
      0.3518776138729414,
      0.1618297606281641,
      0.06340734107827435,
      0,
      0,
      0,
      0,
      0,
      0.17401743811553647,
      0,
      0,
      0,
      0.2774679839964917,
      0.2517819849746294,
      0.04246019990318465,
      0.1275594489764777,
      0,
      0,
      0,
      0.48080497394457694,
      0.02182106427925023,
      0,
      0.09181175392410425,
      0,
      0.23634407209893224,
      0.06847630505490648,
      0.06282657375130353
    ],
    "metadata": {
      "text": "### Day 1: Introduction to Testing\n**Objectives:**\n- Understand the basics of testing in Go using the `testing` package."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.20958008539158332,
      0,
      0,
      0.21614516847789245,
      0,
      0,
      0.26021088164024186,
      0,
      0.2602626388321712,
      0,
      0,
      0,
      0.042232209562268,
      0,
      0,
      0,
      0.22491891246286394,
      0,
      0,
      0.10764251107124577,
      0.1447688398567573,
      0,
      0,
      0.14791113344501253,
      0,
      0.2257770306727989,
      0,
      0.06820029444964125,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04567818572085126,
      0,
      0.29611427584297983,
      0.2167026641037213,
      0.13401898143744373,
      0,
      0,
      0,
      0,
      0,
      0.24103112703774693,
      0,
      0,
      0,
      0.3282411023794925,
      0.1673138138027612,
      0.12553412183210397,
      0.11584690296294772,
      0,
      0,
      0,
      0.42217285889164063,
      0.06901182645175381,
      0,
      0.07532371639023747,
      0,
      0.2016244257141989,
      0.005388913349039429,
      0.06662909793143762
    ],
    "metadata": {
      "text": "func Add(a, b int) int {\n    return a + b\n}"
    }
  },
  {
    "embedding": [
      0.17882669690443015,
      0,
      0,
      0.15663637282114687,
      0,
      0,
      0.24762457985656264,
      0,
      0.24546860849615043,
      0,
      0,
      0,
      0.09524434053883295,
      0,
      0,
      0,
      0.2670544877508387,
      0,
      0,
      0.09414733039576437,
      0.18178609369114995,
      0,
      0,
      0.16660147825489308,
      0,
      0.24799343536075136,
      0,
      0.08803500283018004,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01464600999880066,
      0,
      0.32326610388192,
      0.2488324571155617,
      0.10450572532386954,
      0,
      0,
      0,
      0,
      0,
      0.18910621026023872,
      0,
      0,
      0,
      0.28432295951791775,
      0.22021255344928412,
      0.16393195199401203,
      0.07168856069182059,
      0,
      0,
      0,
      0.3796432172204277,
      0.06168561999962092,
      0,
      0.1655074020578915,
      0,
      0.2229078502813757,
      0.05413335296034448,
      0
    ],
    "metadata": {
      "text": "func TestAdd(t *testing.T) {\n    result := Add(2, 3)\n    if result != 5 {\n        t.Errorf(\"Expected 5, got %d\", result)\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.22218838982693295,
      0,
      0,
      0.09958228547740804,
      0,
      0,
      0.14117112007879734,
      0,
      0.2817065239422719,
      0,
      0,
      0,
      0.047903016979216735,
      0,
      0,
      0,
      0.26814169839033336,
      0,
      0,
      0.10127783082085215,
      0.18754489368636804,
      0,
      0,
      0.15463796257762638,
      0,
      0.14770053938513228,
      0,
      0.07928330064864292,
      0,
      0,
      0,
      0,
      0,
      0,
      0.035939142160143045,
      0,
      0,
      0.31666702598695956,
      0.21902042236507882,
      0.12339016226366993,
      0,
      0,
      0,
      0,
      0,
      0.20072915349477058,
      0,
      0,
      0,
      0.38812057376785963,
      0.2657872145230978,
      0.06852040171126132,
      0.16235383991960894,
      0,
      0,
      0,
      0.35168761391748465,
      0.052934471919637675,
      0,
      0.09732548601637768,
      0,
      0.2763043768439071,
      0.00974474304342555,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write tests for a simple function you’ve created in previous lessons."
    }
  },
  {
    "embedding": [
      0.2622411213179826,
      0,
      0,
      0.21861256040548674,
      0,
      0,
      0.223060150453615,
      0,
      0.2504177729919895,
      0.046130917607871566,
      0,
      0,
      0.10018670111246873,
      0,
      0,
      0,
      0.1980667026590634,
      0,
      0,
      0.12053726900278529,
      0.16963828042604226,
      0,
      0,
      0.07256524985271282,
      0,
      0.17227825587088766,
      0,
      0.024009266654833276,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.11926851971311608,
      0,
      0.34213695007199796,
      0.26251543562189117,
      0.016756344468459475,
      0,
      0,
      0,
      0,
      0,
      0.20426820619133337,
      0,
      0,
      0,
      0.3198512974891812,
      0.22519238459601523,
      0.042832356070645235,
      0.12786362587399494,
      0,
      0.03829107373796903,
      0,
      0.4145271060642124,
      0.030661359254797137,
      0,
      0.09334035554847013,
      0,
      0.1890357278500896,
      0.09286337060126727,
      0.00599965641994561
    ],
    "metadata": {
      "text": "### Day 2: Writing More Tests\n**Objectives:**\n- Learn table-driven tests and subtests."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.1300394460570135,
      0,
      0,
      0.19374538033114294,
      0,
      0,
      0.25639733238384216,
      0,
      0.1292443663675289,
      0.03247857766771947,
      0,
      0,
      0.12653285730983066,
      0,
      0,
      0,
      0.26947378841154324,
      0,
      0,
      0.11435255328167365,
      0.07566787225582494,
      0,
      0,
      0.15578447062966264,
      0,
      0.22638801239513978,
      0,
      0.07614316926005049,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.053877634283041376,
      0,
      0.32355418469336117,
      0.23055674063799797,
      0.0916569055135128,
      0,
      0,
      0,
      0,
      0,
      0.11351738157434087,
      0,
      0,
      0,
      0.312507459649063,
      0.20567354402537047,
      0.13855239203189165,
      0.1463041774410097,
      0,
      0.00030791557148562393,
      0,
      0.4735919869816955,
      0.10158943740018657,
      0,
      0.07281382334961549,
      0,
      0.2380567251197857,
      0.06754300708658932,
      0.097797151419028
    ],
    "metadata": {
      "text": "func Multiply(a, b int) int {\n    return a * b\n}"
    }
  },
  {
    "embedding": [
      0.21170247753261492,
      0,
      0,
      0.15262077683186906,
      0,
      0,
      0.2497633699706529,
      0,
      0.26171769697720054,
      0,
      0,
      0,
      0.08692876906657362,
      0,
      0,
      0,
      0.2908414872937659,
      0,
      0,
      0.0078033932839643,
      0.17700088233752143,
      0,
      0,
      0.05991232990505769,
      0,
      0.18325101367551244,
      0,
      0.08787439286889173,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.057665506834386426,
      0,
      0.21657166287377771,
      0.18459033434891783,
      0.17027302216545617,
      0,
      0,
      0,
      0,
      0,
      0.15844067951393523,
      0,
      0,
      0,
      0.392547700923341,
      0.1555164057978984,
      0.12255671741954527,
      0.1308276342674563,
      0,
      0.06330789000554826,
      0,
      0.4555702515012066,
      0.08499450134115537,
      0,
      0.05829976886938934,
      0,
      0.21264636531817624,
      0.0904944460956479,
      0.09048065258309175
    ],
    "metadata": {
      "text": "func TestMultiply(t *testing.T) {\n    tests := []struct {\n        a, b, expected int\n    }{\n        {2, 3, 6},\n        {4, 5, 20},\n        {0, 10, 0},\n    }\n    for _, test := range tests {\n        result := Multiply(test.a, test.b)\n        if result != test.expected {\n            t.Errorf(\"Multiply(%d, %d) = %d; want %d\", test.a, test.b, result, test.expected)\n        }\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.2543918891859639,
      0,
      0,
      0.17771552594804274,
      0,
      0,
      0.15420429674202774,
      0,
      0.24471767568352748,
      0,
      0,
      0,
      0.06473065421675615,
      0,
      0,
      0,
      0.2459649114232285,
      0,
      0,
      0.09466558902635597,
      0.16056685105732602,
      0,
      0,
      0.14760565271087037,
      0,
      0.18173224474920896,
      0,
      0.09243830805398012,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06696485896792766,
      0,
      0.3368791572830778,
      0.19350430305502458,
      0.13951527877394426,
      0,
      0,
      0,
      0,
      0,
      0.2758726730846303,
      0,
      0,
      0,
      0.3561984648660543,
      0.18566542967328484,
      0.08437587520277186,
      0.10503928841525448,
      0,
      0,
      0,
      0.40980300846087303,
      0.09409727044682344,
      0,
      0.1482988729540985,
      0,
      0.13321365068023183,
      0.016602744247348134,
      0.0997539396884112
    ],
    "metadata": {
      "text": "**Exercises:**\n- Add additional test cases to your functions from previous weeks."
    }
  },
  {
    "embedding": [
      0.14743462376578775,
      0,
      0,
      0.23918316905701464,
      0,
      0,
      0.2178037279397144,
      0,
      0.27732906069970875,
      0,
      0,
      0,
      0.07522734689779455,
      0,
      0,
      0.04055769894430477,
      0.25915403560580164,
      0,
      0,
      0.03348167790821703,
      0.13451716323335988,
      0.008149365626490795,
      0,
      0.11897189029014253,
      0,
      0.19795578848419393,
      0,
      0.034551833937478516,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.018226813874352214,
      0,
      0.21985567417703286,
      0.2683959705073949,
      0.1130644912641098,
      0,
      0,
      0,
      0,
      0,
      0.20339558368180408,
      0,
      0,
      0,
      0.3715259179048562,
      0.10570522851766048,
      0.1808947605142332,
      0.0626139263082634,
      0,
      0.04335080743242584,
      0,
      0.4479152975291351,
      0.10124312637568646,
      0,
      0.16192602618011812,
      0,
      0.18108855251772485,
      0.12175775902681012,
      0.033468117464897924
    ],
    "metadata": {
      "text": "### Day 3: Benchmarking\n**Objectives:**\n- Write benchmark tests to measure performance."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.14881936994754677,
      0,
      0,
      0.18695737316691888,
      0,
      0,
      0.2426838865427172,
      0,
      0.2642517948902377,
      0,
      0,
      0,
      0.01716058918511191,
      0,
      0,
      0,
      0.26197654009227483,
      0,
      0,
      0.11695665596017071,
      0.18441574543981432,
      0,
      0,
      0.10043605639189049,
      0,
      0.21701929657001864,
      0,
      0.17156878413234514,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05640970217086083,
      0,
      0.2592435343245134,
      0.15866946149922095,
      0.16859088847911155,
      0,
      0,
      0,
      0,
      0,
      0.23989456173798532,
      0,
      0,
      0,
      0.3754476945986543,
      0.26951818826091045,
      0.024970235232941864,
      0.10241555310514713,
      0,
      0,
      0,
      0.3515870988949912,
      0.014836072196217336,
      0,
      0.08124582730395406,
      0,
      0.2636858052820324,
      0.06055630621551359,
      0.032521156672366366
    ],
    "metadata": {
      "text": "func SumSlice(s []int) int {\n    total := 0\n    for _, v := range s {\n        total += v\n    }\n    return total\n}"
    }
  },
  {
    "embedding": [
      0.2345153828036239,
      0,
      0.014458189974989877,
      0.1820419845118979,
      0,
      0,
      0.2574814055357024,
      0,
      0.28323585027877773,
      0.04680977556939197,
      0,
      0,
      0.14986131723781457,
      0,
      0,
      0,
      0.2001765029544193,
      0,
      0,
      0.021823940585616635,
      0.1689601472033844,
      0.05040479783127132,
      0,
      0.06605801573131992,
      0,
      0.13822227561726624,
      0,
      0.09662731740699683,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.059123410363566525,
      0,
      0.27265575095391714,
      0.34245245627327214,
      0.07662613737628698,
      0,
      0,
      0,
      0,
      0,
      0.2227205472060541,
      0,
      0,
      0,
      0.345988452604224,
      0.1387295605053685,
      0.15000878354615713,
      0.10948119583250585,
      0,
      0,
      0,
      0.3575017387602913,
      0.13144761337542202,
      0,
      0.13831902411715413,
      0,
      0.18976818379445098,
      0.1085599011895397,
      0
    ],
    "metadata": {
      "text": "func BenchmarkSumSlice(b *testing.B) {\n    s := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    for i := 0; i < b.N; i++ {\n        SumSlice(s)\n    }\n}\n```"
    }
  },
  {
    "embedding": [
      0.24751480744229137,
      0,
      0,
      0.12001226151800289,
      0,
      0,
      0.25133704250539995,
      0,
      0.27528891785625453,
      0,
      0,
      0,
      0.024445476207260595,
      0,
      0,
      0,
      0.3115224315920817,
      0,
      0,
      0.11226236298981467,
      0.14634190248484089,
      0,
      0,
      0.11096072306852138,
      0,
      0.16264219889303275,
      0,
      0.09068399711972204,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06547498735147067,
      0,
      0.2575959478143571,
      0.24588350033776568,
      0.10447040381929057,
      0,
      0,
      0,
      0,
      0,
      0.21661041624548277,
      0,
      0,
      0,
      0.343397768418987,
      0.21198500616158203,
      0.054049469582884535,
      0.16169226010361942,
      0,
      0,
      0,
      0.36426076052555045,
      0.030186791785838215,
      0,
      0.041609152069313614,
      0,
      0.2891772222296191,
      0.08315864680818415,
      0.00023318892672656653
    ],
    "metadata": {
      "text": "**Exercises:**\n- Write a benchmark for one of your functions."
    }
  },
  {
    "embedding": [
      0.25784001537082496,
      0,
      0,
      0.16543123007919927,
      0,
      0,
      0.25434574719444464,
      0,
      0.27243856818147955,
      0,
      0,
      0,
      0.0527287065838902,
      0,
      0,
      0,
      0.31160100629383164,
      0,
      0,
      0.0967666714762326,
      0.19070116680802,
      0,
      0,
      0.14938793219287957,
      0,
      0.18441990404695718,
      0,
      0.11685208803365184,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07451539562493045,
      0,
      0.27541663804662453,
      0.2168440855453799,
      0.06733455768411117,
      0,
      0,
      0,
      0,
      0,
      0.2091423763488878,
      0,
      0,
      0,
      0.29519821752718056,
      0.22623439454995675,
      0.006336461246356186,
      0.13265706582838602,
      0,
      0,
      0,
      0.3733048944719511,
      0.007594330918925097,
      0,
      0.03483036376712071,
      0,
      0.2664322142425037,
      0.0858497096654109,
      0
    ],
    "metadata": {
      "text": "### Day 4: Debugging Techniques\n**Objectives:**\n- Learn simple debugging techniques using print statements and the `log` package."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.2766982835991584,
      0,
      0,
      0.15107887144568546,
      0,
      0,
      0.26866765987560026,
      0,
      0.22804741140988605,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.21378024753061475,
      0,
      0,
      0.015262865405486605,
      0.1950500728303935,
      0,
      0,
      0.08598449118394735,
      0,
      0.20949718827573022,
      0,
      0.07899692617156515,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0013774911745707775,
      0,
      0.3015829103750443,
      0.1835730658002277,
      0.18789876315033266,
      0,
      0,
      0,
      0,
      0,
      0.27356042271722236,
      0,
      0,
      0,
      0.35218139704517565,
      0.1601441114488785,
      0,
      0.11719798988666644,
      0,
      0.05919573191626329,
      0,
      0.4359820472842453,
      0.0024984160978059017,
      0,
      0.07454352332075138,
      0,
      0.18302046147218473,
      0.007451705313481031,
      0.06336966150516495
    ],
    "metadata": {
      "text": "func faultyFunction(n int) int {\n    if n < 0 {\n        log.Println(\"Received negative value\")\n        return 0\n    }\n    return n * 2\n}"
    }
  },
  {
    "embedding": [
      0.2639917515722506,
      0,
      0,
      0.15013578769231553,
      0,
      0,
      0.20932086515860898,
      0,
      0.2613384125513324,
      0,
      0,
      0,
      0.0001366159851221987,
      0,
      0,
      0.0398197690598211,
      0.28262769431295076,
      0,
      0,
      0,
      0.14324199788584835,
      0,
      0,
      0.09330026742458612,
      0,
      0.13497284304669316,
      0,
      0.08229692982687624,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.34720879086921397,
      0.2031672334963194,
      0.08862703491031147,
      0,
      0,
      0,
      0,
      0,
      0.22876795945673206,
      0,
      0,
      0,
      0.34183154758436585,
      0.16583630149336878,
      0.03141466995110773,
      0.1734409335999933,
      0,
      0,
      0,
      0.4404674159742288,
      0.025635472342616535,
      0,
      0.03259350751136736,
      0,
      0.24815022692117295,
      0.0702961780969504,
      0.0169183242106837
    ],
    "metadata": {
      "text": "func main() {\n    fmt.Println(\"Result:\", faultyFunction(-5))\n}\n```"
    }
  },
  {
    "embedding": [
      0.2635821462064907,
      0.0059803552346256155,
      0,
      0.10334004235548391,
      0,
      0,
      0.27860650065185366,
      0,
      0.2527119844319501,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.35629839031221494,
      0,
      0,
      0.08849562347488746,
      0.12429403065658419,
      0,
      0,
      0.17726575064746422,
      0,
      0.22400319938849012,
      0,
      0.1065656769054289,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04213665783463287,
      0,
      0.22345461168287128,
      0.13153086172554257,
      0.17393734752178922,
      0,
      0,
      0,
      0,
      0,
      0.20331563126297383,
      0,
      0,
      0,
      0.31064892989282866,
      0.1755944334480598,
      0,
      0.15743479523776033,
      0,
      0,
      0,
      0.3980754083742996,
      0.11841171191891942,
      0,
      0.1407000468082161,
      0,
      0.2071798078486578,
      0.0001599654025599688,
      0.08492483333655176
    ],
    "metadata": {
      "text": "**Exercises:**\n- Insert debugging prints in an existing function to trace its execution."
    }
  },
  {
    "embedding": [
      0.1946086078659082,
      0.04139989541893742,
      0,
      0.14632024667330876,
      0,
      0,
      0.23079439202336963,
      0,
      0.23558089118855424,
      0.02596714644338452,
      0,
      0,
      0.16529909505182158,
      0,
      0,
      0,
      0.319842267936141,
      0,
      0,
      0.07263358984556027,
      0.15666378571382805,
      0,
      0,
      0.13628669937458265,
      0,
      0.23319413444105186,
      0,
      0.11911056066675066,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.027139902663223078,
      0,
      0.16522625166364233,
      0.2224752798662836,
      0.11064596400284699,
      0,
      0,
      0,
      0,
      0,
      0.13793029680543273,
      0,
      0,
      0,
      0.3317131392825876,
      0.22315112436579831,
      0.18673979999411328,
      0.11805946735827566,
      0,
      0.05933651786077066,
      0,
      0.42562390345176454,
      0.09018804582784992,
      0,
      0.10885510551760524,
      0,
      0.24348547712121998,
      0.03321707493756025,
      0.02225367991790747
    ],
    "metadata": {
      "text": "### Day 5: Best Practices and Code Reviews\n**Objectives:**\n- Review best practices in Go coding: formatting, error handling, and documentation.\n- Learn how to refactor code."
    }
  },
  {
    "embedding": [
      0.2234932963055282,
      0.03690500634270988,
      0,
      0.0638901462057222,
      0,
      0,
      0.2249226763300037,
      0,
      0.275615862647658,
      0.00841925789264972,
      0,
      0,
      0.15497781832761934,
      0,
      0,
      0,
      0.3734694541571583,
      0,
      0,
      0.07060626178789323,
      0.13534654585241004,
      0,
      0,
      0.05294599125682228,
      0,
      0.15762710062972154,
      0,
      0.14256143460872514,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2972854952271278,
      0.27058097601184605,
      0.11506749125013274,
      0,
      0,
      0,
      0,
      0,
      0.17030564748463975,
      0,
      0,
      0,
      0.2867666906511134,
      0.15271959877736252,
      0.1355639372621644,
      0.156718046487709,
      0,
      0.009313098810875959,
      0,
      0.41765806519308024,
      0.11074005800426143,
      0,
      0.025832392966197798,
      0,
      0.18723598303021652,
      0.09143301883588043,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Review an old project, refactor it, and add comments/documentation.\n- Format your code with `gofmt` and review it with `go vet`."
    }
  },
  {
    "embedding": [
      0.2014258425168614,
      0,
      0,
      0.16037087594612873,
      0,
      0,
      0.16648612948351907,
      0,
      0.2654192637712565,
      0.012936622344836637,
      0,
      0,
      0.11284094203048033,
      0,
      0.016203133300485985,
      0,
      0.29685616140975474,
      0,
      0,
      0.13808885266961415,
      0.1589413801554501,
      0,
      0,
      0.16706544662551426,
      0,
      0.16363368877603562,
      0,
      0.07152921954783573,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.053036587121432624,
      0,
      0.2535024992290595,
      0.21241592174165927,
      0.12859660382392693,
      0,
      0,
      0,
      0,
      0,
      0.19271485119582246,
      0,
      0,
      0,
      0.34105026891358103,
      0.18196486436726103,
      0.20274335918595632,
      0.1762466301882909,
      0,
      0,
      0,
      0.4036067919116567,
      0.12168942348979318,
      0,
      0.10830873609493526,
      0,
      0.18611699924634814,
      0.11331271108610277,
      0.07575590314810099
    ],
    "metadata": {
      "text": "## ||| Week 15: Building CLI and Web Applications"
    }
  },
  {
    "embedding": [
      0.2326453528617007,
      0,
      0,
      0.13801665868518442,
      0,
      0,
      0.2729069400006563,
      0,
      0.23805836118475124,
      0,
      0,
      0,
      0.1274221949876476,
      0,
      0,
      0,
      0.27179460778472936,
      0,
      0,
      0.07778868144089722,
      0.1455487554151114,
      0,
      0,
      0.0729457893262835,
      0,
      0.1594608642587283,
      0,
      0.15166241108745734,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04524806581012156,
      0,
      0.29748492880019894,
      0.14405385079924715,
      0.09080093949531062,
      0,
      0,
      0,
      0,
      0,
      0.1527524657260785,
      0,
      0,
      0,
      0.2662300684043876,
      0.2107748059011489,
      0,
      0.17790968734819088,
      0,
      0.004297193769250131,
      0,
      0.5221181103523403,
      0.016756416272080094,
      0,
      0.021558812988483313,
      0,
      0.22958503540522623,
      0.08156644331283795,
      0.04492906250935127
    ],
    "metadata": {
      "text": "### Day 1: Introduction to CLI Applications\n**Objectives:**\n- Learn how to build simple command-line applications using the `flag` package."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.16451625587962718,
      0,
      0,
      0.1215810594112861,
      0,
      0,
      0.2604637828769783,
      0,
      0.2618973839682704,
      0.02670381129435381,
      0,
      0,
      0.11956388722648757,
      0,
      0,
      0.0010375831964524005,
      0.3136256882635794,
      0,
      0,
      0.07474690271353528,
      0.14728517295344307,
      0,
      0,
      0.18149759017496986,
      0,
      0.23822271472079357,
      0,
      0.11204419178692064,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.30783944204919245,
      0.16823084486674186,
      0.0969315237716471,
      0,
      0,
      0,
      0,
      0,
      0.17953523984877467,
      0,
      0,
      0,
      0.2843064018738659,
      0.12280340521666483,
      0.08596754487296762,
      0.13718869136825448,
      0,
      0.05340920456708634,
      0,
      0.48624881871963643,
      0.050168255974666384,
      0,
      0,
      0,
      0.20608766359754893,
      0.03626443026520577,
      0.08008015685033756
    ],
    "metadata": {
      "text": "import (\n    \"flag\"\n    \"fmt\"\n)"
    }
  },
  {
    "embedding": [
      0.20505700351198167,
      0,
      0,
      0.13884339668896845,
      0,
      0,
      0.23949401759210795,
      0,
      0.2997245328103787,
      0.07134793716559291,
      0,
      0,
      0.16434130770092903,
      0,
      0,
      0,
      0.35875030348413045,
      0,
      0,
      0.05485368845465473,
      0.14005369413866645,
      0,
      0,
      0.02618048634353435,
      0,
      0.15736186899876098,
      0,
      0.10329787468958297,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02042174956590182,
      0,
      0.2427729794014052,
      0.29950305726702825,
      0.07265455721644834,
      0,
      0,
      0,
      0,
      0,
      0.12893983500496606,
      0,
      0,
      0,
      0.33219598967881875,
      0.16106847448447226,
      0.09182404122207968,
      0.10922631855843686,
      0,
      0,
      0,
      0.42739673885690677,
      0.10219771577073647,
      0,
      0.15213825007033563,
      0,
      0.13110977344695507,
      0.10425708465455279,
      0
    ],
    "metadata": {
      "text": "func main() {\n    name := flag.String(\"name\", \"World\", \"a name to greet\")\n    flag.Parse()\n    fmt.Printf(\"Hello, %s!\\n\", *name)\n}\n```"
    }
  },
  {
    "embedding": [
      0.27535967031953784,
      0.11593420594928054,
      0,
      0.10389996091111334,
      0,
      0,
      0.1317792783620396,
      0,
      0.2228590034562863,
      0,
      0,
      0,
      0.060791119989716265,
      0,
      0,
      0,
      0.3924982765398619,
      0,
      0,
      0.10176188493886017,
      0.12867288737707813,
      0,
      0,
      0.08084753353634919,
      0,
      0.12785198104669315,
      0,
      0.06339903500104048,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.24233590254549722,
      0.23768826319306396,
      0.10048706278965898,
      0,
      0,
      0,
      0,
      0,
      0.20307763801817405,
      0,
      0,
      0,
      0.3688931052606597,
      0.1941732137052075,
      0.09639008750381999,
      0.15064996067738942,
      0,
      0,
      0,
      0.38704468609713494,
      0.16860549985913792,
      0,
      0.059778148360182144,
      0,
      0.2468251926689538,
      0.07927643056796249,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a CLI tool that accepts a few flags and prints a customized message."
    }
  },
  {
    "embedding": [
      0.24787572039147485,
      0,
      0,
      0.18089697811445773,
      0,
      0,
      0.2183638529027473,
      0,
      0.2778323217411419,
      0,
      0,
      0,
      0.05430233592756124,
      0,
      0,
      0,
      0.2340098156559234,
      0,
      0,
      0.1050426790729357,
      0.21174217943703835,
      0,
      0,
      0.13603113880267664,
      0,
      0.12873388386454562,
      0,
      0.1262226764053391,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04322616583626696,
      0,
      0.2991893961357256,
      0.20459724056095202,
      0.08597178677601267,
      0,
      0,
      0,
      0,
      0,
      0.2617927265276301,
      0,
      0,
      0,
      0.3467318416213135,
      0.22421349326148252,
      0.01891530318005014,
      0.14686781887053954,
      0,
      0,
      0,
      0.37056106491786434,
      0,
      0,
      0.07570939042664103,
      0,
      0.2675853506341173,
      0.011484441913970536,
      0
    ],
    "metadata": {
      "text": "### Day 2: Advanced CLI Applications\n**Objectives:**\n- Explore advanced CLI features such as subcommands (using external libraries if desired)."
    }
  },
  {
    "embedding": [
      0.28955749637848716,
      0,
      0,
      0.08945663994111797,
      0,
      0,
      0.12463556701637163,
      0,
      0.27966310379171594,
      0,
      0,
      0,
      0.09739044953404412,
      0,
      0,
      0.054302156259564624,
      0.36709484115401153,
      0,
      0,
      0.028431300649570775,
      0.16037918168898807,
      0,
      0,
      0.03504182237153786,
      0,
      0.11419659030522902,
      0,
      0.08646441650761147,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.24937589356498122,
      0.20009784829796692,
      0.11593855862364201,
      0,
      0,
      0,
      0,
      0,
      0.2583097364332959,
      0,
      0,
      0,
      0.33632445896311175,
      0.18250625178236646,
      0,
      0.07381113946134678,
      0,
      0,
      0,
      0.44633270954862714,
      0.12202220064955448,
      0,
      0.17219283945209118,
      0,
      0.199940839609557,
      0.030659556920309687,
      0.0029321574581255986
    ],
    "metadata": {
      "text": "**Exercises:**\n- Extend your CLI tool to handle subcommands (e.g., `add`, `list`)."
    }
  },
  {
    "embedding": [
      0.2626655512511848,
      0,
      0,
      0.1142146660373393,
      0,
      0,
      0.2946146069925899,
      0,
      0.2672434940205822,
      0.021013601927594803,
      0,
      0,
      0.14620703974298205,
      0,
      0,
      0,
      0.25573562817993145,
      0,
      0,
      0.023697299916916867,
      0.19314266927633278,
      0,
      0,
      0.010521183166605915,
      0,
      0.1889260492251627,
      0,
      0.17188428637281605,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.059443353995221986,
      0,
      0.2272291914925451,
      0.15207006998230652,
      0.11784301278263179,
      0,
      0,
      0,
      0,
      0,
      0.2114354693294126,
      0,
      0,
      0,
      0.3174079238534632,
      0.2071170146626414,
      0.07542571839248645,
      0.17810122293396113,
      0,
      0.0270953196990931,
      0,
      0.4437904569169454,
      0,
      0,
      0.010039636023715914,
      0,
      0.21740157734913984,
      0.07953628790459824,
      0
    ],
    "metadata": {
      "text": "### Day 3: Introduction to Web Applications\n**Objectives:**\n- Learn the basics of building web applications and REST APIs in Go."
    }
  },
  {
    "embedding": [
      0.23445049210208324,
      0,
      0.005473694222572983,
      0.16257079957197226,
      0,
      0,
      0.1395332271965994,
      0,
      0.16532023944440308,
      0,
      0,
      0,
      0.044749755869866556,
      0,
      0,
      0,
      0.2706182991541434,
      0,
      0,
      0.10588730506470741,
      0.17995456576901547,
      0,
      0,
      0.19651003458068936,
      0,
      0.1987124574575998,
      0,
      0.09897779280551743,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3429229758535847,
      0.17812380076881013,
      0.0691414062572786,
      0,
      0,
      0,
      0,
      0,
      0.2244371359335442,
      0,
      0,
      0,
      0.3620140217639106,
      0.2700212141271423,
      0.139073679199587,
      0.12807015117358483,
      0,
      0,
      0,
      0.3602905326842183,
      0.061939644959640244,
      0,
      0.14389775403568894,
      0,
      0.2564927121824979,
      0.013775742286117401,
      0.022911058684970065
    ],
    "metadata": {
      "text": "**Code Example:**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.2063304454882031,
      0,
      0.009071169553822128,
      0.10988482154739379,
      0,
      0,
      0.1695458844764857,
      0,
      0.19532361093195538,
      0,
      0,
      0,
      0.034685796808082196,
      0,
      0,
      0.011445824668636086,
      0.3121379129417205,
      0,
      0,
      0.16559287468328474,
      0.2257827127921751,
      0,
      0,
      0.1668061235846045,
      0,
      0.15003938457533292,
      0,
      0.06549981808778178,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3057959486628881,
      0.2061175807184529,
      0.07163770077465216,
      0,
      0,
      0,
      0,
      0,
      0.15233388727279867,
      0,
      0,
      0,
      0.32909276769136037,
      0.2698117035813098,
      0.09403403208241376,
      0.1403359079395131,
      0,
      0.021911679178575075,
      0,
      0.3924969905701526,
      0.10648585245065323,
      0,
      0.06191000074514386,
      0,
      0.317779127895598,
      0.04386897723669748,
      0
    ],
    "metadata": {
      "text": "import (\n    \"encoding/json\"\n    \"fmt\"\n    \"net/http\"\n)"
    }
  },
  {
    "embedding": [
      0.17699866551070917,
      0,
      0,
      0.1619502620029723,
      0,
      0,
      0.19736896286425323,
      0,
      0.25860572917876345,
      0,
      0,
      0,
      0.10324592553281771,
      0,
      0,
      0,
      0.22084600266499452,
      0,
      0,
      0,
      0.18657245695236033,
      0,
      0,
      0.20174394454633832,
      0,
      0.18234686195770075,
      0,
      0.14724712611737895,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02054898157008601,
      0,
      0.2960628014985572,
      0.09933152200715373,
      0.13550191996185354,
      0,
      0,
      0,
      0,
      0,
      0.2289431775804593,
      0,
      0,
      0,
      0.39743570481283147,
      0.18019797058110043,
      0.09165991806693964,
      0.07739645851030644,
      0,
      0,
      0,
      0.4507952418479,
      0.08645121911528945,
      0,
      0.12090636430190292,
      0,
      0.20627643417383393,
      0,
      0.07309485650976093
    ],
    "metadata": {
      "text": "type Message struct {\n    Text string `json:\"text\"`\n}"
    }
  },
  {
    "embedding": [
      0.19654033530526582,
      0,
      0,
      0.19848549171536375,
      0,
      0,
      0.21536051912982376,
      0,
      0.27556946192695136,
      0.008601501984709024,
      0,
      0,
      0.12393637878767184,
      0,
      0,
      0,
      0.1757058130545123,
      0,
      0,
      0.0863262029850395,
      0.09554790012351895,
      0,
      0,
      0.12728761888603285,
      0,
      0.1389981555627389,
      0,
      0.0281654736775128,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08997580489904893,
      0,
      0.35881797412453464,
      0.3101517100527031,
      0.07798249558561676,
      0,
      0,
      0,
      0,
      0,
      0.17355545382772133,
      0,
      0,
      0,
      0.3236167779619827,
      0.1879161429285654,
      0.14642971044654565,
      0.08646844935595689,
      0,
      0.055576195452457636,
      0,
      0.36062102647247635,
      0.16135932137534928,
      0,
      0.0828446501478902,
      0,
      0.27262771672125774,
      0.14794826327207822,
      0
    ],
    "metadata": {
      "text": "func messageHandler(w http.ResponseWriter, r *http.Request) {\n    msg := Message{Text: \"Hello, API!\"}\n    json.NewEncoder(w).Encode(msg)\n}"
    }
  },
  {
    "embedding": [
      0.23526490058819444,
      0,
      0,
      0.08697537542320674,
      0,
      0,
      0.229300527553544,
      0,
      0.26970136081234675,
      0,
      0,
      0,
      0.1244288731117446,
      0,
      0,
      0,
      0.2552306662474112,
      0,
      0,
      0.022678894808054736,
      0.20274326330939235,
      0,
      0,
      0.052959613018636144,
      0,
      0.11844434818670696,
      0,
      0.1333731133047151,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04073629608220436,
      0,
      0.30421921138750674,
      0.23168936354464806,
      0.16700221648955116,
      0,
      0,
      0,
      0,
      0,
      0.33088016693105615,
      0,
      0,
      0,
      0.3783829118424312,
      0.1634141383674476,
      0.08738171018085414,
      0.11477899292040032,
      0,
      0,
      0,
      0.34358806063155534,
      0.0405657268787803,
      0,
      0.1150815811925885,
      0,
      0.2072788154777228,
      0.05520164323198789,
      0
    ],
    "metadata": {
      "text": "func main() {\n    http.HandleFunc(\"/message\", messageHandler)\n    fmt.Println(\"Server running on :8080\")\n    http.ListenAndServe(\":8080\", nil)\n}\n```"
    }
  },
  {
    "embedding": [
      0.15147381199593615,
      0.058416355353668264,
      0,
      0.1210241746361748,
      0,
      0,
      0.24777940275845156,
      0,
      0.24520298422130968,
      0,
      0,
      0,
      0.05941608520752434,
      0,
      0,
      0,
      0.3696945269122769,
      0,
      0,
      0.09628180614572907,
      0.10727403433761944,
      0,
      0,
      0.05326524281246454,
      0,
      0.19782515348053048,
      0,
      0.16936431969688112,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06620596177157954,
      0,
      0.26964444927963066,
      0.2122228162391971,
      0.21525442534975628,
      0,
      0,
      0,
      0,
      0,
      0.2194132217008261,
      0,
      0,
      0,
      0.32301352471376776,
      0.14747978005471093,
      0,
      0.16712104633426797,
      0,
      0.11371403782130035,
      0,
      0.38449210243277615,
      0.0679824771462854,
      0,
      0.02013562719426927,
      0,
      0.21247962903314566,
      0.13759817344223027,
      0.07308768197498519
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a minimal REST API with at least two endpoints."
    }
  },
  {
    "embedding": [
      0.22619175493694985,
      0.00827976677225885,
      0,
      0.20524960770022485,
      0,
      0,
      0.3148792091694437,
      0,
      0.2003062309981255,
      0,
      0,
      0,
      0.0189101932884631,
      0,
      0,
      0,
      0.30697039005289667,
      0,
      0,
      0.031206101190389388,
      0.11457993590548377,
      0,
      0,
      0.10094962476775465,
      0,
      0.18380440469724554,
      0,
      0.09842576737133316,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05275821295349368,
      0,
      0.286951676209205,
      0.3044374340887754,
      0.09560589885605285,
      0,
      0,
      0,
      0,
      0,
      0.19840610476464562,
      0,
      0,
      0,
      0.32567024361536484,
      0.1426716309702022,
      0.07360368616722383,
      0.10195450449005672,
      0,
      0,
      0,
      0.4053951804537599,
      0.14130194623953712,
      0,
      0.09902836954292288,
      0,
      0.1930233666932058,
      0.07141109604182411,
      0
    ],
    "metadata": {
      "text": "### Day 4: Web Frameworks Overview\n**Objectives:**\n- Get an overview of popular Go web frameworks (e.g., Gin, Echo, Fiber)."
    }
  },
  {
    "embedding": [
      0.17775894280430257,
      0,
      0,
      0.1088010168401308,
      0,
      0,
      0.24581538665114344,
      0,
      0.26857680720031357,
      0,
      0,
      0,
      0.050200006851229675,
      0,
      0,
      0,
      0.29204284854219276,
      0,
      0,
      0.08146614922669516,
      0.19666448864959932,
      0,
      0,
      0.17552342092318005,
      0,
      0.16025443961113925,
      0,
      0.09056210141640413,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04045030663173682,
      0,
      0.34509954451189895,
      0.21827029511920945,
      0.11300826555467132,
      0,
      0,
      0,
      0,
      0,
      0.17843899613164374,
      0,
      0,
      0,
      0.37136315748205345,
      0.21490959305044255,
      0.08196802264935019,
      0.13403337820348535,
      0,
      0.05973637956685735,
      0,
      0.3627890271709554,
      0.01686889311429625,
      0,
      0.013887949875875553,
      0,
      0.24020811907504358,
      0.05370056286659242,
      0.09045530181473838
    ],
    "metadata": {
      "text": "**Code Example (using Gin):**\n```go\npackage main"
    }
  },
  {
    "embedding": [
      0.18043067307142868,
      0,
      0,
      0.1207836918967659,
      0,
      0,
      0.2685337798700157,
      0,
      0.28015356830777055,
      0.0017393133520873833,
      0,
      0,
      0.02898774049868943,
      0,
      0,
      0,
      0.22014651453161344,
      0,
      0,
      0.050815508509734326,
      0.1893301485045313,
      0,
      0,
      0.15808035941666682,
      0,
      0.23243964949597512,
      0,
      0.07516457606988339,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.042389551701268874,
      0,
      0.3572297818266828,
      0.23561000690240236,
      0.09961468278307901,
      0,
      0,
      0,
      0,
      0,
      0.22240794364725594,
      0,
      0,
      0,
      0.32259918826200784,
      0.17939753814164883,
      0.056976710713923295,
      0.1133966741377849,
      0,
      0.09585564145517943,
      0,
      0.42751711644643914,
      0.0017131319348901808,
      0,
      0.012031887180154698,
      0,
      0.19445271972855996,
      0.010471791375153944,
      0.05620243851825278
    ],
    "metadata": {
      "text": "import (\n    \"net/http\"\n    \"github.com/gin-gonic/gin\"\n)"
    }
  },
  {
    "embedding": [
      0.13885960976833597,
      0.023088712681445835,
      0,
      0.273268080210305,
      0,
      0,
      0.26191903964834756,
      0,
      0.20144666890498616,
      0,
      0,
      0,
      0.012709692002020856,
      0,
      0,
      0,
      0.3704690016952065,
      0,
      0,
      0.0670288019443784,
      0.1442009129530369,
      0,
      0,
      0.1245195444955863,
      0,
      0.16940074062631197,
      0,
      0.11346405157663496,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013572603001792527,
      0,
      0.258043243810185,
      0.18367382699944287,
      0.15461447096315228,
      0,
      0,
      0,
      0,
      0,
      0.17030380593301944,
      0,
      0,
      0,
      0.3479456416956626,
      0.19246413063861853,
      0.039368370239665496,
      0.13860395227084574,
      0,
      0,
      0,
      0.4167001274682446,
      0.04110013591072276,
      0,
      0.04188710341972036,
      0,
      0.25729047500707164,
      0.01573305603838728,
      0.02723795366887154
    ],
    "metadata": {
      "text": "func main() {\n    r := gin.Default()\n    r.GET(\"/ping\", func(c *gin.Context) {\n        c.JSON(http.StatusOK, gin.H{\"message\": \"pong\"})\n    })\n    r.Run(\":8080\")\n}\n```"
    }
  },
  {
    "embedding": [
      0.2012182504951881,
      0,
      0,
      0.1464184320469771,
      0,
      0,
      0.16475093020479167,
      0,
      0.21336788666500336,
      0,
      0,
      0,
      0.08850150831174323,
      0,
      0,
      0,
      0.36397386144354765,
      0,
      0,
      0.18853635028014784,
      0.1467966253267788,
      0,
      0,
      0,
      0,
      0.13963747556906145,
      0,
      0.11394291820092661,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03890255379099892,
      0,
      0.24243856445590045,
      0.09542936761915487,
      0.1964230914143002,
      0,
      0,
      0,
      0,
      0,
      0.2413989318689209,
      0,
      0,
      0,
      0.3572693435065636,
      0.285397340534233,
      0,
      0.14162787723694456,
      0,
      0,
      0,
      0.42256494199925154,
      0.02014101841805461,
      0,
      0,
      0,
      0.22800191264263125,
      0.09050816385005238,
      0.03115846742854579
    ],
    "metadata": {
      "text": "**Exercises:**\n- Install a web framework of your choice and create a simple routing example."
    }
  },
  {
    "embedding": [
      0.2814983001967131,
      0.008938834498514696,
      0,
      0.12887387369852557,
      0,
      0,
      0.2543163176675679,
      0,
      0.24266927063324312,
      0,
      0,
      0,
      0.15116564808088817,
      0,
      0,
      0,
      0.21239590213395917,
      0,
      0,
      0.027825286583926405,
      0.18493063701613405,
      0,
      0,
      0.10652224224616458,
      0,
      0.21807150023291832,
      0,
      0.14381704391639866,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008394208549254727,
      0,
      0.25187966534973816,
      0.2188602794541495,
      0.040789992410840366,
      0,
      0,
      0,
      0,
      0,
      0.20357149893850252,
      0,
      0,
      0,
      0.2874452305530844,
      0.17343330902184084,
      0.13155361205242375,
      0.16194680031606218,
      0,
      0.03949966220870532,
      0,
      0.4460245971774056,
      0.07240472624394867,
      0,
      0.15773068144637412,
      0,
      0.21961573745417812,
      0.09152335929872475,
      0
    ],
    "metadata": {
      "text": "### Day 5: Deployment and Project Structure\n**Objectives:**\n- Learn how to structure a Go project and prepare it for deployment.\n- Understand version control basics with Git."
    }
  },
  {
    "embedding": [
      0.2013616977821503,
      0,
      0,
      0.10316894591013887,
      0,
      0,
      0.17593635071737615,
      0,
      0.2359246489967073,
      0.008422790046538457,
      0,
      0,
      0.09474186661667132,
      0,
      0,
      0,
      0.347333380460158,
      0,
      0,
      0.10975342907028408,
      0.11948560988057351,
      0,
      0,
      0.04792412917227714,
      0,
      0.1299992688441229,
      0,
      0.19226037660406262,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08302156915129187,
      0,
      0.3764268729582037,
      0.258427294890256,
      0.07995405517199246,
      0,
      0,
      0,
      0,
      0,
      0.2491168719433032,
      0,
      0,
      0,
      0.2690724261920663,
      0.22407783823090205,
      0.07716523504167569,
      0.17515961504345381,
      0,
      0.04539836381431084,
      0,
      0.37403892741216715,
      0.039573082337058155,
      0,
      0,
      0,
      0.2264862248586167,
      0.11011020001629243,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Organize your CLI or web project using modules (`go mod init`) and document build instructions."
    }
  },
  {
    "embedding": [
      0.17261267187106308,
      0,
      0,
      0.3087499118203133,
      0,
      0,
      0.2133445776131167,
      0,
      0.24891825791879696,
      0.05277624735545173,
      0,
      0,
      0,
      0,
      0,
      0,
      0.22247600058843903,
      0,
      0,
      0.09586612552310113,
      0.14044400258201087,
      0,
      0,
      0.19826480300403257,
      0,
      0.21281980592361502,
      0,
      0.019649435187149525,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08198967532535544,
      0,
      0.279944463993462,
      0.1444225943246238,
      0.10425605884612826,
      0,
      0,
      0,
      0,
      0,
      0.24213811217956474,
      0,
      0,
      0,
      0.36135228384313944,
      0.2719478234915222,
      0.08570197796201869,
      0.13018583584546095,
      0,
      0,
      0,
      0.36893881563249414,
      0.0124817005108799,
      0,
      0.13176001835213969,
      0,
      0.1856637300048377,
      0,
      0.09403290589687435
    ],
    "metadata": {
      "text": "## ||| Week 16: Final Project and Career Development"
    }
  },
  {
    "embedding": [
      0.22301608681294802,
      0,
      0.016380405615364114,
      0.26463229605349237,
      0,
      0,
      0.2359808272233315,
      0,
      0.25856630284916454,
      0,
      0,
      0,
      0,
      0,
      0.0032284685372826,
      0,
      0.2535940780808594,
      0,
      0,
      0.02612383116570587,
      0.1968340453497802,
      0,
      0,
      0.20609029847213814,
      0,
      0.14468267109418792,
      0,
      0.0747191064213138,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09354017681247279,
      0,
      0.345986250400166,
      0.27230115869696736,
      0.10691016487710603,
      0,
      0,
      0,
      0,
      0,
      0.2014234415916141,
      0,
      0,
      0,
      0.37914447310663163,
      0.17823537524470073,
      0.10698274943668877,
      0.039687352882182364,
      0,
      0,
      0,
      0.2591339874728497,
      0.013796660727067532,
      0,
      0.18466583193448513,
      0,
      0.20013787766093516,
      0,
      0.006672433604716924
    ],
    "metadata": {
      "text": "### Day 1: Final Project Kick-off\n**Objectives:**\n- Outline your final project (e.g., a task manager or blog engine).\n- Define requirements and plan features."
    }
  },
  {
    "embedding": [
      0.2364139334674065,
      0.01882593929352976,
      0,
      0.07232723879621836,
      0,
      0,
      0.3054514396207608,
      0,
      0.2902022471335287,
      0,
      0,
      0,
      0.0961846714842865,
      0,
      0,
      0,
      0.32615929153039486,
      0,
      0,
      0.02918152848964126,
      0.1405795640741865,
      0,
      0,
      0.08569635635139036,
      0,
      0.153982458851254,
      0,
      0.15962779928081947,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0648841481452506,
      0,
      0.27334583366523346,
      0.283150490336601,
      0.17891481436492837,
      0,
      0,
      0,
      0,
      0,
      0.20361413971354422,
      0,
      0,
      0,
      0.36299176663895105,
      0.13407643631699825,
      0.06399190341230383,
      0.14457888282542147,
      0,
      0,
      0,
      0.33142257116860935,
      0.06998008280444719,
      0,
      0.053970417547037665,
      0,
      0.2079849743748748,
      0.0025075929276347424,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a project plan outlining the main features and modules."
    }
  },
  {
    "embedding": [
      0.22913530041088764,
      0.0565975722570407,
      0,
      0.09381104767140952,
      0,
      0,
      0.22272519054239365,
      0,
      0.2788717821201258,
      0,
      0,
      0,
      0.07981070775342668,
      0,
      0,
      0,
      0.3559812020328706,
      0,
      0,
      0.022141411201845828,
      0.1327302515763396,
      0,
      0,
      0.047279643390267086,
      0,
      0.19502650264194704,
      0,
      0.13942350830168054,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2395256850212559,
      0.2001516827156739,
      0.21634265255442697,
      0,
      0,
      0,
      0,
      0,
      0.22230439755465214,
      0,
      0,
      0,
      0.29956588671014867,
      0.16216603324571088,
      0.12180556100089707,
      0.20428743251371415,
      0,
      0.01047761307705594,
      0,
      0.40624446658342706,
      0.1152710738010537,
      0,
      0.08150639984081717,
      0,
      0.18441761818497854,
      0.108645974603044,
      0.007395568694878567
    ],
    "metadata": {
      "text": "### Day 2: Building the Core Functionality\n**Objectives:**\n- Implement the core components of your project.\n- Define data models and core functions."
    }
  },
  {
    "embedding": [
      0.1285128034686757,
      0.04658550043066267,
      0,
      0.0896322826430717,
      0,
      0,
      0.20981871656966564,
      0,
      0.2514628366171898,
      0.009687038123183785,
      0,
      0,
      0.0881587846460573,
      0,
      0,
      0,
      0.3503619286310625,
      0,
      0,
      0.050821131652561684,
      0.1202866297432223,
      0,
      0,
      0.14977904643232295,
      0,
      0.17562233477215272,
      0,
      0.1403959006993395,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3447632226697676,
      0.23808116613283914,
      0.12047372520622056,
      0,
      0,
      0,
      0,
      0,
      0.138863653940592,
      0,
      0,
      0,
      0.2778123490887718,
      0.2628871052437439,
      0.12620589161377338,
      0.15067486258873908,
      0,
      0.08186603360351213,
      0,
      0.42916396687662706,
      0.06779008627394886,
      0,
      0.006339935104116467,
      0,
      0.2292856746996873,
      0.05484976835418483,
      0.0015910124260530923
    ],
    "metadata": {
      "text": "**Exercises:**\n- Start coding the main functionality (e.g., data handling for a task manager)."
    }
  },
  {
    "embedding": [
      0.1607072030907111,
      0,
      0,
      0.07384827139349824,
      0,
      0,
      0.21114308736934387,
      0,
      0.31207941758084895,
      0,
      0,
      0,
      0.13442687608567597,
      0,
      0,
      0,
      0.27473273527566583,
      0,
      0,
      0.03188956238292027,
      0.22643315139035833,
      0,
      0,
      0.07879223691010803,
      0,
      0.18997678797930392,
      0,
      0.08947185573235061,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0637964533015318,
      0,
      0.23359073923340845,
      0.2040754149607779,
      0.12666154820599757,
      0,
      0,
      0,
      0,
      0,
      0.17443482106390135,
      0,
      0,
      0,
      0.3052382990695624,
      0.24168051994388112,
      0.2024324991968983,
      0.07120918376035719,
      0,
      0.04089520388986053,
      0,
      0.45625325619540724,
      0.010087432912648167,
      0,
      0.1178104679084934,
      0,
      0.23106548381440953,
      0.08513073691664655,
      0.0419744268420477
    ],
    "metadata": {
      "text": "### Day 3: Expanding the Project\n**Objectives:**\n- Add additional features, error handling, and concurrency if applicable.\n- Integrate modules built in previous weeks."
    }
  },
  {
    "embedding": [
      0.24368322749860888,
      0,
      0,
      0.08467866141576672,
      0,
      0,
      0.1442239622216224,
      0,
      0.3180092514067337,
      0.03475817732398814,
      0,
      0,
      0.08010825473736266,
      0,
      0,
      0.017753050634110167,
      0.35744886177660956,
      0,
      0,
      0.09428138773567654,
      0.1099648612130165,
      0,
      0,
      0.07180013034058536,
      0,
      0.13375017933955044,
      0,
      0.039944658999839074,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08130630226888534,
      0,
      0.24050452477202375,
      0.25834174203024207,
      0.0471139257790056,
      0,
      0,
      0,
      0,
      0,
      0.2021131501079313,
      0,
      0,
      0,
      0.38393334879186813,
      0.22648338355419276,
      0.03272864071081832,
      0.12941247030017572,
      0,
      0,
      0,
      0.3786370304222452,
      0.12459556966171727,
      0,
      0.07351961601481202,
      0,
      0.2539602699373694,
      0.1030228637553815,
      0
    ],
    "metadata": {
      "text": "**Exercises:**\n- Enhance your project with extra features (e.g., user authentication or background processing)."
    }
  },
  {
    "embedding": [
      0.13561525142790284,
      0.009768254313238026,
      0,
      0.1493831815529801,
      0,
      0,
      0.25188497889913763,
      0,
      0.19793250338294294,
      0,
      0,
      0,
      0.13599855964061575,
      0,
      0,
      0,
      0.35266223779456446,
      0,
      0,
      0.1583701110960861,
      0.15360079283550535,
      0,
      0,
      0.12039339340400598,
      0,
      0.2340510325657869,
      0,
      0.14816162131558291,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.23557142574851547,
      0.16270703569036152,
      0.16613078438751394,
      0,
      0,
      0,
      0,
      0,
      0.23161385702112605,
      0,
      0,
      0,
      0.3155650144235743,
      0.22703532374977614,
      0.09032439916980778,
      0.16409368261668794,
      0,
      0.006766944659764888,
      0,
      0.41637805626061974,
      0.06816137804551156,
      0,
      0.016068691225308046,
      0,
      0.20966297287339367,
      0.04587912396579004,
      0
    ],
    "metadata": {
      "text": "### Day 4: Testing and Debugging the Final Project\n**Objectives:**\n- Write tests for your final project.\n- Debug and refactor your code."
    }
  },
  {
    "embedding": [
      0.29383509759949755,
      0,
      0,
      0.1112147142538395,
      0,
      0,
      0.26523034208386276,
      0,
      0.25441060213951305,
      0,
      0,
      0,
      0.08752190938616997,
      0,
      0,
      0,
      0.26665528864329024,
      0,
      0,
      0.06326062017656289,
      0.17343889522246267,
      0,
      0,
      0.10430472582027904,
      0,
      0.16000278754908093,
      0,
      0.08157101350422154,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0452386742261638,
      0,
      0.23100377749281678,
      0.21776006897858605,
      0.08382285569763728,
      0,
      0,
      0,
      0,
      0,
      0.2599121514447697,
      0,
      0,
      0,
      0.36593648814307667,
      0.23617188363466296,
      0.12909184319216382,
      0.19025150447485814,
      0,
      0,
      0,
      0.30568902220026845,
      0.06203634365528542,
      0,
      0.09694667250531581,
      0,
      0.25784997160072853,
      0.1305631535670719,
      0.0074447504663359984
    ],
    "metadata": {
      "text": "**Exercises:**\n- Create a test suite covering core functions.\n- Refactor your code for readability and maintainability."
    }
  },
  {
    "embedding": [
      0.24009011974765393,
      0,
      0.024594158458834593,
      0.18950904840793034,
      0,
      0,
      0.13804850803141794,
      0,
      0.2105540291264168,
      0,
      0,
      0,
      0.08301337882854064,
      0,
      0,
      0.015206669509288175,
      0.2616043731302956,
      0,
      0,
      0.1503418593807132,
      0.11696709466525061,
      0.032586998077278814,
      0,
      0.13956422878874236,
      0,
      0.11166104185725209,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.052730388259235136,
      0,
      0.3057784362260799,
      0.3244088096530745,
      0.010128829974030423,
      0,
      0,
      0,
      0,
      0,
      0.19243134087398045,
      0,
      0,
      0,
      0.3207553092246039,
      0.1552945863829921,
      0.15353809852374412,
      0.09076040303761197,
      0,
      0,
      0,
      0.3860828045349857,
      0.11324254405473386,
      0,
      0.20290901169553477,
      0,
      0.29244933526541766,
      0.07994277828433502,
      0.07181005909079867
    ],
    "metadata": {
      "text": "### Day 5: Final Review, Code Cleanup, and Career Prep\n**Objectives:**\n- Finalize your project, add documentation, and prepare a README.\n- Learn about code reviews, Git usage, and interview preparation tips."
    }
  },
  {
    "embedding": [
      0.19967310931844318,
      0,
      0,
      0.16735661087532083,
      0,
      0,
      0.18696713933997994,
      0,
      0.2768730158065532,
      0.03885918210123563,
      0,
      0,
      0.1420681685415297,
      0,
      0,
      0,
      0.2976749767809495,
      0,
      0,
      0.10201393352464089,
      0.17774719768088365,
      0,
      0,
      0.1112756611156367,
      0,
      0.1690411046592161,
      0,
      0.09058871529081795,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2739277523260141,
      0.263574365322976,
      0.03627393879911181,
      0,
      0,
      0,
      0,
      0,
      0.20111273673068822,
      0,
      0,
      0,
      0.3388277499142521,
      0.2203683350063271,
      0.15527948356603324,
      0.10769294842829871,
      0,
      0,
      0,
      0.411438270090023,
      0.026859562469947303,
      0,
      0.135105146554872,
      0,
      0.19833693306551547,
      0.07692657349693334,
      0.013468510111615713
    ],
    "metadata": {
      "text": "**Exercises:**\n- Submit your project to GitHub.\n- Write a reflection on your learning journey and prepare for technical interviews."
    }
  }
]